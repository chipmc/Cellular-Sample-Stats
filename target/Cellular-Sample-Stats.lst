
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Sample-Stats/target/Cellular-Sample-Stats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003cd4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017ddc  2**0
                  CONTENTS
  4 .data         000000c0  2003e224  000d7cf0  0000e224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000050c  2003e2e8  2003e2e8  0001e2e8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d7db0  000d7db0  00017db0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7dd8  000d7dd8  00017dd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e13ff  00000000  00000000  00017ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011e2d  00000000  00000000  000f91db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ec9c  00000000  00000000  0010b008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002708  00000000  00000000  00129ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004848  00000000  00000000  0012c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036146  00000000  00000000  00130bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b4aa  00000000  00000000  00166d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001022a5  00000000  00000000  001921e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d544  00000000  00000000  0029448c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 febf 	bl	d6db0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fec4 	bl	d6dc6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e224 	.word	0x2003e224
   d4048:	000d7cf0 	.word	0x000d7cf0
   d404c:	2003e2e4 	.word	0x2003e2e4
   d4050:	2003e2e8 	.word	0x2003e2e8
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ffc9 	bl	d5ff0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7ce4 	.word	0x000d7ce4
   d4080:	000d7ca4 	.word	0x000d7ca4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b936 	b.w	d42f4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9f1 	bl	d4470 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bf7b 	b.w	d5f8c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be41 	b.w	d4d1c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 be47 	b.w	d4d2c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 be45 	b.w	d4d2c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command)                                          // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f001 fd3f 	bl	d5b3a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d7914 	.word	0x000d7914
   d40cc:	2003e30c 	.word	0x2003e30c

000d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40d6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d8:	f88d 3000 	strb.w	r3, [sp]
   d40dc:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40de:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e0:	f001 f84e 	bl	d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40e4:	4628      	mov	r0, r5
   d40e6:	b003      	add	sp, #12
   d40e8:	bd30      	pop	{r4, r5, pc}
	...

000d40ec <_Z16takeMeasurementsv>:
  myRA.clear();
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {                                               // Mocked up here for the call - need to replace with your real readings
   d40ec:	b513      	push	{r0, r1, r4, lr}
  soilMoisture = random(100);                                           // SoilMoisture Measurements here
   d40ee:	2064      	movs	r0, #100	; 0x64
   d40f0:	f001 fc70 	bl	d59d4 <_Z6randomi>
   d40f4:	ee07 0a90 	vmov	s15, r0
   d40f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d40fc:	4c10      	ldr	r4, [pc, #64]	; (d4140 <_Z16takeMeasurementsv+0x54>)
  snprintf(soilMoistureString,sizeof(soilMoistureString), "%4.1f %%", soilMoisture);
   d40fe:	ee17 0a90 	vmov	r0, s15
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {                                               // Mocked up here for the call - need to replace with your real readings
  soilMoisture = random(100);                                           // SoilMoisture Measurements here
   d4102:	edc4 7a00 	vstr	s15, [r4]
  snprintf(soilMoistureString,sizeof(soilMoistureString), "%4.1f %%", soilMoisture);
   d4106:	f002 fae7 	bl	d66d8 <__aeabi_f2d>
   d410a:	4a0e      	ldr	r2, [pc, #56]	; (d4144 <_Z16takeMeasurementsv+0x58>)
   d410c:	e9cd 0100 	strd	r0, r1, [sp]
   d4110:	2110      	movs	r1, #16
   d4112:	480d      	ldr	r0, [pc, #52]	; (d4148 <_Z16takeMeasurementsv+0x5c>)
   d4114:	f000 fe22 	bl	d4d5c <snprintf>

  myRA.addValue(soilMoisture);                                          // Add this sample to the running average
   d4118:	6820      	ldr	r0, [r4, #0]
   d411a:	f002 fadd 	bl	d66d8 <__aeabi_f2d>
   d411e:	ec41 0b10 	vmov	d0, r0, r1
   d4122:	480a      	ldr	r0, [pc, #40]	; (d414c <_Z16takeMeasurementsv+0x60>)
   d4124:	f000 fb53 	bl	d47ce <_ZN14RunningAverage8addValueEd>
  samples++;                                                            // Increment the sample currentCountsTimeAddr
   d4128:	4a09      	ldr	r2, [pc, #36]	; (d4150 <_Z16takeMeasurementsv+0x64>)
   d412a:	6813      	ldr	r3, [r2, #0]
   d412c:	3301      	adds	r3, #1
   d412e:	6013      	str	r3, [r2, #0]

  currentMinutePeriod = Time.minute();                                  // So we only count once in a minute
   d4130:	f001 fdea 	bl	d5d08 <_ZN9TimeClass6minuteEv>
   d4134:	4b07      	ldr	r3, [pc, #28]	; (d4154 <_Z16takeMeasurementsv+0x68>)
   d4136:	7018      	strb	r0, [r3, #0]
  return 1;                                                             // Done, measurements take and the data array is stored as an obeect in EEPROM                                         
}
   d4138:	2001      	movs	r0, #1
   d413a:	b002      	add	sp, #8
   d413c:	bd10      	pop	{r4, pc}
   d413e:	bf00      	nop
   d4140:	2003e320 	.word	0x2003e320
   d4144:	000d76b8 	.word	0x000d76b8
   d4148:	2003e2f1 	.word	0x2003e2f1
   d414c:	2003e328 	.word	0x2003e328
   d4150:	2003e340 	.word	0x2003e340
   d4154:	2003e314 	.word	0x2003e314

000d4158 <_Z17connectToParticlev>:

// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d4158:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d415c:	482a      	ldr	r0, [pc, #168]	; (d4208 <_Z17connectToParticlev+0xb0>)
   d415e:	2300      	movs	r3, #0
   d4160:	461a      	mov	r2, r3
   d4162:	4619      	mov	r1, r3
   d4164:	6840      	ldr	r0, [r0, #4]
   d4166:	f000 fda9 	bl	d4cbc <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d416a:	f000 fd4f 	bl	d4c0c <spark_cloud_flag_connect>
   d416e:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4172:	f240 36e7 	movw	r6, #999	; 0x3e7
   d4176:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4178:	2000      	movs	r0, #0
   d417a:	f000 fbd9 	bl	d4930 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d417e:	f04f 0900 	mov.w	r9, #0
   d4182:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4184:	2000      	movs	r0, #0
   d4186:	f000 fbd3 	bl	d4930 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d418a:	ebb0 0008 	subs.w	r0, r0, r8
   d418e:	eb61 0109 	sbc.w	r1, r1, r9
   d4192:	428f      	cmp	r7, r1
   d4194:	bf08      	it	eq
   d4196:	4286      	cmpeq	r6, r0
   d4198:	d305      	bcc.n	d41a6 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d419a:	f000 fd47 	bl	d4c2c <spark_cloud_flag_connected>
   d419e:	b910      	cbnz	r0, d41a6 <_Z17connectToParticlev+0x4e>
            spark_process();
   d41a0:	f000 fd2c 	bl	d4bfc <spark_process>
   d41a4:	e7ee      	b.n	d4184 <_Z17connectToParticlev+0x2c>
   d41a6:	f000 fd41 	bl	d4c2c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41aa:	b1d0      	cbz	r0, d41e2 <_Z17connectToParticlev+0x8a>
   d41ac:	f000 fd3e 	bl	d4c2c <spark_cloud_flag_connected>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) {
   d41b0:	4604      	mov	r4, r0
   d41b2:	b328      	cbz	r0, d4200 <_Z17connectToParticlev+0xa8>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41b4:	2000      	movs	r0, #0
   d41b6:	f000 fbbb 	bl	d4930 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41ba:	2700      	movs	r7, #0
   d41bc:	4606      	mov	r6, r0
   d41be:	f64e 285f 	movw	r8, #59999	; 0xea5f
   d41c2:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d41c6:	2000      	movs	r0, #0
   d41c8:	f000 fbb2 	bl	d4930 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41cc:	1b80      	subs	r0, r0, r6
   d41ce:	eb61 0107 	sbc.w	r1, r1, r7
   d41d2:	4589      	cmp	r9, r1
   d41d4:	bf08      	it	eq
   d41d6:	4580      	cmpeq	r8, r0
   d41d8:	d30c      	bcc.n	d41f4 <_Z17connectToParticlev+0x9c>
    waitFor(Time.isValid, 60000);
   d41da:	f001 fd62 	bl	d5ca2 <_ZN9TimeClass7isValidEv>
   d41de:	b948      	cbnz	r0, d41f4 <_Z17connectToParticlev+0x9c>
   d41e0:	e00b      	b.n	d41fa <_Z17connectToParticlev+0xa2>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41e2:	f000 fb75 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41e6:	4b09      	ldr	r3, [pc, #36]	; (d420c <_Z17connectToParticlev+0xb4>)
   d41e8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d41ea:	f000 fd07 	bl	d4bfc <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41ee:	3c01      	subs	r4, #1
   d41f0:	d0dc      	beq.n	d41ac <_Z17connectToParticlev+0x54>
   d41f2:	e7c1      	b.n	d4178 <_Z17connectToParticlev+0x20>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) {
    waitFor(Time.isValid, 60000);
   d41f4:	f001 fd55 	bl	d5ca2 <_ZN9TimeClass7isValidEv>
   d41f8:	e002      	b.n	d4200 <_Z17connectToParticlev+0xa8>
            spark_process();
   d41fa:	f000 fcff 	bl	d4bfc <spark_process>
   d41fe:	e7e2      	b.n	d41c6 <_Z17connectToParticlev+0x6e>
    return 1;                                                           // Were able to connect successfully
  }
  else return 0;                                                        // Failed to connect
}
   d4200:	4620      	mov	r0, r4
   d4202:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d4206:	bf00      	nop
   d4208:	2003e348 	.word	0x2003e348
   d420c:	2003e6e8 	.word	0x2003e6e8

000d4210 <_Z22disconnectFromParticlev>:

bool disconnectFromParticle()
{
   d4210:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4212:	f000 fd03 	bl	d4c1c <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4216:	4806      	ldr	r0, [pc, #24]	; (d4230 <_Z22disconnectFromParticlev+0x20>)
   d4218:	2300      	movs	r3, #0
   d421a:	461a      	mov	r2, r3
   d421c:	4619      	mov	r1, r3
   d421e:	6840      	ldr	r0, [r0, #4]
   d4220:	f000 fd54 	bl	d4ccc <network_off>
  Particle.disconnect();                                                // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                          // Bummer but only should happen once an hour
   d4224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4228:	f000 fdb0 	bl	d4d8c <delay>
  return true;
}
   d422c:	2001      	movs	r0, #1
   d422e:	bd08      	pop	{r3, pc}
   d4230:	2003e348 	.word	0x2003e348

000d4234 <_Z20meterParticlePublishv>:
  EEPROM.write(0,controlRegister);           // Write it to the register
  return 1;
}

bool meterParticlePublish(void)
{
   d4234:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= 1000) {                                  // Particle only lets us publish once a second
   d4236:	4c07      	ldr	r4, [pc, #28]	; (d4254 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4238:	f000 fb4a 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
   d423c:	6823      	ldr	r3, [r4, #0]
   d423e:	1ac0      	subs	r0, r0, r3
   d4240:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4244:	d304      	bcc.n	d4250 <_Z20meterParticlePublishv+0x1c>
   d4246:	f000 fb43 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d424a:	6020      	str	r0, [r4, #0]
   d424c:	2001      	movs	r0, #1
   d424e:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4250:	2000      	movs	r0, #0
}
   d4252:	bd10      	pop	{r4, pc}
   d4254:	2003e2ec 	.word	0x2003e2ec

000d4258 <_ZN11SystemClass18waitConditionWhileIZ9sendEventvEUlvE_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.23>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4258:	b508      	push	{r3, lr}
}

void sendEvent()                                                        // Simple publish for this example - would be a Particle Webhook in real use
{
  char data[64];                                                        // Store the date in this character array - not global
  waitUntil(meterParticlePublish);
   d425a:	f7ff ffeb 	bl	d4234 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d425e:	b118      	cbz	r0, d4268 <_ZN11SystemClass18waitConditionWhileIZ9sendEventvEUlvE_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.23+0x10>
            spark_process();
        }
        return _condition();
    }
   d4260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4264:	f7ff bfe6 	b.w	d4234 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4268:	f000 fcc8 	bl	d4bfc <spark_process>
   d426c:	e7f5      	b.n	d425a <_ZN11SystemClass18waitConditionWhileIZ9sendEventvEUlvE_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.23+0x2>
	...

000d4270 <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4270:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4272:	f000 fcd3 	bl	d4c1c <spark_cloud_flag_disconnect>
   d4276:	f000 fb2b 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d427a:	f643 2597 	movw	r5, #14999	; 0x3a97
   d427e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4280:	f000 fcd4 	bl	d4c2c <spark_cloud_flag_connected>
   d4284:	b140      	cbz	r0, d4298 <_Z14fullModemResetv+0x28>
   d4286:	f000 fb23 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
   d428a:	1b00      	subs	r0, r0, r4
   d428c:	42a8      	cmp	r0, r5
   d428e:	d803      	bhi.n	d4298 <_Z14fullModemResetv+0x28>
		delay(100);
   d4290:	2064      	movs	r0, #100	; 0x64
   d4292:	f000 fd7b 	bl	d4d8c <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d4296:	e7f3      	b.n	d4280 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4298:	2100      	movs	r1, #0
   d429a:	4b09      	ldr	r3, [pc, #36]	; (d42c0 <_Z14fullModemResetv+0x50>)
   d429c:	f247 5230 	movw	r2, #30000	; 0x7530
   d42a0:	4608      	mov	r0, r1
   d42a2:	f000 fadd 	bl	d4860 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d42a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42aa:	f000 fd6f 	bl	d4d8c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d42ae:	4b05      	ldr	r3, [pc, #20]	; (d42c4 <_Z14fullModemResetv+0x54>)
   d42b0:	220a      	movs	r2, #10
   d42b2:	681b      	ldr	r3, [r3, #0]
   d42b4:	2101      	movs	r1, #1
   d42b6:	4668      	mov	r0, sp
   d42b8:	f001 fc52 	bl	d5b60 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d42bc:	b003      	add	sp, #12
   d42be:	bd30      	pop	{r4, r5, pc}
   d42c0:	000d76c1 	.word	0x000d76c1
   d42c4:	2003e318 	.word	0x2003e318

000d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42ca:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42cc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42ce:	b17c      	cbz	r4, d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42d0:	6863      	ldr	r3, [r4, #4]
   d42d2:	3b01      	subs	r3, #1
   d42d4:	6063      	str	r3, [r4, #4]
   d42d6:	b95b      	cbnz	r3, d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42d8:	6823      	ldr	r3, [r4, #0]
   d42da:	4620      	mov	r0, r4
   d42dc:	689b      	ldr	r3, [r3, #8]
   d42de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42e0:	68a3      	ldr	r3, [r4, #8]
   d42e2:	3b01      	subs	r3, #1
   d42e4:	60a3      	str	r3, [r4, #8]
   d42e6:	b91b      	cbnz	r3, d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42e8:	6823      	ldr	r3, [r4, #0]
   d42ea:	4620      	mov	r0, r4
   d42ec:	68db      	ldr	r3, [r3, #12]
   d42ee:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42f0:	4628      	mov	r0, r5
   d42f2:	bd38      	pop	{r3, r4, r5, pc}

000d42f4 <setup>:

// Timing Variable
byte currentMinutePeriod;                                         // control timing when using 5-min samp intervals

void setup()                                                      // Note: Disconnected Setup()
{
   d42f4:	b570      	push	{r4, r5, r6, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d42f6:	4b33      	ldr	r3, [pc, #204]	; (d43c4 <setup+0xd0>)

// Timing Variable
byte currentMinutePeriod;                                         // control timing when using 5-min samp intervals

void setup()                                                      // Note: Disconnected Setup()
{
   d42f8:	b094      	sub	sp, #80	; 0x50
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d42fa:	aa04      	add	r2, sp, #16
   d42fc:	f103 0610 	add.w	r6, r3, #16
   d4300:	4615      	mov	r5, r2
   d4302:	6818      	ldr	r0, [r3, #0]
   d4304:	6859      	ldr	r1, [r3, #4]
   d4306:	4614      	mov	r4, r2
   d4308:	c403      	stmia	r4!, {r0, r1}
   d430a:	3308      	adds	r3, #8
   d430c:	42b3      	cmp	r3, r6
   d430e:	4622      	mov	r2, r4
   d4310:	d1f7      	bne.n	d4302 <setup+0xe>
   d4312:	8819      	ldrh	r1, [r3, #0]
   d4314:	789b      	ldrb	r3, [r3, #2]
   d4316:	8021      	strh	r1, [r4, #0]
   d4318:	222d      	movs	r2, #45	; 0x2d
   d431a:	70a3      	strb	r3, [r4, #2]
   d431c:	2100      	movs	r1, #0
   d431e:	f10d 0023 	add.w	r0, sp, #35	; 0x23
  state = IDLE_STATE;
   d4322:	4c29      	ldr	r4, [pc, #164]	; (d43c8 <setup+0xd4>)
// Timing Variable
byte currentMinutePeriod;                                         // control timing when using 5-min samp intervals

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4324:	f002 fd4f 	bl	d6dc6 <memset>
  state = IDLE_STATE;
   d4328:	2302      	movs	r3, #2

  pinMode(blueLED, OUTPUT);                                             // declare the Blue LED Pin as an output
   d432a:	2101      	movs	r1, #1
   d432c:	2007      	movs	r0, #7
byte currentMinutePeriod;                                         // control timing when using 5-min samp intervals

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
   d432e:	7023      	strb	r3, [r4, #0]

  pinMode(blueLED, OUTPUT);                                             // declare the Blue LED Pin as an output
   d4330:	f001 fe9c 	bl	d606c <pinMode>
  digitalWrite(blueLED,HIGH);                                           // Will turn on the BlueLed when the device is awake
   d4334:	2101      	movs	r1, #1
   d4336:	2007      	movs	r0, #7
   d4338:	f001 fea9 	bl	d608e <digitalWrite>

  myRA.clear();                                                         // Clear the buffer
   d433c:	4823      	ldr	r0, [pc, #140]	; (d43cc <setup+0xd8>)
   d433e:	f000 fa23 	bl	d4788 <_ZN14RunningAverage5clearEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4342:	2300      	movs	r3, #0
   d4344:	2201      	movs	r2, #1
   d4346:	4922      	ldr	r1, [pc, #136]	; (d43d0 <setup+0xdc>)
   d4348:	4822      	ldr	r0, [pc, #136]	; (d43d4 <setup+0xe0>)
   d434a:	f000 fc47 	bl	d4bdc <spark_variable>
   d434e:	4922      	ldr	r1, [pc, #136]	; (d43d8 <setup+0xe4>)
   d4350:	4822      	ldr	r0, [pc, #136]	; (d43dc <setup+0xe8>)
   d4352:	6809      	ldr	r1, [r1, #0]
   d4354:	2300      	movs	r3, #0
   d4356:	2204      	movs	r2, #4
   d4358:	f000 fc40 	bl	d4bdc <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d435c:	4a20      	ldr	r2, [pc, #128]	; (d43e0 <setup+0xec>)
   d435e:	4921      	ldr	r1, [pc, #132]	; (d43e4 <setup+0xf0>)
   d4360:	4821      	ldr	r0, [pc, #132]	; (d43e8 <setup+0xf4>)
   d4362:	f000 fdec 	bl	d4f3e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4366:	4a21      	ldr	r2, [pc, #132]	; (d43ec <setup+0xf8>)
   d4368:	4921      	ldr	r1, [pc, #132]	; (d43f0 <setup+0xfc>)
   d436a:	481f      	ldr	r0, [pc, #124]	; (d43e8 <setup+0xf4>)
   d436c:	f000 fde7 	bl	d4f3e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("Release", releaseNumber);

  Particle.function("Measure-Now",measureNow);
  Particle.function("LowPowerMode",setLowPowerMode);

  if (!connectToParticle()) state = ERROR_STATE;
   d4370:	f7ff fef2 	bl	d4158 <_Z17connectToParticlev>
   d4374:	b908      	cbnz	r0, d437a <setup+0x86>
   d4376:	2301      	movs	r3, #1
   d4378:	7023      	strb	r3, [r4, #0]

  // Load time variables
  currentMinutePeriod = Time.minute();
   d437a:	f001 fcc5 	bl	d5d08 <_ZN9TimeClass6minuteEv>
   d437e:	4b1d      	ldr	r3, [pc, #116]	; (d43f4 <setup+0x100>)
   d4380:	7018      	strb	r0, [r3, #0]

  // And set the flags from the control register
  controlRegister = EEPROM.read(0);                                     // Read the Control Register for system modes so they stick even after reset
   d4382:	f001 fe9d 	bl	d60c0 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4386:	2000      	movs	r0, #0
   d4388:	f000 faba 	bl	d4900 <HAL_EEPROM_Read>
   d438c:	4b1a      	ldr	r3, [pc, #104]	; (d43f8 <setup+0x104>)
   d438e:	7018      	strb	r0, [r3, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d4390:	4b0f      	ldr	r3, [pc, #60]	; (d43d0 <setup+0xdc>)
   d4392:	f000 0001 	and.w	r0, r0, #1
   d4396:	7018      	strb	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4398:	f000 fc48 	bl	d4c2c <spark_cloud_flag_connected>

  if(Particle.connected()) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d439c:	b160      	cbz	r0, d43b8 <setup+0xc4>
   d439e:	4b17      	ldr	r3, [pc, #92]	; (d43fc <setup+0x108>)
   d43a0:	4917      	ldr	r1, [pc, #92]	; (d4400 <setup+0x10c>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d43a2:	781b      	ldrb	r3, [r3, #0]
   d43a4:	2200      	movs	r2, #0
   d43a6:	f88d 2000 	strb.w	r2, [sp]
   d43aa:	a802      	add	r0, sp, #8
   d43ac:	462a      	mov	r2, r5
   d43ae:	f7ff fe8f 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43b2:	a803      	add	r0, sp, #12
   d43b4:	f7ff ff88 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43b8:	f000 fa8a 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>

  stayAwakeTimeStamp = millis();                                        // Time stamp to keep us from going to sleep too early
   d43bc:	4b11      	ldr	r3, [pc, #68]	; (d4404 <setup+0x110>)
   d43be:	6018      	str	r0, [r3, #0]
}
   d43c0:	b014      	add	sp, #80	; 0x50
   d43c2:	bd70      	pop	{r4, r5, r6, pc}
   d43c4:	000d7678 	.word	0x000d7678
   d43c8:	2003e30c 	.word	0x2003e30c
   d43cc:	2003e328 	.word	0x2003e328
   d43d0:	2003e2f0 	.word	0x2003e2f0
   d43d4:	000d76ce 	.word	0x000d76ce
   d43d8:	2003e224 	.word	0x2003e224
   d43dc:	000d76db 	.word	0x000d76db
   d43e0:	000d76e3 	.word	0x000d76e3
   d43e4:	000d40b5 	.word	0x000d40b5
   d43e8:	000d4f13 	.word	0x000d4f13
   d43ec:	000d76ef 	.word	0x000d76ef
   d43f0:	000d4661 	.word	0x000d4661
   d43f4:	2003e314 	.word	0x2003e314
   d43f8:	2003e31d 	.word	0x2003e31d
   d43fc:	2003e31c 	.word	0x2003e31c
   d4400:	000d76fc 	.word	0x000d76fc
   d4404:	2003e310 	.word	0x2003e310

000d4408 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()                                                        // Simple publish for this example - would be a Particle Webhook in real use
{
   d4408:	b510      	push	{r4, lr}
  char data[64];                                                        // Store the date in this character array - not global
  waitUntil(meterParticlePublish);
  snprintf(data, sizeof(data), "The average SoilMoisture is %4.0f%% with %i samples", myRA.getAverage(), myRA.getCount());
   d440a:	4c14      	ldr	r4, [pc, #80]	; (d445c <_Z9sendEventv+0x54>)
    break;
  }
}

void sendEvent()                                                        // Simple publish for this example - would be a Particle Webhook in real use
{
   d440c:	b096      	sub	sp, #88	; 0x58
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d440e:	f7ff ff23 	bl	d4258 <_ZN11SystemClass18waitConditionWhileIZ9sendEventvEUlvE_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.23>
  char data[64];                                                        // Store the date in this character array - not global
  waitUntil(meterParticlePublish);
  snprintf(data, sizeof(data), "The average SoilMoisture is %4.0f%% with %i samples", myRA.getAverage(), myRA.getCount());
   d4412:	4620      	mov	r0, r4
   d4414:	f000 fa0f 	bl	d4836 <_ZN14RunningAverage10getAverageEv>
   d4418:	7863      	ldrb	r3, [r4, #1]
   d441a:	9302      	str	r3, [sp, #8]
   d441c:	ed8d 0b00 	vstr	d0, [sp]
   d4420:	4a0f      	ldr	r2, [pc, #60]	; (d4460 <_Z9sendEventv+0x58>)
   d4422:	2140      	movs	r1, #64	; 0x40
   d4424:	a806      	add	r0, sp, #24
   d4426:	f000 fc99 	bl	d4d5c <snprintf>
   d442a:	f000 fbff 	bl	d4c2c <spark_cloud_flag_connected>
  if(Particle.connected()) Particle.publish("Hourly Report", data, PRIVATE); // Publish hourly average
   d442e:	b160      	cbz	r0, d444a <_Z9sendEventv+0x42>
   d4430:	4b0c      	ldr	r3, [pc, #48]	; (d4464 <_Z9sendEventv+0x5c>)
   d4432:	490d      	ldr	r1, [pc, #52]	; (d4468 <_Z9sendEventv+0x60>)
   d4434:	781b      	ldrb	r3, [r3, #0]
   d4436:	2200      	movs	r2, #0
   d4438:	f88d 2000 	strb.w	r2, [sp]
   d443c:	a804      	add	r0, sp, #16
   d443e:	aa06      	add	r2, sp, #24
   d4440:	f7ff fe46 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
   d4444:	a805      	add	r0, sp, #20
   d4446:	f7ff ff3f 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  samples = 0;                                                          // Data received - clear the running average and start over for the next hour
   d444a:	4b08      	ldr	r3, [pc, #32]	; (d446c <_Z9sendEventv+0x64>)
  myRA.clear();
   d444c:	4803      	ldr	r0, [pc, #12]	; (d445c <_Z9sendEventv+0x54>)
{
  char data[64];                                                        // Store the date in this character array - not global
  waitUntil(meterParticlePublish);
  snprintf(data, sizeof(data), "The average SoilMoisture is %4.0f%% with %i samples", myRA.getAverage(), myRA.getCount());
  if(Particle.connected()) Particle.publish("Hourly Report", data, PRIVATE); // Publish hourly average
  samples = 0;                                                          // Data received - clear the running average and start over for the next hour
   d444e:	2200      	movs	r2, #0
   d4450:	601a      	str	r2, [r3, #0]
  myRA.clear();
   d4452:	f000 f999 	bl	d4788 <_ZN14RunningAverage5clearEv>
}
   d4456:	b016      	add	sp, #88	; 0x58
   d4458:	bd10      	pop	{r4, pc}
   d445a:	bf00      	nop
   d445c:	2003e328 	.word	0x2003e328
   d4460:	000d7704 	.word	0x000d7704
   d4464:	2003e31c 	.word	0x2003e31c
   d4468:	000d7738 	.word	0x000d7738
   d446c:	2003e340 	.word	0x2003e340

000d4470 <loop>:

  stayAwakeTimeStamp = millis();                                        // Time stamp to keep us from going to sleep too early
}

void loop()
{
   d4470:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d4472:	4c6c      	ldr	r4, [pc, #432]	; (d4624 <loop+0x1b4>)
   d4474:	7823      	ldrb	r3, [r4, #0]
   d4476:	3b01      	subs	r3, #1

  stayAwakeTimeStamp = millis();                                        // Time stamp to keep us from going to sleep too early
}

void loop()
{
   d4478:	b09b      	sub	sp, #108	; 0x6c
  switch(state) {
   d447a:	2b05      	cmp	r3, #5
   d447c:	f200 80d0 	bhi.w	d4620 <loop+0x1b0>
   d4480:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4484:	000600ab 	.word	0x000600ab
   d4488:	0054001c 	.word	0x0054001c
   d448c:	006c00ce 	.word	0x006c00ce
  case IDLE_STATE:
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) >= stayAwake) state = SLEEPING_STATE;
   d4490:	4b65      	ldr	r3, [pc, #404]	; (d4628 <loop+0x1b8>)
   d4492:	781b      	ldrb	r3, [r3, #0]
   d4494:	b14b      	cbz	r3, d44aa <loop+0x3a>
   d4496:	f000 fa1b 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
   d449a:	4b64      	ldr	r3, [pc, #400]	; (d462c <loop+0x1bc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	1ac0      	subs	r0, r0, r3
   d44a0:	4b63      	ldr	r3, [pc, #396]	; (d4630 <loop+0x1c0>)
   d44a2:	681b      	ldr	r3, [r3, #0]
   d44a4:	4298      	cmp	r0, r3
   d44a6:	f080 80b8 	bcs.w	d461a <loop+0x1aa>
    if (Time.minute() != currentMinutePeriod) state = MEASURING_STATE; 
   d44aa:	f001 fc2d 	bl	d5d08 <_ZN9TimeClass6minuteEv>
   d44ae:	4b61      	ldr	r3, [pc, #388]	; (d4634 <loop+0x1c4>)
   d44b0:	781b      	ldrb	r3, [r3, #0]
   d44b2:	4298      	cmp	r0, r3
   d44b4:	f000 80b4 	beq.w	d4620 <loop+0x1b0>
   d44b8:	2303      	movs	r3, #3
   d44ba:	e04b      	b.n	d4554 <loop+0xe4>
    break;

  case MEASURING_STATE: {
    takeMeasurements();                                                 // Take samples from sensors
   d44bc:	f7ff fe16 	bl	d40ec <_Z16takeMeasurementsv>

    if (Time.minute() == 0) state = REPORTING_STATE;
   d44c0:	f001 fc22 	bl	d5d08 <_ZN9TimeClass6minuteEv>
   d44c4:	b908      	cbnz	r0, d44ca <loop+0x5a>
   d44c6:	2304      	movs	r3, #4
   d44c8:	e000      	b.n	d44cc <loop+0x5c>
    else state = IDLE_STATE;
   d44ca:	2302      	movs	r3, #2
   d44cc:	7023      	strb	r3, [r4, #0]
   d44ce:	f000 fbad 	bl	d4c2c <spark_cloud_flag_connected>

    if (Particle.connected()) {
   d44d2:	2800      	cmp	r0, #0
   d44d4:	f000 80a4 	beq.w	d4620 <loop+0x1b0>
   d44d8:	f7ff febe 	bl	d4258 <_ZN11SystemClass18waitConditionWhileIZ9sendEventvEUlvE_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.23>
      char data[64];                                                      // Store the date in this character array - not global
      waitUntil(meterParticlePublish);
      snprintf(data, sizeof(data), "Sample %4.0f%%, Average %4.0f%% with %i samples", soilMoisture, myRA.getAverage(), myRA.getCount());
   d44dc:	4b56      	ldr	r3, [pc, #344]	; (d4638 <loop+0x1c8>)
   d44de:	4c57      	ldr	r4, [pc, #348]	; (d463c <loop+0x1cc>)
   d44e0:	6818      	ldr	r0, [r3, #0]
   d44e2:	f002 f8f9 	bl	d66d8 <__aeabi_f2d>
   d44e6:	4606      	mov	r6, r0
   d44e8:	4620      	mov	r0, r4
   d44ea:	460f      	mov	r7, r1
   d44ec:	f000 f9a3 	bl	d4836 <_ZN14RunningAverage10getAverageEv>
   d44f0:	7863      	ldrb	r3, [r4, #1]
   d44f2:	9304      	str	r3, [sp, #16]
   d44f4:	ed8d 0b02 	vstr	d0, [sp, #8]
   d44f8:	4a51      	ldr	r2, [pc, #324]	; (d4640 <loop+0x1d0>)
   d44fa:	2140      	movs	r1, #64	; 0x40
   d44fc:	e9cd 6700 	strd	r6, r7, [sp]
   d4500:	a80a      	add	r0, sp, #40	; 0x28
   d4502:	f000 fc2b 	bl	d4d5c <snprintf>
   d4506:	f000 fb91 	bl	d4c2c <spark_cloud_flag_connected>
      if(Particle.connected()) Particle.publish("Minute Sample", data, PRIVATE); // Publish hourly average
   d450a:	2800      	cmp	r0, #0
   d450c:	f000 8088 	beq.w	d4620 <loop+0x1b0>
   d4510:	4b4c      	ldr	r3, [pc, #304]	; (d4644 <loop+0x1d4>)
   d4512:	494d      	ldr	r1, [pc, #308]	; (d4648 <loop+0x1d8>)
   d4514:	781b      	ldrb	r3, [r3, #0]
   d4516:	2200      	movs	r2, #0
   d4518:	f88d 2000 	strb.w	r2, [sp]
   d451c:	a808      	add	r0, sp, #32
   d451e:	aa0a      	add	r2, sp, #40	; 0x28
   d4520:	f7ff fdd6 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
   d4524:	a809      	add	r0, sp, #36	; 0x24
   d4526:	f7ff fecf 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d452a:	e079      	b.n	d4620 <loop+0x1b0>
    }

    } break;

  case REPORTING_STATE:
    if (connectToParticle()) {
   d452c:	f7ff fe14 	bl	d4158 <_Z17connectToParticlev>
   d4530:	b190      	cbz	r0, d4558 <loop+0xe8>
      if (Time.hour() == 12) Particle.syncTime();                       // Set the clock each day at noon
   d4532:	f001 fbdf 	bl	d5cf4 <_ZN9TimeClass4hourEv>
   d4536:	280c      	cmp	r0, #12
   d4538:	d105      	bne.n	d4546 <loop+0xd6>
   d453a:	f000 fb77 	bl	d4c2c <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d453e:	b110      	cbz	r0, d4546 <loop+0xd6>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4540:	2000      	movs	r0, #0
   d4542:	f000 fb83 	bl	d4c4c <spark_sync_time>
      sendEvent();                                                      // Send data via Webhook or other Method  
   d4546:	f7ff ff5f 	bl	d4408 <_Z9sendEventv>
      stayAwake = stayAwakeLong;
   d454a:	4b39      	ldr	r3, [pc, #228]	; (d4630 <loop+0x1c0>)
   d454c:	f246 12a8 	movw	r2, #25000	; 0x61a8
   d4550:	601a      	str	r2, [r3, #0]
      state = IDLE_STATE;                                               // Done sampling - back to idle
   d4552:	2302      	movs	r3, #2
   d4554:	7023      	strb	r3, [r4, #0]
   d4556:	e063      	b.n	d4620 <loop+0x1b0>
    }
    else state = ERROR_STATE;
   d4558:	2301      	movs	r3, #1
   d455a:	e7fb      	b.n	d4554 <loop+0xe4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d455c:	f000 fb66 	bl	d4c2c <spark_cloud_flag_connected>
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (Particle.connected()) {
   d4560:	b1a0      	cbz	r0, d458c <loop+0x11c>
   d4562:	f7ff fe79 	bl	d4258 <_ZN11SystemClass18waitConditionWhileIZ9sendEventvEUlvE_ZNS_13waitConditionIS1_EEbT_EUlvE_EEbS3_T0_.isra.23>
   d4566:	4b37      	ldr	r3, [pc, #220]	; (d4644 <loop+0x1d4>)
      waitUntil(meterParticlePublish);
      Particle.publish("State","Going to Sleep",PRIVATE);
   d4568:	4938      	ldr	r1, [pc, #224]	; (d464c <loop+0x1dc>)
   d456a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d456c:	2200      	movs	r2, #0
   d456e:	f88d 2000 	strb.w	r2, [sp]
   d4572:	a80a      	add	r0, sp, #40	; 0x28
   d4574:	4a36      	ldr	r2, [pc, #216]	; (d4650 <loop+0x1e0>)
   d4576:	f7ff fdab 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
   d457a:	a80b      	add	r0, sp, #44	; 0x2c
   d457c:	f7ff fea4 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(1000);                                                      // So the message gets out before disconnecting
   d4580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4584:	f000 fc02 	bl	d4d8c <delay>
      disconnectFromParticle();                                         // If connected, we need to disconned and power down the modem
   d4588:	f7ff fe42 	bl	d4210 <_Z22disconnectFromParticlev>
    }
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
   d458c:	2100      	movs	r1, #0
   d458e:	2007      	movs	r0, #7
   d4590:	f001 fd7d 	bl	d608e <digitalWrite>
    stayAwake = stayAwakeShort;                                         // Go to sleep quickly.
   d4594:	4b26      	ldr	r3, [pc, #152]	; (d4630 <loop+0x1c0>)
   d4596:	2264      	movs	r2, #100	; 0x64
   d4598:	601a      	str	r2, [r3, #0]
    // Off to bed till the next minute period
    System.sleep(D6,RISING,60 - Time.second());                         // Wake in time for next minute reading.  Pin is just a placeholder - only wake on time in this example
   d459a:	f001 fbbf 	bl	d5d1c <_ZN9TimeClass6secondEv>
   d459e:	4b2d      	ldr	r3, [pc, #180]	; (d4654 <loop+0x1e4>)
   d45a0:	681a      	ldr	r2, [r3, #0]
   d45a2:	2306      	movs	r3, #6
   d45a4:	f8ad 3020 	strh.w	r3, [sp, #32]
   d45a8:	ab1a      	add	r3, sp, #104	; 0x68
   d45aa:	2501      	movs	r5, #1
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d45ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d45b0:	f803 5d49 	strb.w	r5, [r3, #-73]!
   d45b4:	a908      	add	r1, sp, #32
   d45b6:	9202      	str	r2, [sp, #8]
   d45b8:	9001      	str	r0, [sp, #4]
   d45ba:	462a      	mov	r2, r5
   d45bc:	a80a      	add	r0, sp, #40	; 0x28
   d45be:	9500      	str	r5, [sp, #0]
   d45c0:	f001 fafe 	bl	d5bc0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    // Once we wake back up - do these things
    state = IDLE_STATE;                                                 // need to go back to idle immediately after wakup
   d45c4:	2302      	movs	r3, #2
    digitalWrite(blueLED,HIGH);
   d45c6:	4629      	mov	r1, r5
   d45c8:	2007      	movs	r0, #7
    digitalWrite(blueLED,LOW);                                          // Turn off the LED
    stayAwake = stayAwakeShort;                                         // Go to sleep quickly.
    // Off to bed till the next minute period
    System.sleep(D6,RISING,60 - Time.second());                         // Wake in time for next minute reading.  Pin is just a placeholder - only wake on time in this example
    // Once we wake back up - do these things
    state = IDLE_STATE;                                                 // need to go back to idle immediately after wakup
   d45ca:	7023      	strb	r3, [r4, #0]
    digitalWrite(blueLED,HIGH);
   d45cc:	f001 fd5f 	bl	d608e <digitalWrite>
   d45d0:	f000 f97e 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
    stayAwakeTimeStamp = millis();                                      // Time stamp to keep us from going to sleep too early
   d45d4:	4b15      	ldr	r3, [pc, #84]	; (d462c <loop+0x1bc>)
   d45d6:	6018      	str	r0, [r3, #0]
    } break;
   d45d8:	e022      	b.n	d4620 <loop+0x1b0>
   d45da:	f000 f979 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>

  case ERROR_STATE:                                                     // Can be more complex - where we deal with errors
     if (millis() > resetTimeStamp + resetWait) {
   d45de:	4b1e      	ldr	r3, [pc, #120]	; (d4658 <loop+0x1e8>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d45e6:	3330      	adds	r3, #48	; 0x30
   d45e8:	4298      	cmp	r0, r3
   d45ea:	d919      	bls.n	d4620 <loop+0x1b0>
   d45ec:	f000 fb1e 	bl	d4c2c <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d45f0:	b160      	cbz	r0, d460c <loop+0x19c>
   d45f2:	4b14      	ldr	r3, [pc, #80]	; (d4644 <loop+0x1d4>)
   d45f4:	4915      	ldr	r1, [pc, #84]	; (d464c <loop+0x1dc>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d45f6:	781b      	ldrb	r3, [r3, #0]
   d45f8:	2200      	movs	r2, #0
   d45fa:	f88d 2000 	strb.w	r2, [sp]
   d45fe:	a80a      	add	r0, sp, #40	; 0x28
   d4600:	4a16      	ldr	r2, [pc, #88]	; (d465c <loop+0x1ec>)
   d4602:	f7ff fd65 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
   d4606:	a80b      	add	r0, sp, #44	; 0x2c
   d4608:	f7ff fe5e 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d460c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4610:	f000 fbbc 	bl	d4d8c <delay>
      fullModemReset();                                                 // Full Modem reset and reboot
   d4614:	f7ff fe2c 	bl	d4270 <_Z14fullModemResetv>
    }
    break;
  }
}
   d4618:	e002      	b.n	d4620 <loop+0x1b0>

void loop()
{
  switch(state) {
  case IDLE_STATE:
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) >= stayAwake) state = SLEEPING_STATE;
   d461a:	2306      	movs	r3, #6
   d461c:	7023      	strb	r3, [r4, #0]
   d461e:	e744      	b.n	d44aa <loop+0x3a>
      delay(2000);
      fullModemReset();                                                 // Full Modem reset and reboot
    }
    break;
  }
}
   d4620:	b01b      	add	sp, #108	; 0x6c
   d4622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4624:	2003e30c 	.word	0x2003e30c
   d4628:	2003e2f0 	.word	0x2003e2f0
   d462c:	2003e310 	.word	0x2003e310
   d4630:	2003e228 	.word	0x2003e228
   d4634:	2003e314 	.word	0x2003e314
   d4638:	2003e320 	.word	0x2003e320
   d463c:	2003e328 	.word	0x2003e328
   d4640:	000d7746 	.word	0x000d7746
   d4644:	2003e31c 	.word	0x2003e31c
   d4648:	000d7776 	.word	0x000d7776
   d464c:	000d7793 	.word	0x000d7793
   d4650:	000d7784 	.word	0x000d7784
   d4654:	2003e318 	.word	0x2003e318
   d4658:	2003e308 	.word	0x2003e308
   d465c:	000d7799 	.word	0x000d7799

000d4660 <_Z15setLowPowerMode6String>:
  }
  else return 0;
}

int setLowPowerMode(String command)                                     // This is where we can put the device into low power mode if needed
{
   d4660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4662:	4926      	ldr	r1, [pc, #152]	; (d46fc <_Z15setLowPowerMode6String+0x9c>)
   d4664:	4605      	mov	r5, r0
   d4666:	f001 fa68 	bl	d5b3a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                       // Before we begin, let's make sure we have a valid input
   d466a:	b928      	cbnz	r0, d4678 <_Z15setLowPowerMode6String+0x18>
   d466c:	4924      	ldr	r1, [pc, #144]	; (d4700 <_Z15setLowPowerMode6String+0xa0>)
   d466e:	4628      	mov	r0, r5
   d4670:	f001 fa63 	bl	d5b3a <_ZNK6String6equalsEPKc>
   d4674:	2800      	cmp	r0, #0
   d4676:	d03f      	beq.n	d46f8 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(0);
   d4678:	f001 fd22 	bl	d60c0 <_Z21__fetch_global_EEPROMv>
   d467c:	2000      	movs	r0, #0
   d467e:	f000 f93f 	bl	d4900 <HAL_EEPROM_Read>
   d4682:	4c20      	ldr	r4, [pc, #128]	; (d4704 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4684:	491d      	ldr	r1, [pc, #116]	; (d46fc <_Z15setLowPowerMode6String+0x9c>)
   d4686:	7020      	strb	r0, [r4, #0]
   d4688:	4628      	mov	r0, r5
   d468a:	f001 fa56 	bl	d5b3a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                   // Command calls for setting lowPowerMode
   d468e:	4606      	mov	r6, r0
   d4690:	b1a0      	cbz	r0, d46bc <_Z15setLowPowerMode6String+0x5c>
   d4692:	4b1d      	ldr	r3, [pc, #116]	; (d4708 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
   d4694:	491d      	ldr	r1, [pc, #116]	; (d470c <_Z15setLowPowerMode6String+0xac>)
   d4696:	781b      	ldrb	r3, [r3, #0]
   d4698:	2200      	movs	r2, #0
   d469a:	f88d 2000 	strb.w	r2, [sp]
   d469e:	a802      	add	r0, sp, #8
   d46a0:	4a1b      	ldr	r2, [pc, #108]	; (d4710 <_Z15setLowPowerMode6String+0xb0>)
   d46a2:	f7ff fd15 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
   d46a6:	a803      	add	r0, sp, #12
   d46a8:	f7ff fe0e 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                   // If so, flip the lowPowerMode bit
   d46ac:	7823      	ldrb	r3, [r4, #0]
   d46ae:	f043 0301 	orr.w	r3, r3, #1
   d46b2:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
   d46b4:	4b17      	ldr	r3, [pc, #92]	; (d4714 <_Z15setLowPowerMode6String+0xb4>)
   d46b6:	2201      	movs	r2, #1
   d46b8:	701a      	strb	r2, [r3, #0]
   d46ba:	e016      	b.n	d46ea <_Z15setLowPowerMode6String+0x8a>
   d46bc:	4910      	ldr	r1, [pc, #64]	; (d4700 <_Z15setLowPowerMode6String+0xa0>)
   d46be:	4628      	mov	r0, r5
   d46c0:	f001 fa3b 	bl	d5b3a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                              // Command calls for clearing lowPowerMode
   d46c4:	b188      	cbz	r0, d46ea <_Z15setLowPowerMode6String+0x8a>
   d46c6:	4b10      	ldr	r3, [pc, #64]	; (d4708 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
   d46c8:	4a13      	ldr	r2, [pc, #76]	; (d4718 <_Z15setLowPowerMode6String+0xb8>)
   d46ca:	781b      	ldrb	r3, [r3, #0]
   d46cc:	490f      	ldr	r1, [pc, #60]	; (d470c <_Z15setLowPowerMode6String+0xac>)
   d46ce:	f88d 6000 	strb.w	r6, [sp]
   d46d2:	a802      	add	r0, sp, #8
   d46d4:	f7ff fcfc 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28.constprop.31>
   d46d8:	a803      	add	r0, sp, #12
   d46da:	f7ff fdf5 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                    // If so, flip the lowPowerMode bit
   d46de:	7823      	ldrb	r3, [r4, #0]
   d46e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   d46e4:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
   d46e6:	4b0b      	ldr	r3, [pc, #44]	; (d4714 <_Z15setLowPowerMode6String+0xb4>)
   d46e8:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(0,controlRegister);           // Write it to the register
   d46ea:	f001 fce9 	bl	d60c0 <_Z21__fetch_global_EEPROMv>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d46ee:	2000      	movs	r0, #0
   d46f0:	7821      	ldrb	r1, [r4, #0]
   d46f2:	f000 f90d 	bl	d4910 <HAL_EEPROM_Write>
   d46f6:	2001      	movs	r0, #1
  return 1;
}
   d46f8:	b004      	add	sp, #16
   d46fa:	bd70      	pop	{r4, r5, r6, pc}
   d46fc:	000d7914 	.word	0x000d7914
   d4700:	000d77fb 	.word	0x000d77fb
   d4704:	2003e31d 	.word	0x2003e31d
   d4708:	2003e31c 	.word	0x2003e31c
   d470c:	000d76f7 	.word	0x000d76f7
   d4710:	000d77ad 	.word	0x000d77ad
   d4714:	2003e2f0 	.word	0x2003e2f0
   d4718:	000d77b7 	.word	0x000d77b7

000d471c <_GLOBAL__sub_I_SystemMode>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d471c:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d471e:	4b10      	ldr	r3, [pc, #64]	; (d4760 <_GLOBAL__sub_I_SystemMode+0x44>)
   d4720:	2400      	movs	r4, #0
   d4722:	601c      	str	r4, [r3, #0]
   d4724:	4b0f      	ldr	r3, [pc, #60]	; (d4764 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4726:	2501      	movs	r5, #1
   d4728:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d472a:	f000 f909 	bl	d4940 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d472e:	4b0e      	ldr	r3, [pc, #56]	; (d4768 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d4730:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4734:	701c      	strb	r4, [r3, #0]
   d4736:	805c      	strh	r4, [r3, #2]
   d4738:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d473a:	2002      	movs	r0, #2
   d473c:	f000 f9f8 	bl	d4b30 <set_system_mode>

#define SOFTWARERELEASENUMBER "1.00"               // Keep track of release numbers

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4740:	4621      	mov	r1, r4
#include "RunningAverage.h"

// Add libraries for sensors here

// Initalize library objects here
RunningAverage myRA(60);
   d4742:	4c0a      	ldr	r4, [pc, #40]	; (d476c <_GLOBAL__sub_I_SystemMode+0x50>)

#define SOFTWARERELEASENUMBER "1.00"               // Keep track of release numbers

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4744:	4628      	mov	r0, r5
   d4746:	f000 fa0b 	bl	d4b60 <system_thread_set_state>
#include "RunningAverage.h"

// Add libraries for sensors here

// Initalize library objects here
RunningAverage myRA(60);
   d474a:	213c      	movs	r1, #60	; 0x3c
   d474c:	4620      	mov	r0, r4
   d474e:	f000 f830 	bl	d47b2 <_ZN14RunningAverageC1Eh>
   d4752:	4620      	mov	r0, r4
   d4754:	4a06      	ldr	r2, [pc, #24]	; (d4770 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4756:	4907      	ldr	r1, [pc, #28]	; (d4774 <_GLOBAL__sub_I_SystemMode+0x58>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d4758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#include "RunningAverage.h"

// Add libraries for sensors here

// Initalize library objects here
RunningAverage myRA(60);
   d475c:	f001 bd06 	b.w	d616c <__aeabi_atexit>
   d4760:	2003e318 	.word	0x2003e318
   d4764:	2003e31c 	.word	0x2003e31c
   d4768:	2003e302 	.word	0x2003e302
   d476c:	2003e328 	.word	0x2003e328
   d4770:	2003e2e8 	.word	0x2003e2e8
   d4774:	000d4779 	.word	0x000d4779

000d4778 <_ZN14RunningAverageD1Ev>:
    _ar = (double*) malloc(_size * sizeof(double));
    if (_ar == NULL) _size = 0;
    clear();
}

RunningAverage::~RunningAverage()
   d4778:	b510      	push	{r4, lr}
   d477a:	4604      	mov	r4, r0
{
    if (_ar != NULL) free(_ar);
   d477c:	6900      	ldr	r0, [r0, #16]
   d477e:	b108      	cbz	r0, d4784 <_ZN14RunningAverageD1Ev+0xc>
   d4780:	f000 fad4 	bl	d4d2c <free>
}
   d4784:	4620      	mov	r0, r4
   d4786:	bd10      	pop	{r4, pc}

000d4788 <_ZN14RunningAverage5clearEv>:

// resets all counters
void RunningAverage::clear()
{
   d4788:	b530      	push	{r4, r5, lr}
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
   d478a:	2400      	movs	r4, #0
   d478c:	2500      	movs	r5, #0
   d478e:	e9c0 4502 	strd	r4, r5, [r0, #8]
}

// resets all counters
void RunningAverage::clear()
{
    _cnt = 0;
   d4792:	2300      	movs	r3, #0
   d4794:	7043      	strb	r3, [r0, #1]
    _idx = 0;
   d4796:	7083      	strb	r3, [r0, #2]
    _sum = 0.0;
    for (uint8_t i = 0; i< _size; i++)
   d4798:	7802      	ldrb	r2, [r0, #0]
   d479a:	1c59      	adds	r1, r3, #1
   d479c:	b2db      	uxtb	r3, r3
   d479e:	429a      	cmp	r2, r3
   d47a0:	d906      	bls.n	d47b0 <_ZN14RunningAverage5clearEv+0x28>
    {
        _ar[i] = 0.0; // keeps addValue simple
   d47a2:	6902      	ldr	r2, [r0, #16]
   d47a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   d47a8:	e9c3 4500 	strd	r4, r5, [r3]
void RunningAverage::clear()
{
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
    for (uint8_t i = 0; i< _size; i++)
   d47ac:	460b      	mov	r3, r1
   d47ae:	e7f3      	b.n	d4798 <_ZN14RunningAverage5clearEv+0x10>
   d47b0:	bd30      	pop	{r4, r5, pc}

000d47b2 <_ZN14RunningAverageC1Eh>:
//

#include "RunningAverage.h"
#include <stdlib.h>

RunningAverage::RunningAverage(uint8_t size)
   d47b2:	b510      	push	{r4, lr}
   d47b4:	4604      	mov	r4, r0
{
    _size = size;
   d47b6:	7001      	strb	r1, [r0, #0]
    _ar = (double*) malloc(_size * sizeof(double));
   d47b8:	00c8      	lsls	r0, r1, #3
   d47ba:	f000 faaf 	bl	d4d1c <malloc>
   d47be:	6120      	str	r0, [r4, #16]
    if (_ar == NULL) _size = 0;
   d47c0:	b900      	cbnz	r0, d47c4 <_ZN14RunningAverageC1Eh+0x12>
   d47c2:	7020      	strb	r0, [r4, #0]
    clear();
   d47c4:	4620      	mov	r0, r4
   d47c6:	f7ff ffdf 	bl	d4788 <_ZN14RunningAverage5clearEv>
}
   d47ca:	4620      	mov	r0, r4
   d47cc:	bd10      	pop	{r4, pc}

000d47ce <_ZN14RunningAverage8addValueEd>:
    }
}

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
   d47ce:	b538      	push	{r3, r4, r5, lr}
   d47d0:	ed2d 8b02 	vpush	{d8}
   d47d4:	eeb0 8a40 	vmov.f32	s16, s0
   d47d8:	eef0 8a60 	vmov.f32	s17, s1
    if (_ar == NULL) return;
   d47dc:	6903      	ldr	r3, [r0, #16]
    }
}

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
   d47de:	4604      	mov	r4, r0
    if (_ar == NULL) return;
   d47e0:	b333      	cbz	r3, d4830 <_ZN14RunningAverage8addValueEd+0x62>
    _sum -= _ar[_idx];
   d47e2:	7885      	ldrb	r5, [r0, #2]
   d47e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   d47e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   d47ec:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   d47f0:	f001 fe12 	bl	d6418 <__aeabi_dsub>
   d47f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _ar[_idx] = value;
   d47f8:	ed85 8b00 	vstr	d8, [r5]
    _sum += _ar[_idx];
   d47fc:	78a5      	ldrb	r5, [r4, #2]
   d47fe:	6923      	ldr	r3, [r4, #16]
   d4800:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   d4804:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4808:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d480c:	f001 fe06 	bl	d641c <__adddf3>
    _idx++;
   d4810:	3501      	adds	r5, #1
    if (_idx == _size) _idx = 0;  // faster than %
   d4812:	7822      	ldrb	r2, [r4, #0]
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
    _idx++;
   d4814:	b2ed      	uxtb	r5, r5
    if (_idx == _size) _idx = 0;  // faster than %
   d4816:	4295      	cmp	r5, r2
   d4818:	bf08      	it	eq
   d481a:	2300      	moveq	r3, #0
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
    _idx++;
   d481c:	70a5      	strb	r5, [r4, #2]
    if (_idx == _size) _idx = 0;  // faster than %
   d481e:	bf08      	it	eq
   d4820:	70a3      	strbeq	r3, [r4, #2]
    if (_cnt < _size) _cnt++;
   d4822:	7863      	ldrb	r3, [r4, #1]
void RunningAverage::addValue(double value)
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
   d4824:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _idx++;
    if (_idx == _size) _idx = 0;  // faster than %
    if (_cnt < _size) _cnt++;
   d4828:	429a      	cmp	r2, r3
   d482a:	bf84      	itt	hi
   d482c:	3301      	addhi	r3, #1
   d482e:	7063      	strbhi	r3, [r4, #1]
}
   d4830:	ecbd 8b02 	vpop	{d8}
   d4834:	bd38      	pop	{r3, r4, r5, pc}

000d4836 <_ZN14RunningAverage10getAverageEv>:

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
   d4836:	b510      	push	{r4, lr}
   d4838:	4604      	mov	r4, r0
    if (_cnt == 0) return 0;
   d483a:	7840      	ldrb	r0, [r0, #1]
   d483c:	b140      	cbz	r0, d4850 <_ZN14RunningAverage10getAverageEv+0x1a>
    return _sum / _cnt;
   d483e:	f001 ff39 	bl	d66b4 <__aeabi_i2d>
   d4842:	4602      	mov	r2, r0
   d4844:	460b      	mov	r3, r1
   d4846:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d484a:	f002 f8c3 	bl	d69d4 <__aeabi_ddiv>
   d484e:	e001      	b.n	d4854 <_ZN14RunningAverage10getAverageEv+0x1e>
}

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
    if (_cnt == 0) return 0;
   d4850:	2000      	movs	r0, #0
   d4852:	2100      	movs	r1, #0
    return _sum / _cnt;
}
   d4854:	ec41 0b10 	vmov	d0, r0, r1
   d4858:	bd10      	pop	{r4, pc}

000d485a <_GLOBAL__sub_I__ZN14RunningAverageC2Eh>:
   d485a:	f000 b871 	b.w	d4940 <HAL_Pin_Map>
	...

000d4860 <cellular_command>:
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <cellular_command+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030274 	.word	0x00030274

000d4870 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <os_thread_is_current+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	689b      	ldr	r3, [r3, #8]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030248 	.word	0x00030248

000d4880 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <os_thread_join+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	691b      	ldr	r3, [r3, #16]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030248 	.word	0x00030248

000d4890 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <os_thread_cleanup+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	695b      	ldr	r3, [r3, #20]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030248 	.word	0x00030248

000d48a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <os_mutex_create+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030248 	.word	0x00030248

000d48b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <os_mutex_recursive_create+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030248 	.word	0x00030248

000d48c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_RNG_GetRandomNumber+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	685b      	ldr	r3, [r3, #4]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030218 	.word	0x00030218

000d48d0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	695b      	ldr	r3, [r3, #20]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030218 	.word	0x00030218

000d48e0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <HAL_RTC_Get_UnixTime+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	69db      	ldr	r3, [r3, #28]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030218 	.word	0x00030218

000d48f0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_EEPROM_Init+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030218 	.word	0x00030218

000d4900 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_EEPROM_Read+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_EEPROM_Write+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_RTC_Time_Is_Valid+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030218 	.word	0x00030218

000d4930 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <hal_timer_millis+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030218 	.word	0x00030218

000d4940 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_Pin_Map+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	681b      	ldr	r3, [r3, #0]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	0003022c 	.word	0x0003022c

000d4950 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_Pin_Mode+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	689b      	ldr	r3, [r3, #8]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	0003022c 	.word	0x0003022c

000d4960 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <HAL_Get_Pin_Mode+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	68db      	ldr	r3, [r3, #12]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	0003022c 	.word	0x0003022c

000d4970 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <HAL_GPIO_Write+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	691b      	ldr	r3, [r3, #16]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	0003022c 	.word	0x0003022c

000d4980 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_I2C_Write_Data+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a1b      	ldr	r3, [r3, #32]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030228 	.word	0x00030228

000d4990 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_I2C_Available_Data+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030228 	.word	0x00030228

000d49a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_I2C_Read_Data+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030228 	.word	0x00030228

000d49b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_I2C_Peek_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030228 	.word	0x00030228

000d49c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_I2C_Flush_Data+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030228 	.word	0x00030228

000d49d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_I2C_Is_Enabled+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030228 	.word	0x00030228

000d49e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <HAL_I2C_Init+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030228 	.word	0x00030228

000d49f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <inet_inet_ntop+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	695b      	ldr	r3, [r3, #20]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030264 	.word	0x00030264

000d4a00 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <netdb_freeaddrinfo+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	689b      	ldr	r3, [r3, #8]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030268 	.word	0x00030268

000d4a10 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <netdb_getaddrinfo+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	68db      	ldr	r3, [r3, #12]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030268 	.word	0x00030268

000d4a20 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <HAL_SPI_Init+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	69db      	ldr	r3, [r3, #28]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030230 	.word	0x00030230

000d4a30 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <HAL_SPI_Is_Enabled+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6a1b      	ldr	r3, [r3, #32]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030230 	.word	0x00030230

000d4a40 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_USART_Init+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	681b      	ldr	r3, [r3, #0]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	0003023c 	.word	0x0003023c

000d4a50 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_USART_Write_Data+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	68db      	ldr	r3, [r3, #12]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	0003023c 	.word	0x0003023c

000d4a60 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_USART_Available_Data+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	691b      	ldr	r3, [r3, #16]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003023c 	.word	0x0003023c

000d4a70 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USART_Read_Data+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	695b      	ldr	r3, [r3, #20]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003023c 	.word	0x0003023c

000d4a80 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USART_Peek_Data+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	699b      	ldr	r3, [r3, #24]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Flush_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	69db      	ldr	r3, [r3, #28]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Is_Enabled+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6a1b      	ldr	r3, [r3, #32]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USART_Available_Data_For_Write+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Init+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	681b      	ldr	r3, [r3, #0]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Available_Data+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	691b      	ldr	r3, [r3, #16]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	695b      	ldr	r3, [r3, #20]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USB_USART_Receive_Data+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	699b      	ldr	r3, [r3, #24]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003024c 	.word	0x0003024c

000d4b00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Send_Data+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	69db      	ldr	r3, [r3, #28]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_USB_USART_Flush_Data+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6a1b      	ldr	r3, [r3, #32]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003024c 	.word	0x0003024c

000d4b20 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <system_mode+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	681b      	ldr	r3, [r3, #0]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030220 	.word	0x00030220

000d4b30 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <set_system_mode+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	685b      	ldr	r3, [r3, #4]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030220 	.word	0x00030220

000d4b40 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <system_delay_ms+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	695b      	ldr	r3, [r3, #20]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030220 	.word	0x00030220

000d4b50 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <system_sleep+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	699b      	ldr	r3, [r3, #24]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030220 	.word	0x00030220

000d4b60 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <system_thread_set_state+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030220 	.word	0x00030220

000d4b70 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <application_thread_current+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030220 	.word	0x00030220

000d4b80 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <application_thread_invoke+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030220 	.word	0x00030220

000d4b90 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <system_thread_get_state+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030220 	.word	0x00030220

000d4ba0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b03      	ldr	r3, [pc, #12]	; (d4bb0 <system_ctrl_set_app_request_handler+0x10>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4baa:	9301      	str	r3, [sp, #4]
   d4bac:	bd08      	pop	{r3, pc}
   d4bae:	0000      	.short	0x0000
   d4bb0:	00030220 	.word	0x00030220

000d4bb4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b03      	ldr	r3, [pc, #12]	; (d4bc4 <system_ctrl_set_result+0x10>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bbe:	9301      	str	r3, [sp, #4]
   d4bc0:	bd08      	pop	{r3, pc}
   d4bc2:	0000      	.short	0x0000
   d4bc4:	00030220 	.word	0x00030220

000d4bc8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b03      	ldr	r3, [pc, #12]	; (d4bd8 <system_sleep_pins+0x10>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d4bd2:	9301      	str	r3, [sp, #4]
   d4bd4:	bd08      	pop	{r3, pc}
   d4bd6:	0000      	.short	0x0000
   d4bd8:	00030220 	.word	0x00030220

000d4bdc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <spark_variable+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	681b      	ldr	r3, [r3, #0]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030244 	.word	0x00030244

000d4bec <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <spark_function+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	685b      	ldr	r3, [r3, #4]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030244 	.word	0x00030244

000d4bfc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <spark_process+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	689b      	ldr	r3, [r3, #8]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030244 	.word	0x00030244

000d4c0c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <spark_cloud_flag_connect+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	68db      	ldr	r3, [r3, #12]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030244 	.word	0x00030244

000d4c1c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <spark_cloud_flag_disconnect+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	691b      	ldr	r3, [r3, #16]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030244 	.word	0x00030244

000d4c2c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <spark_cloud_flag_connected+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	695b      	ldr	r3, [r3, #20]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030244 	.word	0x00030244

000d4c3c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <spark_send_event+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6a1b      	ldr	r3, [r3, #32]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030244 	.word	0x00030244

000d4c4c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <spark_sync_time+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030244 	.word	0x00030244

000d4c5c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <spark_sync_time_pending+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030244 	.word	0x00030244

000d4c6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030244 	.word	0x00030244

000d4c7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_connect+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	685b      	ldr	r3, [r3, #4]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_connecting+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	689b      	ldr	r3, [r3, #8]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <network_disconnect+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	68db      	ldr	r3, [r3, #12]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030240 	.word	0x00030240

000d4cac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <network_ready+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	691b      	ldr	r3, [r3, #16]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030240 	.word	0x00030240

000d4cbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <network_on+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	695b      	ldr	r3, [r3, #20]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030240 	.word	0x00030240

000d4ccc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <network_off+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	699b      	ldr	r3, [r3, #24]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030240 	.word	0x00030240

000d4cdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <network_listen+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	69db      	ldr	r3, [r3, #28]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030240 	.word	0x00030240

000d4cec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_listening+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a1b      	ldr	r3, [r3, #32]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <network_set_listen_timeout+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030240 	.word	0x00030240

000d4d0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <network_get_listen_timeout+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030240 	.word	0x00030240

000d4d1c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <malloc+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	681b      	ldr	r3, [r3, #0]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003021c 	.word	0x0003021c

000d4d2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <free+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	685b      	ldr	r3, [r3, #4]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003021c 	.word	0x0003021c

000d4d3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <realloc+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	689b      	ldr	r3, [r3, #8]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003021c 	.word	0x0003021c

000d4d4c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <siscanf+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	699b      	ldr	r3, [r3, #24]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003021c 	.word	0x0003021c

000d4d5c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <snprintf+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	69db      	ldr	r3, [r3, #28]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003021c 	.word	0x0003021c

000d4d6c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <abort+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003021c 	.word	0x0003021c

000d4d7c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <_malloc_r+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003021c 	.word	0x0003021c

000d4d8c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d8c:	2100      	movs	r1, #0
   d4d8e:	f7ff bed7 	b.w	d4b40 <system_delay_ms>

000d4d92 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4d92:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d94:	6883      	ldr	r3, [r0, #8]
   d4d96:	4604      	mov	r4, r0
   d4d98:	b90b      	cbnz	r3, d4d9e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4d9a:	f001 f9ee 	bl	d617a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d9e:	68c3      	ldr	r3, [r0, #12]
   d4da0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4da2:	68a3      	ldr	r3, [r4, #8]
   d4da4:	b11b      	cbz	r3, d4dae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4da6:	2203      	movs	r2, #3
   d4da8:	4621      	mov	r1, r4
   d4daa:	4620      	mov	r0, r4
   d4dac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4dae:	4620      	mov	r0, r4
   d4db0:	2110      	movs	r1, #16
}
   d4db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4db6:	f001 b9de 	b.w	d6176 <_ZdlPvj>

000d4dba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4dba:	680b      	ldr	r3, [r1, #0]
   d4dbc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4dbe:	b113      	cbz	r3, d4dc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4dc0:	685a      	ldr	r2, [r3, #4]
   d4dc2:	3201      	adds	r2, #1
   d4dc4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4dc6:	4770      	bx	lr

000d4dc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4dc8:	4802      	ldr	r0, [pc, #8]	; (d4dd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4dca:	2300      	movs	r3, #0
   d4dcc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4dce:	f7ff bd6f 	b.w	d48b0 <os_mutex_recursive_create>
   d4dd2:	bf00      	nop
   d4dd4:	2003e344 	.word	0x2003e344

000d4dd8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4dd8:	2200      	movs	r2, #0
   d4dda:	4611      	mov	r1, r2
   d4ddc:	6840      	ldr	r0, [r0, #4]
   d4dde:	f7ff bf65 	b.w	d4cac <network_ready>

000d4de2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4de2:	2200      	movs	r2, #0
   d4de4:	4611      	mov	r1, r2
   d4de6:	6840      	ldr	r0, [r0, #4]
   d4de8:	f7ff bf80 	b.w	d4cec <network_listening>

000d4dec <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4dec:	2200      	movs	r2, #0
   d4dee:	4611      	mov	r1, r2
   d4df0:	6840      	ldr	r0, [r0, #4]
   d4df2:	f7ff bf8b 	b.w	d4d0c <network_get_listen_timeout>

000d4df6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4df6:	2200      	movs	r2, #0
   d4df8:	6840      	ldr	r0, [r0, #4]
   d4dfa:	f7ff bf7f 	b.w	d4cfc <network_set_listen_timeout>

000d4dfe <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dfe:	2200      	movs	r2, #0
   d4e00:	f081 0101 	eor.w	r1, r1, #1
   d4e04:	6840      	ldr	r0, [r0, #4]
   d4e06:	f7ff bf69 	b.w	d4cdc <network_listen>

000d4e0a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	461a      	mov	r2, r3
   d4e0e:	4619      	mov	r1, r3
   d4e10:	6840      	ldr	r0, [r0, #4]
   d4e12:	f7ff bf5b 	b.w	d4ccc <network_off>

000d4e16 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4e16:	2300      	movs	r3, #0
   d4e18:	461a      	mov	r2, r3
   d4e1a:	4619      	mov	r1, r3
   d4e1c:	6840      	ldr	r0, [r0, #4]
   d4e1e:	f7ff bf4d 	b.w	d4cbc <network_on>

000d4e22 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e22:	2200      	movs	r2, #0
   d4e24:	4611      	mov	r1, r2
   d4e26:	6840      	ldr	r0, [r0, #4]
   d4e28:	f7ff bf30 	b.w	d4c8c <network_connecting>

000d4e2c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e2c:	2200      	movs	r2, #0
   d4e2e:	2102      	movs	r1, #2
   d4e30:	6840      	ldr	r0, [r0, #4]
   d4e32:	f7ff bf33 	b.w	d4c9c <network_disconnect>

000d4e36 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e36:	2300      	movs	r3, #0
   d4e38:	461a      	mov	r2, r3
   d4e3a:	6840      	ldr	r0, [r0, #4]
   d4e3c:	f7ff bf1e 	b.w	d4c7c <network_connect>

000d4e40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4e40:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4e42:	4c08      	ldr	r4, [pc, #32]	; (d4e64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4e44:	2528      	movs	r5, #40	; 0x28
   d4e46:	462a      	mov	r2, r5
   d4e48:	2100      	movs	r1, #0
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	f001 ffbb 	bl	d6dc6 <memset>
        cid = -1;
   d4e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4e54:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e56:	4b04      	ldr	r3, [pc, #16]	; (d4e68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d4e58:	8025      	strh	r5, [r4, #0]
   d4e5a:	2204      	movs	r2, #4
   d4e5c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4e5e:	4a03      	ldr	r2, [pc, #12]	; (d4e6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4e60:	601a      	str	r2, [r3, #0]
   d4e62:	bd38      	pop	{r3, r4, r5, pc}
   d4e64:	2003e350 	.word	0x2003e350
   d4e68:	2003e348 	.word	0x2003e348
   d4e6c:	000d7808 	.word	0x000d7808

000d4e70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e70:	4770      	bx	lr

000d4e72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4e72:	2000      	movs	r0, #0
   d4e74:	4770      	bx	lr

000d4e76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e76:	b510      	push	{r4, lr}
   d4e78:	2110      	movs	r1, #16
   d4e7a:	4604      	mov	r4, r0
   d4e7c:	f001 f97b 	bl	d6176 <_ZdlPvj>
   d4e80:	4620      	mov	r0, r4
   d4e82:	bd10      	pop	{r4, pc}

000d4e84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4e84:	b508      	push	{r3, lr}
      { delete this; }
   d4e86:	b108      	cbz	r0, d4e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4e88:	f7ff fff5 	bl	d4e76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4e8c:	bd08      	pop	{r3, pc}

000d4e8e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e8e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e90:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e92:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e94:	b113      	cbz	r3, d4e9c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e96:	2203      	movs	r2, #3
   d4e98:	4601      	mov	r1, r0
   d4e9a:	4798      	blx	r3
    }
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	bd10      	pop	{r4, pc}

000d4ea0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ea0:	2200      	movs	r2, #0
   d4ea2:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4ea4:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ea6:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4eaa:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4eac:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4eb0:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eb2:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eb4:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4eb6:	680c      	ldr	r4, [r1, #0]
   d4eb8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eba:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4ebc:	bd10      	pop	{r4, pc}

000d4ebe <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4ebe:	b510      	push	{r4, lr}
   d4ec0:	4604      	mov	r4, r0
    free((void*)msg_);
   d4ec2:	6800      	ldr	r0, [r0, #0]
   d4ec4:	f7ff ff32 	bl	d4d2c <free>
}
   d4ec8:	4620      	mov	r0, r4
   d4eca:	bd10      	pop	{r4, pc}

000d4ecc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4ecc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4ece:	68c4      	ldr	r4, [r0, #12]
   d4ed0:	b1f4      	cbz	r4, d4f10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4ed2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ed4:	2b02      	cmp	r3, #2
   d4ed6:	d103      	bne.n	d4ee0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4ed8:	f104 000c 	add.w	r0, r4, #12
   d4edc:	f7ff ffef 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4ee0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4ee2:	b135      	cbz	r5, d4ef2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ee4:	4628      	mov	r0, r5
   d4ee6:	f7ff ffd2 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
   d4eea:	2110      	movs	r1, #16
   d4eec:	4628      	mov	r0, r5
   d4eee:	f001 f942 	bl	d6176 <_ZdlPvj>
   d4ef2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ef4:	b135      	cbz	r5, d4f04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	f7ff ffc9 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
   d4efc:	2110      	movs	r1, #16
   d4efe:	4628      	mov	r0, r5
   d4f00:	f001 f939 	bl	d6176 <_ZdlPvj>
   d4f04:	4620      	mov	r0, r4
   d4f06:	2114      	movs	r1, #20
   d4f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f0c:	f001 b933 	b.w	d6176 <_ZdlPvj>
   d4f10:	bd38      	pop	{r3, r4, r5, pc}

000d4f12 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4f12:	b510      	push	{r4, lr}
   d4f14:	b088      	sub	sp, #32
   d4f16:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4f18:	4668      	mov	r0, sp
   d4f1a:	f000 fde1 	bl	d5ae0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4f1e:	4669      	mov	r1, sp
   d4f20:	a804      	add	r0, sp, #16
   d4f22:	f000 fdff 	bl	d5b24 <_ZN6StringC1ERKS_>
   d4f26:	a804      	add	r0, sp, #16
   d4f28:	47a0      	blx	r4
   d4f2a:	4604      	mov	r4, r0
   d4f2c:	a804      	add	r0, sp, #16
   d4f2e:	f000 fd90 	bl	d5a52 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4f32:	4668      	mov	r0, sp
   d4f34:	f000 fd8d 	bl	d5a52 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4f38:	4620      	mov	r0, r4
   d4f3a:	b008      	add	sp, #32
   d4f3c:	bd10      	pop	{r4, pc}

000d4f3e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4f40:	2410      	movs	r4, #16
   d4f42:	b085      	sub	sp, #20
   d4f44:	4607      	mov	r7, r0
   d4f46:	460e      	mov	r6, r1
   d4f48:	4615      	mov	r5, r2
   d4f4a:	2100      	movs	r1, #0
   d4f4c:	4622      	mov	r2, r4
   d4f4e:	4668      	mov	r0, sp
   d4f50:	f001 ff39 	bl	d6dc6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f54:	2200      	movs	r2, #0
   d4f56:	4669      	mov	r1, sp
   d4f58:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4f5a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4f5e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4f60:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4f62:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f64:	f7ff fe42 	bl	d4bec <spark_function>
}
   d4f68:	b005      	add	sp, #20
   d4f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f6c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4f6c:	b513      	push	{r0, r1, r4, lr}
   d4f6e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f70:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4f74:	2300      	movs	r3, #0
   d4f76:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f78:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f7a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4f7c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f7e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4f80:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f82:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f84:	f7ff f9a0 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f88:	4620      	mov	r0, r4
   d4f8a:	b002      	add	sp, #8
   d4f8c:	bd10      	pop	{r4, pc}

000d4f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f90:	460c      	mov	r4, r1
   d4f92:	ad02      	add	r5, sp, #8
   d4f94:	f854 3b04 	ldr.w	r3, [r4], #4
   d4f98:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4f9c:	4606      	mov	r6, r0
   d4f9e:	460f      	mov	r7, r1
   d4fa0:	a801      	add	r0, sp, #4
   d4fa2:	4621      	mov	r1, r4
   d4fa4:	f7ff ff09 	bl	d4dba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4fa8:	4629      	mov	r1, r5
   d4faa:	4630      	mov	r0, r6
   d4fac:	f7ff ffde 	bl	d4f6c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fb0:	a801      	add	r0, sp, #4
   d4fb2:	f7ff f989 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	f7ff f986 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4fbc:	4638      	mov	r0, r7
   d4fbe:	2108      	movs	r1, #8
   d4fc0:	f001 f8d9 	bl	d6176 <_ZdlPvj>
        return p;
    }
   d4fc4:	4630      	mov	r0, r6
   d4fc6:	b003      	add	sp, #12
   d4fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fca <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4fca:	b513      	push	{r0, r1, r4, lr}
   d4fcc:	460b      	mov	r3, r1
   d4fce:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fd0:	c803      	ldmia	r0, {r0, r1}
   d4fd2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4fda:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4fde:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4fe2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4fe6:	b002      	add	sp, #8
   d4fe8:	bd10      	pop	{r4, pc}
	...

000d4fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fec:	b538      	push	{r3, r4, r5, lr}
   d4fee:	2300      	movs	r3, #0
   d4ff0:	4604      	mov	r4, r0
   d4ff2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ff4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ff6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ff8:	f7ff f84d 	bl	d4096 <_Znwj>
   d4ffc:	b128      	cbz	r0, d500a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4ffe:	2301      	movs	r3, #1
   d5000:	6043      	str	r3, [r0, #4]
   d5002:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5004:	4b02      	ldr	r3, [pc, #8]	; (d5010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5006:	6003      	str	r3, [r0, #0]
   d5008:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d500a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d500c:	4620      	mov	r0, r4
   d500e:	bd38      	pop	{r3, r4, r5, pc}
   d5010:	000d783c 	.word	0x000d783c

000d5014 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5014:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5016:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5018:	b90a      	cbnz	r2, d501e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d501a:	f001 f8ae 	bl	d617a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d501e:	68c3      	ldr	r3, [r0, #12]
    }
   d5020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5024:	4718      	bx	r3

000d5026 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5026:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5028:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d502a:	f100 0110 	add.w	r1, r0, #16
   d502e:	f7ff fff1 	bl	d5014 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5032:	bd08      	pop	{r3, pc}

000d5034 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5034:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5036:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5038:	b90a      	cbnz	r2, d503e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d503a:	f001 f89e 	bl	d617a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d503e:	68c3      	ldr	r3, [r0, #12]
    }
   d5040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5044:	4718      	bx	r3

000d5046 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5046:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5048:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d504a:	f100 0110 	add.w	r1, r0, #16
   d504e:	f7ff fff1 	bl	d5034 <_ZNKSt8functionIFvRKbEEclES1_>
   d5052:	bd08      	pop	{r3, pc}

000d5054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5054:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5056:	2300      	movs	r3, #0
   d5058:	6083      	str	r3, [r0, #8]
   d505a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d505c:	4604      	mov	r4, r0
   d505e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5060:	b12b      	cbz	r3, d506e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5062:	2202      	movs	r2, #2
   d5064:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5066:	68eb      	ldr	r3, [r5, #12]
   d5068:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d506a:	68ab      	ldr	r3, [r5, #8]
   d506c:	60a3      	str	r3, [r4, #8]
	}
    }
   d506e:	4620      	mov	r0, r4
   d5070:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5074:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5076:	b089      	sub	sp, #36	; 0x24
   d5078:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d507a:	4668      	mov	r0, sp
   d507c:	f7ff ff10 	bl	d4ea0 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5080:	2300      	movs	r3, #0
   d5082:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5086:	f04f 0202 	mov.w	r2, #2
   d508a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d508e:	2b00      	cmp	r3, #0
   d5090:	d103      	bne.n	d509a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5092:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5096:	2900      	cmp	r1, #0
   d5098:	d1f7      	bne.n	d508a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d509a:	d002      	beq.n	d50a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d509c:	f88d 3008 	strb.w	r3, [sp, #8]
   d50a0:	e063      	b.n	d516a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d50a2:	f114 050c 	adds.w	r5, r4, #12
   d50a6:	d003      	beq.n	d50b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d50a8:	4669      	mov	r1, sp
   d50aa:	4628      	mov	r0, r5
   d50ac:	f7ff fef8 	bl	d4ea0 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50b0:	f3bf 8f5f 	dmb	sy
   d50b4:	2301      	movs	r3, #1
   d50b6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50b8:	2000      	movs	r0, #0
   d50ba:	f104 0308 	add.w	r3, r4, #8
   d50be:	f3bf 8f5f 	dmb	sy
   d50c2:	e853 6f00 	ldrex	r6, [r3]
   d50c6:	e843 0200 	strex	r2, r0, [r3]
   d50ca:	2a00      	cmp	r2, #0
   d50cc:	d1f9      	bne.n	d50c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d50ce:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50d2:	2e00      	cmp	r6, #0
   d50d4:	d049      	beq.n	d516a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50d6:	f7ff fd4b 	bl	d4b70 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50da:	b120      	cbz	r0, d50e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50dc:	4629      	mov	r1, r5
   d50de:	4630      	mov	r0, r6
   d50e0:	f7ff ff98 	bl	d5014 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50e4:	e03a      	b.n	d515c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50e6:	4631      	mov	r1, r6
   d50e8:	a802      	add	r0, sp, #8
   d50ea:	f7ff ffb3 	bl	d5054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50ee:	68e0      	ldr	r0, [r4, #12]
   d50f0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50f4:	b108      	cbz	r0, d50fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d50f6:	f001 fee3 	bl	d6ec0 <strdup>
   d50fa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50fc:	2010      	movs	r0, #16
   d50fe:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5102:	f7fe ffc8 	bl	d4096 <_Znwj>
   d5106:	4605      	mov	r5, r0
   d5108:	b1e8      	cbz	r0, d5146 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d510a:	2700      	movs	r7, #0
   d510c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d510e:	2018      	movs	r0, #24
   d5110:	f7fe ffc1 	bl	d4096 <_Znwj>
   d5114:	4604      	mov	r4, r0
   d5116:	b188      	cbz	r0, d513c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5118:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d511a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d511c:	a802      	add	r0, sp, #8
   d511e:	f7ff ff54 	bl	d4fca <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5122:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5124:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5126:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5128:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d512a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d512c:	a906      	add	r1, sp, #24
   d512e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5130:	60e3      	str	r3, [r4, #12]
   d5132:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5136:	9205      	str	r2, [sp, #20]
   d5138:	f7ff feb2 	bl	d4ea0 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d513c:	4b0d      	ldr	r3, [pc, #52]	; (d5174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d513e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5140:	4b0d      	ldr	r3, [pc, #52]	; (d5178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5142:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5144:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5146:	a806      	add	r0, sp, #24
   d5148:	f7ff feb9 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d514c:	a802      	add	r0, sp, #8
   d514e:	f7ff fe9e 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5152:	2200      	movs	r2, #0
   d5154:	4629      	mov	r1, r5
   d5156:	4809      	ldr	r0, [pc, #36]	; (d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5158:	f7ff fd12 	bl	d4b80 <application_thread_invoke>
   d515c:	4630      	mov	r0, r6
   d515e:	f7ff fe96 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5162:	2110      	movs	r1, #16
   d5164:	4630      	mov	r0, r6
   d5166:	f001 f806 	bl	d6176 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d516a:	4668      	mov	r0, sp
   d516c:	f7ff fea7 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
    }
   d5170:	b009      	add	sp, #36	; 0x24
   d5172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5174:	000d5027 	.word	0x000d5027
   d5178:	000d529d 	.word	0x000d529d
   d517c:	000d4d93 	.word	0x000d4d93

000d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5184:	b08b      	sub	sp, #44	; 0x2c
   d5186:	4606      	mov	r6, r0
   d5188:	460f      	mov	r7, r1
   d518a:	4690      	mov	r8, r2
   d518c:	4699      	mov	r9, r3
   d518e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5192:	f7ff fd4b 	bl	d4c2c <spark_cloud_flag_connected>
   d5196:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5198:	4683      	mov	fp, r0
   d519a:	bb30      	cbnz	r0, d51ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d519c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d51a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51a2:	a905      	add	r1, sp, #20
   d51a4:	4628      	mov	r0, r5
   d51a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51aa:	f7ff fe79 	bl	d4ea0 <_ZN8particle5ErrorC1EOS0_>
   d51ae:	2014      	movs	r0, #20
   d51b0:	f7fe ff71 	bl	d4096 <_Znwj>
   d51b4:	4604      	mov	r4, r0
   d51b6:	b158      	cbz	r0, d51d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51b8:	2302      	movs	r3, #2
   d51ba:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51bc:	2301      	movs	r3, #1
   d51be:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51c0:	f8c0 b004 	str.w	fp, [r0, #4]
   d51c4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d51c8:	4629      	mov	r1, r5
   d51ca:	300c      	adds	r0, #12
   d51cc:	f7ff fe68 	bl	d4ea0 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d51d0:	4630      	mov	r0, r6
   d51d2:	4621      	mov	r1, r4
   d51d4:	f840 4b04 	str.w	r4, [r0], #4
   d51d8:	f7ff ff08 	bl	d4fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51dc:	4628      	mov	r0, r5
   d51de:	f7ff fe6e 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d51e2:	a805      	add	r0, sp, #20
   d51e4:	f7ff fe6b 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
   d51e8:	e052      	b.n	d5290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51ea:	2400      	movs	r4, #0
   d51ec:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51ee:	2014      	movs	r0, #20
   d51f0:	606c      	str	r4, [r5, #4]
   d51f2:	60ac      	str	r4, [r5, #8]
   d51f4:	9307      	str	r3, [sp, #28]
   d51f6:	f7fe ff4e 	bl	d4096 <_Znwj>
   d51fa:	4601      	mov	r1, r0
   d51fc:	b118      	cbz	r0, d5206 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d51fe:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5200:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5202:	6044      	str	r4, [r0, #4]
   d5204:	6084      	str	r4, [r0, #8]
   d5206:	a804      	add	r0, sp, #16
   d5208:	9103      	str	r1, [sp, #12]
   d520a:	f7ff feef 	bl	d4fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d520e:	4b22      	ldr	r3, [pc, #136]	; (d5298 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5210:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5212:	2008      	movs	r0, #8
   d5214:	f7fe ff3f 	bl	d4096 <_Znwj>
   d5218:	4604      	mov	r4, r0
   d521a:	b128      	cbz	r0, d5228 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d521c:	9b03      	ldr	r3, [sp, #12]
   d521e:	f840 3b04 	str.w	r3, [r0], #4
   d5222:	a904      	add	r1, sp, #16
   d5224:	f7ff fdc9 	bl	d4dba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5228:	9500      	str	r5, [sp, #0]
   d522a:	fa5f f38a 	uxtb.w	r3, sl
   d522e:	464a      	mov	r2, r9
   d5230:	4641      	mov	r1, r8
   d5232:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5234:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5236:	f7ff fd01 	bl	d4c3c <spark_send_event>
   d523a:	b920      	cbnz	r0, d5246 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d523c:	9b03      	ldr	r3, [sp, #12]
   d523e:	785b      	ldrb	r3, [r3, #1]
   d5240:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5244:	b183      	cbz	r3, d5268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5246:	9b03      	ldr	r3, [sp, #12]
   d5248:	9305      	str	r3, [sp, #20]
   d524a:	a904      	add	r1, sp, #16
   d524c:	a806      	add	r0, sp, #24
   d524e:	f7ff fdb4 	bl	d4dba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5252:	a905      	add	r1, sp, #20
   d5254:	4630      	mov	r0, r6
   d5256:	f7ff fe89 	bl	d4f6c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d525a:	a806      	add	r0, sp, #24
   d525c:	f7ff f834 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5260:	a804      	add	r0, sp, #16
   d5262:	f7ff f831 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5266:	e013      	b.n	d5290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5268:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d526c:	a905      	add	r1, sp, #20
   d526e:	a803      	add	r0, sp, #12
   d5270:	9205      	str	r2, [sp, #20]
   d5272:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5276:	f7ff fefd 	bl	d5074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d527a:	a805      	add	r0, sp, #20
   d527c:	f7ff fe1f 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5280:	a805      	add	r0, sp, #20
   d5282:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5284:	f7ff fe83 	bl	d4f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5288:	a806      	add	r0, sp, #24
   d528a:	f7ff f81d 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d528e:	e7da      	b.n	d5246 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5290:	4630      	mov	r0, r6
   d5292:	b00b      	add	sp, #44	; 0x2c
   d5294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5298:	000d540d 	.word	0x000d540d

000d529c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d529c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d529e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52a2:	d006      	beq.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d52a4:	2a03      	cmp	r2, #3
   d52a6:	d017      	beq.n	d52d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d52a8:	2a01      	cmp	r2, #1
   d52aa:	d122      	bne.n	d52f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52ae:	6003      	str	r3, [r0, #0]
	      break;
   d52b0:	e01f      	b.n	d52f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52b2:	2018      	movs	r0, #24
   d52b4:	680e      	ldr	r6, [r1, #0]
   d52b6:	f7fe feee 	bl	d4096 <_Znwj>
   d52ba:	4605      	mov	r5, r0
   d52bc:	b150      	cbz	r0, d52d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52be:	4631      	mov	r1, r6
   d52c0:	f7ff fec8 	bl	d5054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52c4:	6930      	ldr	r0, [r6, #16]
   d52c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52ca:	b108      	cbz	r0, d52d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d52cc:	f001 fdf8 	bl	d6ec0 <strdup>
   d52d0:	6128      	str	r0, [r5, #16]
   d52d2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52d4:	6025      	str	r5, [r4, #0]
   d52d6:	e00c      	b.n	d52f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52d8:	6804      	ldr	r4, [r0, #0]
   d52da:	b154      	cbz	r4, d52f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d52dc:	f104 0010 	add.w	r0, r4, #16
   d52e0:	f7ff fded 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52e4:	4620      	mov	r0, r4
   d52e6:	f7ff fdd2 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52ea:	2118      	movs	r1, #24
   d52ec:	4620      	mov	r0, r4
   d52ee:	f000 ff42 	bl	d6176 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52f2:	2000      	movs	r0, #0
   d52f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52f6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52f8:	2300      	movs	r3, #0
   d52fa:	6083      	str	r3, [r0, #8]
   d52fc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52fe:	4604      	mov	r4, r0
   d5300:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5302:	b12b      	cbz	r3, d5310 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5304:	2202      	movs	r2, #2
   d5306:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5308:	68eb      	ldr	r3, [r5, #12]
   d530a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d530c:	68ab      	ldr	r3, [r5, #8]
   d530e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5310:	4620      	mov	r0, r4
   d5312:	bd38      	pop	{r3, r4, r5, pc}

000d5314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5314:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5316:	b570      	push	{r4, r5, r6, lr}
   d5318:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d531a:	d006      	beq.n	d532a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d531c:	2a03      	cmp	r2, #3
   d531e:	d011      	beq.n	d5344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5320:	2a01      	cmp	r2, #1
   d5322:	d118      	bne.n	d5356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5324:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5326:	6003      	str	r3, [r0, #0]
	      break;
   d5328:	e015      	b.n	d5356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d532a:	2014      	movs	r0, #20
   d532c:	680e      	ldr	r6, [r1, #0]
   d532e:	f7fe feb2 	bl	d4096 <_Znwj>
   d5332:	4605      	mov	r5, r0
   d5334:	b120      	cbz	r0, d5340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5336:	4631      	mov	r1, r6
   d5338:	f7ff ffdd 	bl	d52f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d533c:	7c33      	ldrb	r3, [r6, #16]
   d533e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5340:	6025      	str	r5, [r4, #0]
   d5342:	e008      	b.n	d5356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5344:	6804      	ldr	r4, [r0, #0]
   d5346:	b134      	cbz	r4, d5356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5348:	4620      	mov	r0, r4
   d534a:	f7ff fda0 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d534e:	2114      	movs	r1, #20
   d5350:	4620      	mov	r0, r4
   d5352:	f000 ff10 	bl	d6176 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5356:	2000      	movs	r0, #0
   d5358:	bd70      	pop	{r4, r5, r6, pc}
	...

000d535c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d535c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d535e:	2300      	movs	r3, #0
   d5360:	b087      	sub	sp, #28
   d5362:	460c      	mov	r4, r1
   d5364:	f3bf 8f5f 	dmb	sy
   d5368:	e850 6f00 	ldrex	r6, [r0]
   d536c:	e840 3200 	strex	r2, r3, [r0]
   d5370:	2a00      	cmp	r2, #0
   d5372:	d1f9      	bne.n	d5368 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5374:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5378:	2e00      	cmp	r6, #0
   d537a:	d03f      	beq.n	d53fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d537c:	4618      	mov	r0, r3
   d537e:	f7ff fbf7 	bl	d4b70 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5382:	4607      	mov	r7, r0
   d5384:	b120      	cbz	r0, d5390 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5386:	4621      	mov	r1, r4
   d5388:	4630      	mov	r0, r6
   d538a:	f7ff fe53 	bl	d5034 <_ZNKSt8functionIFvRKbEEclES1_>
   d538e:	e02e      	b.n	d53ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5390:	4631      	mov	r1, r6
   d5392:	a801      	add	r0, sp, #4
   d5394:	f7ff ffaf 	bl	d52f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5398:	7823      	ldrb	r3, [r4, #0]
   d539a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d539e:	2010      	movs	r0, #16
   d53a0:	f7fe fe79 	bl	d4096 <_Znwj>
   d53a4:	4605      	mov	r5, r0
   d53a6:	b1d0      	cbz	r0, d53de <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53a8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53aa:	2014      	movs	r0, #20
   d53ac:	f7fe fe73 	bl	d4096 <_Znwj>
   d53b0:	4604      	mov	r4, r0
   d53b2:	b178      	cbz	r0, d53d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53b4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d53b6:	4601      	mov	r1, r0
   d53b8:	a801      	add	r0, sp, #4
   d53ba:	f7ff fe06 	bl	d4fca <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d53c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d53c6:	9203      	str	r2, [sp, #12]
   d53c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ca:	60e3      	str	r3, [r4, #12]
   d53cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53d0:	9204      	str	r2, [sp, #16]
   d53d2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53d4:	4b0a      	ldr	r3, [pc, #40]	; (d5400 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d53d6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53d8:	4b0a      	ldr	r3, [pc, #40]	; (d5404 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53da:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53dc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53de:	a801      	add	r0, sp, #4
   d53e0:	f7ff fd55 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53e4:	2200      	movs	r2, #0
   d53e6:	4629      	mov	r1, r5
   d53e8:	4807      	ldr	r0, [pc, #28]	; (d5408 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d53ea:	f7ff fbc9 	bl	d4b80 <application_thread_invoke>
   d53ee:	4630      	mov	r0, r6
   d53f0:	f7ff fd4d 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53f4:	2110      	movs	r1, #16
   d53f6:	4630      	mov	r0, r6
   d53f8:	f000 febd 	bl	d6176 <_ZdlPvj>
        }
    }
   d53fc:	b007      	add	sp, #28
   d53fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5400:	000d5047 	.word	0x000d5047
   d5404:	000d5315 	.word	0x000d5315
   d5408:	000d4d93 	.word	0x000d4d93

000d540c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d540c:	b530      	push	{r4, r5, lr}
   d540e:	b085      	sub	sp, #20
   d5410:	4604      	mov	r4, r0
   d5412:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5414:	4668      	mov	r0, sp
   d5416:	4611      	mov	r1, r2
   d5418:	f7ff fdb9 	bl	d4f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d541c:	b17c      	cbz	r4, d543e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d541e:	b224      	sxth	r4, r4
   d5420:	4628      	mov	r0, r5
   d5422:	b10d      	cbz	r5, d5428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5424:	f001 fd4c 	bl	d6ec0 <strdup>
   d5428:	9002      	str	r0, [sp, #8]
   d542a:	a902      	add	r1, sp, #8
   d542c:	4668      	mov	r0, sp
   d542e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5432:	f7ff fe1f 	bl	d5074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5436:	a802      	add	r0, sp, #8
   d5438:	f7ff fd41 	bl	d4ebe <_ZN8particle5ErrorD1Ev>
   d543c:	e01d      	b.n	d547a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d543e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5440:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5444:	f04f 0201 	mov.w	r2, #1
   d5448:	e8d0 3f4f 	ldrexb	r3, [r0]
   d544c:	42a3      	cmp	r3, r4
   d544e:	d103      	bne.n	d5458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5450:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5454:	2900      	cmp	r1, #0
   d5456:	d1f7      	bne.n	d5448 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5458:	d002      	beq.n	d5460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d545a:	f88d 3008 	strb.w	r3, [sp, #8]
   d545e:	e00c      	b.n	d547a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5460:	f110 010c 	adds.w	r1, r0, #12
   d5464:	f04f 0301 	mov.w	r3, #1
   d5468:	bf18      	it	ne
   d546a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d546c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5470:	3004      	adds	r0, #4
   d5472:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5476:	f7ff ff71 	bl	d535c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d547a:	a801      	add	r0, sp, #4
   d547c:	f7fe ff24 	bl	d42c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5480:	b005      	add	sp, #20
   d5482:	bd30      	pop	{r4, r5, pc}

000d5484 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5484:	2200      	movs	r2, #0
   d5486:	4611      	mov	r1, r2
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7ff bc2f 	b.w	d4cec <network_listening>

000d548e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d548e:	2200      	movs	r2, #0
   d5490:	4611      	mov	r1, r2
   d5492:	6840      	ldr	r0, [r0, #4]
   d5494:	f7ff bc3a 	b.w	d4d0c <network_get_listen_timeout>

000d5498 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5498:	2200      	movs	r2, #0
   d549a:	6840      	ldr	r0, [r0, #4]
   d549c:	f7ff bc2e 	b.w	d4cfc <network_set_listen_timeout>

000d54a0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d54a0:	2200      	movs	r2, #0
   d54a2:	f081 0101 	eor.w	r1, r1, #1
   d54a6:	6840      	ldr	r0, [r0, #4]
   d54a8:	f7ff bc18 	b.w	d4cdc <network_listen>

000d54ac <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d54ac:	2300      	movs	r3, #0
   d54ae:	461a      	mov	r2, r3
   d54b0:	4619      	mov	r1, r3
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	f7ff bc0a 	b.w	d4ccc <network_off>

000d54b8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d54b8:	2300      	movs	r3, #0
   d54ba:	461a      	mov	r2, r3
   d54bc:	4619      	mov	r1, r3
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	f7ff bbfc 	b.w	d4cbc <network_on>

000d54c4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54c4:	2200      	movs	r2, #0
   d54c6:	4611      	mov	r1, r2
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	f7ff bbef 	b.w	d4cac <network_ready>

000d54ce <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54ce:	2200      	movs	r2, #0
   d54d0:	4611      	mov	r1, r2
   d54d2:	6840      	ldr	r0, [r0, #4]
   d54d4:	f7ff bbda 	b.w	d4c8c <network_connecting>

000d54d8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54d8:	2200      	movs	r2, #0
   d54da:	2102      	movs	r1, #2
   d54dc:	6840      	ldr	r0, [r0, #4]
   d54de:	f7ff bbdd 	b.w	d4c9c <network_disconnect>

000d54e2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54e2:	2300      	movs	r3, #0
   d54e4:	461a      	mov	r2, r3
   d54e6:	6840      	ldr	r0, [r0, #4]
   d54e8:	f7ff bbc8 	b.w	d4c7c <network_connect>

000d54ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d54ec:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54ee:	2203      	movs	r2, #3
   d54f0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54f2:	4a02      	ldr	r2, [pc, #8]	; (d54fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54f4:	601a      	str	r2, [r3, #0]
   d54f6:	4770      	bx	lr
   d54f8:	2003e378 	.word	0x2003e378
   d54fc:	000d7858 	.word	0x000d7858

000d5500 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5500:	4770      	bx	lr

000d5502 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5504:	4606      	mov	r6, r0
   d5506:	4615      	mov	r5, r2
   d5508:	460c      	mov	r4, r1
   d550a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d550c:	42bc      	cmp	r4, r7
   d550e:	d006      	beq.n	d551e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5510:	6833      	ldr	r3, [r6, #0]
   d5512:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5516:	689b      	ldr	r3, [r3, #8]
   d5518:	4630      	mov	r0, r6
   d551a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d551c:	e7f6      	b.n	d550c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d551e:	4628      	mov	r0, r5
   d5520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5522 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5522:	2200      	movs	r2, #0
   d5524:	7c00      	ldrb	r0, [r0, #16]
   d5526:	f7ff ba2b 	b.w	d4980 <HAL_I2C_Write_Data>

000d552a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d552a:	2100      	movs	r1, #0
   d552c:	7c00      	ldrb	r0, [r0, #16]
   d552e:	f7ff ba2f 	b.w	d4990 <HAL_I2C_Available_Data>

000d5532 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5532:	2100      	movs	r1, #0
   d5534:	7c00      	ldrb	r0, [r0, #16]
   d5536:	f7ff ba33 	b.w	d49a0 <HAL_I2C_Read_Data>

000d553a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d553a:	2100      	movs	r1, #0
   d553c:	7c00      	ldrb	r0, [r0, #16]
   d553e:	f7ff ba37 	b.w	d49b0 <HAL_I2C_Peek_Data>

000d5542 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5542:	2100      	movs	r1, #0
   d5544:	7c00      	ldrb	r0, [r0, #16]
   d5546:	f7ff ba3b 	b.w	d49c0 <HAL_I2C_Flush_Data>

000d554a <_ZN7TwoWireD0Ev>:
   d554a:	b510      	push	{r4, lr}
   d554c:	2114      	movs	r1, #20
   d554e:	4604      	mov	r4, r0
   d5550:	f000 fe11 	bl	d6176 <_ZdlPvj>
   d5554:	4620      	mov	r0, r4
   d5556:	bd10      	pop	{r4, pc}

000d5558 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5558:	b510      	push	{r4, lr}
   d555a:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d555c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5560:	4608      	mov	r0, r1
   d5562:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5564:	2100      	movs	r1, #0
   d5566:	4b04      	ldr	r3, [pc, #16]	; (d5578 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5568:	7420      	strb	r0, [r4, #16]
   d556a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d556c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d556e:	f7ff fa37 	bl	d49e0 <HAL_I2C_Init>

}
   d5572:	4620      	mov	r0, r4
   d5574:	bd10      	pop	{r4, pc}
   d5576:	bf00      	nop
   d5578:	000d788c 	.word	0x000d788c

000d557c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d557c:	2100      	movs	r1, #0
   d557e:	7c00      	ldrb	r0, [r0, #16]
   d5580:	f7ff ba26 	b.w	d49d0 <HAL_I2C_Is_Enabled>

000d5584 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5584:	4770      	bx	lr

000d5586 <_ZN9IPAddressD0Ev>:
   d5586:	b510      	push	{r4, lr}
   d5588:	2118      	movs	r1, #24
   d558a:	4604      	mov	r4, r0
   d558c:	f000 fdf3 	bl	d6176 <_ZdlPvj>
   d5590:	4620      	mov	r0, r4
   d5592:	bd10      	pop	{r4, pc}

000d5594 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5594:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5596:	7d03      	ldrb	r3, [r0, #20]
   d5598:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d559a:	b08d      	sub	sp, #52	; 0x34
   d559c:	460e      	mov	r6, r1
   d559e:	f100 0704 	add.w	r7, r0, #4
   d55a2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55a6:	d002      	beq.n	d55ae <_ZNK9IPAddress7printToER5Print+0x1a>
   d55a8:	f100 0508 	add.w	r5, r0, #8
   d55ac:	e018      	b.n	d55e0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55ae:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55b0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55b2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55b6:	232f      	movs	r3, #47	; 0x2f
   d55b8:	462a      	mov	r2, r5
   d55ba:	200a      	movs	r0, #10
   d55bc:	f7ff fa18 	bl	d49f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55c0:	4628      	mov	r0, r5
   d55c2:	f001 fc98 	bl	d6ef6 <strlen>
   d55c6:	6833      	ldr	r3, [r6, #0]
   d55c8:	4602      	mov	r2, r0
   d55ca:	68db      	ldr	r3, [r3, #12]
   d55cc:	4629      	mov	r1, r5
   d55ce:	4630      	mov	r0, r6
   d55d0:	4798      	blx	r3
   d55d2:	e00f      	b.n	d55f4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d55d4:	b124      	cbz	r4, d55e0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d55d6:	212e      	movs	r1, #46	; 0x2e
   d55d8:	4630      	mov	r0, r6
   d55da:	f000 f9c9 	bl	d5970 <_ZN5Print5printEc>
   d55de:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d55e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55e4:	220a      	movs	r2, #10
   d55e6:	4630      	mov	r0, r6
   d55e8:	f000 f9f2 	bl	d59d0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55ec:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55ee:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55f0:	d1f0      	bne.n	d55d4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55f2:	4620      	mov	r0, r4
    }
    return n;
}
   d55f4:	b00d      	add	sp, #52	; 0x34
   d55f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55f8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d55f8:	b510      	push	{r4, lr}
   d55fa:	4b05      	ldr	r3, [pc, #20]	; (d5610 <_ZN9IPAddressC1Ev+0x18>)
   d55fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d55fe:	2211      	movs	r2, #17
   d5600:	f840 3b04 	str.w	r3, [r0], #4
   d5604:	2100      	movs	r1, #0
   d5606:	f001 fbde 	bl	d6dc6 <memset>
{
    clear();
}
   d560a:	4620      	mov	r0, r4
   d560c:	bd10      	pop	{r4, pc}
   d560e:	bf00      	nop
   d5610:	000d78b4 	.word	0x000d78b4

000d5614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5614:	4603      	mov	r3, r0
   d5616:	4a07      	ldr	r2, [pc, #28]	; (d5634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5618:	b510      	push	{r4, lr}
   d561a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d561e:	f101 0210 	add.w	r2, r1, #16
   d5622:	f851 4b04 	ldr.w	r4, [r1], #4
   d5626:	f843 4b04 	str.w	r4, [r3], #4
   d562a:	4291      	cmp	r1, r2
   d562c:	d1f9      	bne.n	d5622 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d562e:	780a      	ldrb	r2, [r1, #0]
   d5630:	701a      	strb	r2, [r3, #0]
}
   d5632:	bd10      	pop	{r4, pc}
   d5634:	000d78b4 	.word	0x000d78b4

000d5638 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5638:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d563a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d563e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5642:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5646:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d564a:	2304      	movs	r3, #4
   d564c:	6041      	str	r1, [r0, #4]
   d564e:	7503      	strb	r3, [r0, #20]
   d5650:	bd10      	pop	{r4, pc}

000d5652 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5652:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5654:	780d      	ldrb	r5, [r1, #0]
   d5656:	788b      	ldrb	r3, [r1, #2]
   d5658:	784a      	ldrb	r2, [r1, #1]
   d565a:	78c9      	ldrb	r1, [r1, #3]
   d565c:	9100      	str	r1, [sp, #0]
   d565e:	4629      	mov	r1, r5
   d5660:	f7ff ffea 	bl	d5638 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5664:	b003      	add	sp, #12
   d5666:	bd30      	pop	{r4, r5, pc}

000d5668 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5668:	4b01      	ldr	r3, [pc, #4]	; (d5670 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d566a:	4a02      	ldr	r2, [pc, #8]	; (d5674 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d566c:	601a      	str	r2, [r3, #0]
   d566e:	4770      	bx	lr
   d5670:	2003e380 	.word	0x2003e380
   d5674:	000d7975 	.word	0x000d7975

000d5678 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5678:	2200      	movs	r2, #0
   d567a:	4611      	mov	r1, r2
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	f7ff bb35 	b.w	d4cec <network_listening>

000d5682 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5682:	2200      	movs	r2, #0
   d5684:	4611      	mov	r1, r2
   d5686:	6840      	ldr	r0, [r0, #4]
   d5688:	f7ff bb40 	b.w	d4d0c <network_get_listen_timeout>

000d568c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d568c:	2200      	movs	r2, #0
   d568e:	6840      	ldr	r0, [r0, #4]
   d5690:	f7ff bb34 	b.w	d4cfc <network_set_listen_timeout>

000d5694 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5694:	2200      	movs	r2, #0
   d5696:	f081 0101 	eor.w	r1, r1, #1
   d569a:	6840      	ldr	r0, [r0, #4]
   d569c:	f7ff bb1e 	b.w	d4cdc <network_listen>

000d56a0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d56a0:	2300      	movs	r3, #0
   d56a2:	461a      	mov	r2, r3
   d56a4:	2101      	movs	r1, #1
   d56a6:	6840      	ldr	r0, [r0, #4]
   d56a8:	f7ff bb10 	b.w	d4ccc <network_off>

000d56ac <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56ac:	2300      	movs	r3, #0
   d56ae:	461a      	mov	r2, r3
   d56b0:	4619      	mov	r1, r3
   d56b2:	6840      	ldr	r0, [r0, #4]
   d56b4:	f7ff bb02 	b.w	d4cbc <network_on>

000d56b8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56b8:	2200      	movs	r2, #0
   d56ba:	4611      	mov	r1, r2
   d56bc:	6840      	ldr	r0, [r0, #4]
   d56be:	f7ff baf5 	b.w	d4cac <network_ready>

000d56c2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56c2:	2200      	movs	r2, #0
   d56c4:	4611      	mov	r1, r2
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	f7ff bae0 	b.w	d4c8c <network_connecting>

000d56cc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56cc:	2200      	movs	r2, #0
   d56ce:	2102      	movs	r1, #2
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7ff bae3 	b.w	d4c9c <network_disconnect>

000d56d6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56d6:	2300      	movs	r3, #0
   d56d8:	461a      	mov	r2, r3
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7ff bace 	b.w	d4c7c <network_connect>

000d56e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56e0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56e2:	4605      	mov	r5, r0
   d56e4:	b188      	cbz	r0, d570a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56e6:	6804      	ldr	r4, [r0, #0]
   d56e8:	b14c      	cbz	r4, d56fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56ea:	68a3      	ldr	r3, [r4, #8]
   d56ec:	b11b      	cbz	r3, d56f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56ee:	2203      	movs	r2, #3
   d56f0:	4621      	mov	r1, r4
   d56f2:	4620      	mov	r0, r4
   d56f4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56f6:	2110      	movs	r1, #16
   d56f8:	4620      	mov	r0, r4
   d56fa:	f000 fd3c 	bl	d6176 <_ZdlPvj>
   d56fe:	4628      	mov	r0, r5
   d5700:	2114      	movs	r1, #20
      }
   d5702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5706:	f000 bd36 	b.w	d6176 <_ZdlPvj>
   d570a:	bd38      	pop	{r3, r4, r5, pc}

000d570c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d570c:	b110      	cbz	r0, d5714 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d570e:	6803      	ldr	r3, [r0, #0]
   d5710:	685b      	ldr	r3, [r3, #4]
   d5712:	4718      	bx	r3
   d5714:	4770      	bx	lr

000d5716 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5716:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5718:	6803      	ldr	r3, [r0, #0]
   d571a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d571c:	b1bb      	cbz	r3, d574e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d571e:	6858      	ldr	r0, [r3, #4]
   d5720:	f7ff f8a6 	bl	d4870 <os_thread_is_current>
   d5724:	b978      	cbnz	r0, d5746 <_ZN6ThreadD1Ev+0x30>
   d5726:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5728:	7c5a      	ldrb	r2, [r3, #17]
   d572a:	b912      	cbnz	r2, d5732 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d572c:	6858      	ldr	r0, [r3, #4]
   d572e:	f7ff f8a7 	bl	d4880 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5732:	6823      	ldr	r3, [r4, #0]
   d5734:	6858      	ldr	r0, [r3, #4]
   d5736:	f7ff f8ab 	bl	d4890 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d573a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d573c:	2300      	movs	r3, #0
   d573e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5740:	b128      	cbz	r0, d574e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5742:	f7ff ffcd 	bl	d56e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5746:	6820      	ldr	r0, [r4, #0]
   d5748:	b108      	cbz	r0, d574e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d574a:	f7ff ffc9 	bl	d56e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d574e:	4620      	mov	r0, r4
   d5750:	bd10      	pop	{r4, pc}
	...

000d5754 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5754:	b538      	push	{r3, r4, r5, lr}
   d5756:	4b0c      	ldr	r3, [pc, #48]	; (d5788 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5758:	6003      	str	r3, [r0, #0]
   d575a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d575c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5760:	b108      	cbz	r0, d5766 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5762:	f7fe fc9c 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5766:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d576a:	b135      	cbz	r5, d577a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d576c:	4628      	mov	r0, r5
   d576e:	f7ff ffd2 	bl	d5716 <_ZN6ThreadD1Ev>
   d5772:	2104      	movs	r1, #4
   d5774:	4628      	mov	r0, r5
   d5776:	f000 fcfe 	bl	d6176 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d577a:	68a0      	ldr	r0, [r4, #8]
   d577c:	b108      	cbz	r0, d5782 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d577e:	f7ff ffc5 	bl	d570c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5782:	4620      	mov	r0, r4
   d5784:	bd38      	pop	{r3, r4, r5, pc}
   d5786:	bf00      	nop
   d5788:	000d79a8 	.word	0x000d79a8

000d578c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d578c:	b538      	push	{r3, r4, r5, lr}
   d578e:	4c0e      	ldr	r4, [pc, #56]	; (d57c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5790:	4b0e      	ldr	r3, [pc, #56]	; (d57cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5792:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5794:	2500      	movs	r5, #0
   d5796:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5798:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d579c:	6063      	str	r3, [r4, #4]
   d579e:	60a5      	str	r5, [r4, #8]
   d57a0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57a4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d57a8:	f7ff f882 	bl	d48b0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d57ac:	4b08      	ldr	r3, [pc, #32]	; (d57d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d57ae:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57b2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d57b6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d57b8:	4620      	mov	r0, r4
   d57ba:	4a06      	ldr	r2, [pc, #24]	; (d57d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d57bc:	4906      	ldr	r1, [pc, #24]	; (d57d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d57be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57c2:	f000 bcd3 	b.w	d616c <__aeabi_atexit>
   d57c6:	bf00      	nop
   d57c8:	2003e384 	.word	0x2003e384
   d57cc:	000d79dc 	.word	0x000d79dc
   d57d0:	000d79a8 	.word	0x000d79a8
   d57d4:	2003e2e8 	.word	0x2003e2e8
   d57d8:	000d5755 	.word	0x000d5755

000d57dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57dc:	2300      	movs	r3, #0
   d57de:	461a      	mov	r2, r3
   d57e0:	6840      	ldr	r0, [r0, #4]
   d57e2:	f7ff ba4b 	b.w	d4c7c <network_connect>

000d57e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57e6:	2200      	movs	r2, #0
   d57e8:	2102      	movs	r1, #2
   d57ea:	6840      	ldr	r0, [r0, #4]
   d57ec:	f7ff ba56 	b.w	d4c9c <network_disconnect>

000d57f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57f0:	2200      	movs	r2, #0
   d57f2:	4611      	mov	r1, r2
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	f7ff ba49 	b.w	d4c8c <network_connecting>

000d57fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57fa:	2200      	movs	r2, #0
   d57fc:	4611      	mov	r1, r2
   d57fe:	6840      	ldr	r0, [r0, #4]
   d5800:	f7ff ba54 	b.w	d4cac <network_ready>

000d5804 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5804:	2300      	movs	r3, #0
   d5806:	461a      	mov	r2, r3
   d5808:	4619      	mov	r1, r3
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	f7ff ba56 	b.w	d4cbc <network_on>

000d5810 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5810:	2300      	movs	r3, #0
   d5812:	461a      	mov	r2, r3
   d5814:	4619      	mov	r1, r3
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	f7ff ba58 	b.w	d4ccc <network_off>

000d581c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d581c:	2200      	movs	r2, #0
   d581e:	f081 0101 	eor.w	r1, r1, #1
   d5822:	6840      	ldr	r0, [r0, #4]
   d5824:	f7ff ba5a 	b.w	d4cdc <network_listen>

000d5828 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5828:	2200      	movs	r2, #0
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff ba66 	b.w	d4cfc <network_set_listen_timeout>

000d5830 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5830:	2200      	movs	r2, #0
   d5832:	4611      	mov	r1, r2
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	f7ff ba69 	b.w	d4d0c <network_get_listen_timeout>

000d583a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d583a:	2200      	movs	r2, #0
   d583c:	4611      	mov	r1, r2
   d583e:	6840      	ldr	r0, [r0, #4]
   d5840:	f7ff ba54 	b.w	d4cec <network_listening>

000d5844 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5848:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d584a:	b095      	sub	sp, #84	; 0x54
   d584c:	4616      	mov	r6, r2
   d584e:	460d      	mov	r5, r1
   d5850:	4607      	mov	r7, r0
    IPAddress addr;
   d5852:	f7ff fed1 	bl	d55f8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5856:	4621      	mov	r1, r4
   d5858:	2220      	movs	r2, #32
   d585a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d585c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d585e:	f001 fab2 	bl	d6dc6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5862:	2340      	movs	r3, #64	; 0x40
   d5864:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5866:	4621      	mov	r1, r4
   d5868:	466b      	mov	r3, sp
   d586a:	aa0c      	add	r2, sp, #48	; 0x30
   d586c:	4630      	mov	r0, r6
   d586e:	f7ff f8cf 	bl	d4a10 <netdb_getaddrinfo>
    if (!r) {
   d5872:	4604      	mov	r4, r0
   d5874:	2800      	cmp	r0, #0
   d5876:	d144      	bne.n	d5902 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5878:	4602      	mov	r2, r0
   d587a:	2101      	movs	r1, #1
   d587c:	6868      	ldr	r0, [r5, #4]
   d587e:	f7ff fa15 	bl	d4cac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5882:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5884:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5886:	4622      	mov	r2, r4
   d5888:	6868      	ldr	r0, [r5, #4]
   d588a:	f7ff fa0f 	bl	d4cac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d588e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5890:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5892:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5894:	2e00      	cmp	r6, #0
   d5896:	d034      	beq.n	d5902 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5898:	2900      	cmp	r1, #0
   d589a:	d132      	bne.n	d5902 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d589c:	6873      	ldr	r3, [r6, #4]
   d589e:	2b02      	cmp	r3, #2
   d58a0:	d002      	beq.n	d58a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d58a2:	2b0a      	cmp	r3, #10
   d58a4:	d009      	beq.n	d58ba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d58a6:	e02a      	b.n	d58fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d58a8:	f1b8 0f00 	cmp.w	r8, #0
   d58ac:	d027      	beq.n	d58fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58ae:	6971      	ldr	r1, [r6, #20]
   d58b0:	4638      	mov	r0, r7
   d58b2:	3104      	adds	r1, #4
   d58b4:	f7ff fecd 	bl	d5652 <_ZN9IPAddressaSEPKh>
   d58b8:	e020      	b.n	d58fc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58ba:	f1b9 0f00 	cmp.w	r9, #0
   d58be:	d01e      	beq.n	d58fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58c0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58c2:	2211      	movs	r2, #17
   d58c4:	a801      	add	r0, sp, #4
   d58c6:	f001 fa7e 	bl	d6dc6 <memset>
                    a.v = 6;
   d58ca:	2306      	movs	r3, #6
   d58cc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58d0:	ad01      	add	r5, sp, #4
   d58d2:	f104 0308 	add.w	r3, r4, #8
   d58d6:	3418      	adds	r4, #24
   d58d8:	6818      	ldr	r0, [r3, #0]
   d58da:	6859      	ldr	r1, [r3, #4]
   d58dc:	462a      	mov	r2, r5
   d58de:	c203      	stmia	r2!, {r0, r1}
   d58e0:	3308      	adds	r3, #8
   d58e2:	42a3      	cmp	r3, r4
   d58e4:	4615      	mov	r5, r2
   d58e6:	d1f7      	bne.n	d58d8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d58e8:	a901      	add	r1, sp, #4
   d58ea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d58ec:	ad07      	add	r5, sp, #28
   d58ee:	f7ff fe91 	bl	d5614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d58f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58f4:	1d3c      	adds	r4, r7, #4
   d58f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58f8:	682b      	ldr	r3, [r5, #0]
   d58fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d58fc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58fe:	69f6      	ldr	r6, [r6, #28]
   d5900:	e7c8      	b.n	d5894 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5902:	9800      	ldr	r0, [sp, #0]
   d5904:	f7ff f87c 	bl	d4a00 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5908:	4638      	mov	r0, r7
   d590a:	b015      	add	sp, #84	; 0x54
   d590c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5910 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5910:	4b02      	ldr	r3, [pc, #8]	; (d591c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5912:	4a03      	ldr	r2, [pc, #12]	; (d5920 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5914:	601a      	str	r2, [r3, #0]
   d5916:	2200      	movs	r2, #0
   d5918:	605a      	str	r2, [r3, #4]
   d591a:	4770      	bx	lr
   d591c:	2003e558 	.word	0x2003e558
   d5920:	000d79dc 	.word	0x000d79dc

000d5924 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5926:	4606      	mov	r6, r0
   d5928:	460d      	mov	r5, r1
   d592a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d592c:	2400      	movs	r4, #0
  while (size--) {
   d592e:	42bd      	cmp	r5, r7
   d5930:	d00c      	beq.n	d594c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5932:	6833      	ldr	r3, [r6, #0]
   d5934:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5938:	689b      	ldr	r3, [r3, #8]
   d593a:	4630      	mov	r0, r6
   d593c:	4798      	blx	r3
     if (chunk>=0)
   d593e:	2800      	cmp	r0, #0
   d5940:	db01      	blt.n	d5946 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5942:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5944:	e7f3      	b.n	d592e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5946:	2c00      	cmp	r4, #0
   d5948:	bf08      	it	eq
   d594a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d594c:	4620      	mov	r0, r4
   d594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5950 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5950:	b570      	push	{r4, r5, r6, lr}
   d5952:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5954:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5956:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5958:	b149      	cbz	r1, d596e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d595a:	f001 facc 	bl	d6ef6 <strlen>
   d595e:	682b      	ldr	r3, [r5, #0]
   d5960:	4602      	mov	r2, r0
   d5962:	4621      	mov	r1, r4
   d5964:	4628      	mov	r0, r5
   d5966:	68db      	ldr	r3, [r3, #12]
    }
   d5968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d596c:	4718      	bx	r3
    }
   d596e:	bd70      	pop	{r4, r5, r6, pc}

000d5970 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5970:	6803      	ldr	r3, [r0, #0]
   d5972:	689b      	ldr	r3, [r3, #8]
   d5974:	4718      	bx	r3

000d5976 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5976:	b530      	push	{r4, r5, lr}
   d5978:	b08b      	sub	sp, #44	; 0x2c
   d597a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d597c:	2100      	movs	r1, #0
   d597e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5982:	2a01      	cmp	r2, #1
   d5984:	bf98      	it	ls
   d5986:	220a      	movls	r2, #10
   d5988:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d598c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5990:	fb05 3312 	mls	r3, r5, r2, r3
   d5994:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5998:	2b09      	cmp	r3, #9
   d599a:	bf94      	ite	ls
   d599c:	3330      	addls	r3, #48	; 0x30
   d599e:	3337      	addhi	r3, #55	; 0x37
   d59a0:	b2db      	uxtb	r3, r3
   d59a2:	4621      	mov	r1, r4
   d59a4:	f804 3901 	strb.w	r3, [r4], #-1
   d59a8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d59aa:	2d00      	cmp	r5, #0
   d59ac:	d1ee      	bne.n	d598c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d59ae:	f7ff ffcf 	bl	d5950 <_ZN5Print5writeEPKc>
}
   d59b2:	b00b      	add	sp, #44	; 0x2c
   d59b4:	bd30      	pop	{r4, r5, pc}

000d59b6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d59b6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d59b8:	b92a      	cbnz	r2, d59c6 <_ZN5Print5printEmi+0x10>
   d59ba:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d59bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d59c0:	689b      	ldr	r3, [r3, #8]
   d59c2:	b2c9      	uxtb	r1, r1
   d59c4:	4718      	bx	r3
  else return printNumber(n, base);
   d59c6:	b2d2      	uxtb	r2, r2
}
   d59c8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d59cc:	f7ff bfd3 	b.w	d5976 <_ZN5Print11printNumberEmh>

000d59d0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d59d0:	f7ff bff1 	b.w	d59b6 <_ZN5Print5printEmi>

000d59d4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d59d4:	b510      	push	{r4, lr}
  if (0 == max) {
   d59d6:	4604      	mov	r4, r0
   d59d8:	b130      	cbz	r0, d59e8 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d59da:	f001 fa25 	bl	d6e28 <rand>
   d59de:	fb90 f3f4 	sdiv	r3, r0, r4
   d59e2:	fb03 0014 	mls	r0, r3, r4, r0
   d59e6:	bd10      	pop	{r4, pc}
}
   d59e8:	bd10      	pop	{r4, pc}

000d59ea <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59ea:	b510      	push	{r4, lr}
   d59ec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59ee:	f7ff fa4e 	bl	d4e8e <_ZNSt14_Function_baseD1Ev>
   d59f2:	4620      	mov	r0, r4
   d59f4:	bd10      	pop	{r4, pc}
	...

000d59f8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f8:	4803      	ldr	r0, [pc, #12]	; (d5a08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59fa:	4a04      	ldr	r2, [pc, #16]	; (d5a0c <_GLOBAL__sub_I_RGB+0x14>)
   d59fc:	4904      	ldr	r1, [pc, #16]	; (d5a10 <_GLOBAL__sub_I_RGB+0x18>)
   d59fe:	2300      	movs	r3, #0
   d5a00:	6083      	str	r3, [r0, #8]
   d5a02:	f000 bbb3 	b.w	d616c <__aeabi_atexit>
   d5a06:	bf00      	nop
   d5a08:	2003e560 	.word	0x2003e560
   d5a0c:	2003e2e8 	.word	0x2003e2e8
   d5a10:	000d59eb 	.word	0x000d59eb

000d5a14 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5a14:	4770      	bx	lr

000d5a16 <_ZN8SPIClassD0Ev>:
   d5a16:	b510      	push	{r4, lr}
   d5a18:	2110      	movs	r1, #16
   d5a1a:	4604      	mov	r4, r0
   d5a1c:	f000 fbab 	bl	d6176 <_ZdlPvj>
   d5a20:	4620      	mov	r0, r4
   d5a22:	bd10      	pop	{r4, pc}

000d5a24 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a24:	b570      	push	{r4, r5, r6, lr}
   d5a26:	4b08      	ldr	r3, [pc, #32]	; (d5a48 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5a28:	6003      	str	r3, [r0, #0]
   d5a2a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5a2c:	2500      	movs	r5, #0
   d5a2e:	460e      	mov	r6, r1
   d5a30:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5a34:	f7fe ff34 	bl	d48a0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5a38:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5a3a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5a3c:	f7fe fff0 	bl	d4a20 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5a40:	60a5      	str	r5, [r4, #8]
}
   d5a42:	4620      	mov	r0, r4
   d5a44:	bd70      	pop	{r4, r5, r6, pc}
   d5a46:	bf00      	nop
   d5a48:	000d7a10 	.word	0x000d7a10

000d5a4c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5a4c:	7900      	ldrb	r0, [r0, #4]
   d5a4e:	f7fe bfef 	b.w	d4a30 <HAL_SPI_Is_Enabled>

000d5a52 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5a52:	b510      	push	{r4, lr}
   d5a54:	4604      	mov	r4, r0
{
	free(buffer);
   d5a56:	6800      	ldr	r0, [r0, #0]
   d5a58:	f7ff f968 	bl	d4d2c <free>
}
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	bd10      	pop	{r4, pc}

000d5a60 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5a60:	b510      	push	{r4, lr}
   d5a62:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5a64:	6800      	ldr	r0, [r0, #0]
   d5a66:	b108      	cbz	r0, d5a6c <_ZN6String10invalidateEv+0xc>
   d5a68:	f7ff f960 	bl	d4d2c <free>
	buffer = NULL;
   d5a6c:	2300      	movs	r3, #0
   d5a6e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5a70:	60a3      	str	r3, [r4, #8]
   d5a72:	6063      	str	r3, [r4, #4]
   d5a74:	bd10      	pop	{r4, pc}

000d5a76 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5a76:	b538      	push	{r3, r4, r5, lr}
   d5a78:	4604      	mov	r4, r0
   d5a7a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5a7c:	6800      	ldr	r0, [r0, #0]
   d5a7e:	3101      	adds	r1, #1
   d5a80:	f7ff f95c 	bl	d4d3c <realloc>
	if (newbuffer) {
   d5a84:	b110      	cbz	r0, d5a8c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5a86:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5a8a:	2001      	movs	r0, #1
	}
	return 0;
}
   d5a8c:	bd38      	pop	{r3, r4, r5, pc}

000d5a8e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5a8e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5a90:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5a92:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5a94:	b113      	cbz	r3, d5a9c <_ZN6String7reserveEj+0xe>
   d5a96:	6843      	ldr	r3, [r0, #4]
   d5a98:	428b      	cmp	r3, r1
   d5a9a:	d207      	bcs.n	d5aac <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	f7ff ffea 	bl	d5a76 <_ZN6String12changeBufferEj>
   d5aa2:	b120      	cbz	r0, d5aae <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5aa4:	68a3      	ldr	r3, [r4, #8]
   d5aa6:	b90b      	cbnz	r3, d5aac <_ZN6String7reserveEj+0x1e>
   d5aa8:	6822      	ldr	r2, [r4, #0]
   d5aaa:	7013      	strb	r3, [r2, #0]
   d5aac:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5ab0:	b570      	push	{r4, r5, r6, lr}
   d5ab2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5ab4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5ab6:	4604      	mov	r4, r0
   d5ab8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5aba:	f7ff ffe8 	bl	d5a8e <_ZN6String7reserveEj>
   d5abe:	b918      	cbnz	r0, d5ac8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	f7ff ffcd 	bl	d5a60 <_ZN6String10invalidateEv>
		return *this;
   d5ac6:	e009      	b.n	d5adc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5ac8:	462a      	mov	r2, r5
   d5aca:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5acc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5ace:	6820      	ldr	r0, [r4, #0]
   d5ad0:	f001 f96e 	bl	d6db0 <memcpy>
	buffer[len] = 0;
   d5ad4:	6822      	ldr	r2, [r4, #0]
   d5ad6:	68a3      	ldr	r3, [r4, #8]
   d5ad8:	2100      	movs	r1, #0
   d5ada:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5adc:	4620      	mov	r0, r4
   d5ade:	bd70      	pop	{r4, r5, r6, pc}

000d5ae0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ae0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ae2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ae4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ae6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5ae8:	6043      	str	r3, [r0, #4]
	len = 0;
   d5aea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5aec:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5aee:	460d      	mov	r5, r1
   d5af0:	b139      	cbz	r1, d5b02 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5af2:	4608      	mov	r0, r1
   d5af4:	f001 f9ff 	bl	d6ef6 <strlen>
   d5af8:	4629      	mov	r1, r5
   d5afa:	4602      	mov	r2, r0
   d5afc:	4620      	mov	r0, r4
   d5afe:	f7ff ffd7 	bl	d5ab0 <_ZN6String4copyEPKcj>
}
   d5b02:	4620      	mov	r0, r4
   d5b04:	bd38      	pop	{r3, r4, r5, pc}

000d5b06 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5b06:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5b08:	b510      	push	{r4, lr}
   d5b0a:	460b      	mov	r3, r1
   d5b0c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5b0e:	d007      	beq.n	d5b20 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5b10:	6809      	ldr	r1, [r1, #0]
   d5b12:	b119      	cbz	r1, d5b1c <_ZN6StringaSERKS_+0x16>
   d5b14:	689a      	ldr	r2, [r3, #8]
   d5b16:	f7ff ffcb 	bl	d5ab0 <_ZN6String4copyEPKcj>
   d5b1a:	e001      	b.n	d5b20 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5b1c:	f7ff ffa0 	bl	d5a60 <_ZN6String10invalidateEv>

	return *this;
}
   d5b20:	4620      	mov	r0, r4
   d5b22:	bd10      	pop	{r4, pc}

000d5b24 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5b24:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b26:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5b28:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b2a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5b2c:	6043      	str	r3, [r0, #4]
	len = 0;
   d5b2e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b30:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5b32:	f7ff ffe8 	bl	d5b06 <_ZN6StringaSERKS_>
}
   d5b36:	4620      	mov	r0, r4
   d5b38:	bd10      	pop	{r4, pc}

000d5b3a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5b3a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5b3c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5b3e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5b40:	b912      	cbnz	r2, d5b48 <_ZNK6String6equalsEPKc+0xe>
   d5b42:	b919      	cbnz	r1, d5b4c <_ZNK6String6equalsEPKc+0x12>
   d5b44:	2001      	movs	r0, #1
   d5b46:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5b48:	b911      	cbnz	r1, d5b50 <_ZNK6String6equalsEPKc+0x16>
   d5b4a:	6803      	ldr	r3, [r0, #0]
   d5b4c:	7818      	ldrb	r0, [r3, #0]
   d5b4e:	e002      	b.n	d5b56 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5b50:	6800      	ldr	r0, [r0, #0]
   d5b52:	f001 f9a3 	bl	d6e9c <strcmp>
   d5b56:	fab0 f080 	clz	r0, r0
   d5b5a:	0940      	lsrs	r0, r0, #5
}
   d5b5c:	bd08      	pop	{r3, pc}
	...

000d5b60 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d5b60:	b510      	push	{r4, lr}
   d5b62:	4604      	mov	r4, r0
   d5b64:	4608      	mov	r0, r1
   d5b66:	4611      	mov	r1, r2
   d5b68:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d5b6a:	2300      	movs	r3, #0
   d5b6c:	f7fe fff0 	bl	d4b50 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d5b70:	4b06      	ldr	r3, [pc, #24]	; (d5b8c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d5b72:	2200      	movs	r2, #0
   d5b74:	701a      	strb	r2, [r3, #0]
   d5b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b7a:	8058      	strh	r0, [r3, #2]
   d5b7c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d5b7e:	681a      	ldr	r2, [r3, #0]
   d5b80:	889b      	ldrh	r3, [r3, #4]
   d5b82:	6022      	str	r2, [r4, #0]
   d5b84:	80a3      	strh	r3, [r4, #4]
}
   d5b86:	4620      	mov	r0, r4
   d5b88:	bd10      	pop	{r4, pc}
   d5b8a:	bf00      	nop
   d5b8c:	2003e570 	.word	0x2003e570

000d5b90 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5b90:	b510      	push	{r4, lr}
   d5b92:	2400      	movs	r4, #0
   d5b94:	7004      	strb	r4, [r0, #0]
   d5b96:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d5b98:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5b9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d5b9e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d5ba0:	dd07      	ble.n	d5bb2 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d5ba2:	3901      	subs	r1, #1
   d5ba4:	4299      	cmp	r1, r3
   d5ba6:	d209      	bcs.n	d5bbc <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d5ba8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d5bac:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d5bae:	2301      	movs	r3, #1
   d5bb0:	e001      	b.n	d5bb6 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d5bb2:	d102      	bne.n	d5bba <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d5bb4:	2302      	movs	r3, #2
   d5bb6:	7003      	strb	r3, [r0, #0]
   d5bb8:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d5bba:	8041      	strh	r1, [r0, #2]
    }
}
   d5bbc:	bd10      	pop	{r4, pc}
	...

000d5bc0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5bc0:	b570      	push	{r4, r5, r6, lr}
   d5bc2:	b086      	sub	sp, #24
   d5bc4:	4616      	mov	r6, r2
   d5bc6:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5bc8:	2300      	movs	r3, #0
   d5bca:	9302      	str	r3, [sp, #8]
   d5bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5bce:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5bd0:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5bd4:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5bd6:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5bda:	4631      	mov	r1, r6
   d5bdc:	4628      	mov	r0, r5
   d5bde:	f7fe fff3 	bl	d4bc8 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d5be2:	4633      	mov	r3, r6
   d5be4:	462a      	mov	r2, r5
   d5be6:	4601      	mov	r1, r0
   d5be8:	a804      	add	r0, sp, #16
   d5bea:	f7ff ffd1 	bl	d5b90 <_ZN11SleepResultC1EiPKtj>
   d5bee:	4b06      	ldr	r3, [pc, #24]	; (d5c08 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d5bf0:	9804      	ldr	r0, [sp, #16]
   d5bf2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d5bf6:	6018      	str	r0, [r3, #0]
   d5bf8:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	889b      	ldrh	r3, [r3, #4]
   d5bfe:	6022      	str	r2, [r4, #0]
}
   d5c00:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d5c02:	80a3      	strh	r3, [r4, #4]
}
   d5c04:	b006      	add	sp, #24
   d5c06:	bd70      	pop	{r4, r5, r6, pc}
   d5c08:	2003e570 	.word	0x2003e570

000d5c0c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5c0c:	4b04      	ldr	r3, [pc, #16]	; (d5c20 <_GLOBAL__sub_I_System+0x14>)
   d5c0e:	2000      	movs	r0, #0
   d5c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5c14:	7018      	strb	r0, [r3, #0]
   d5c16:	8058      	strh	r0, [r3, #2]
   d5c18:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c1a:	f7fe bf89 	b.w	d4b30 <set_system_mode>
   d5c1e:	bf00      	nop
   d5c20:	2003e570 	.word	0x2003e570

000d5c24 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d5c26:	4b14      	ldr	r3, [pc, #80]	; (d5c78 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5c28:	4f14      	ldr	r7, [pc, #80]	; (d5c7c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5c2a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5c2c:	4b14      	ldr	r3, [pc, #80]	; (d5c80 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5c2e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5c30:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5c32:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5c34:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d5c36:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5c38:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5c3a:	d01b      	beq.n	d5c74 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5c3c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5c3e:	ad01      	add	r5, sp, #4
   d5c40:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5c44:	f000 ffbc 	bl	d6bc0 <localtime>
	calendar_time->tm_year += 1900;
   d5c48:	6943      	ldr	r3, [r0, #20]
   d5c4a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5c4e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5c50:	4604      	mov	r4, r0
   d5c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c5a:	f8d4 e000 	ldr.w	lr, [r4]
   d5c5e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5c62:	ad01      	add	r5, sp, #4
   d5c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c66:	4c07      	ldr	r4, [pc, #28]	; (d5c84 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5c6e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5c70:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5c74:	b00b      	add	sp, #44	; 0x2c
   d5c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c78:	2003e5a8 	.word	0x2003e5a8
   d5c7c:	2003e5a4 	.word	0x2003e5a4
   d5c80:	2003e5a0 	.word	0x2003e5a0
   d5c84:	2003e578 	.word	0x2003e578

000d5c88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5c88:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5c8a:	2000      	movs	r0, #0
   d5c8c:	f7fe ffe6 	bl	d4c5c <spark_sync_time_pending>
   d5c90:	b128      	cbz	r0, d5c9e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c92:	f7fe ffcb 	bl	d4c2c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5c96:	f080 0001 	eor.w	r0, r0, #1
   d5c9a:	b2c0      	uxtb	r0, r0
   d5c9c:	bd08      	pop	{r3, pc}
   d5c9e:	2001      	movs	r0, #1
    }
   d5ca0:	bd08      	pop	{r3, pc}

000d5ca2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5ca2:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5ca4:	2000      	movs	r0, #0
   d5ca6:	f7fe fe3b 	bl	d4920 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5caa:	4604      	mov	r4, r0
   d5cac:	b968      	cbnz	r0, d5cca <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5cae:	f7fe ff37 	bl	d4b20 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5cb2:	2801      	cmp	r0, #1
   d5cb4:	d10b      	bne.n	d5cce <_ZN9TimeClass7isValidEv+0x2c>
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	f7fe ff6a 	bl	d4b90 <system_thread_get_state>
   d5cbc:	b938      	cbnz	r0, d5cce <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5cbe:	f7ff ffe3 	bl	d5c88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5cc2:	b930      	cbnz	r0, d5cd2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5cc4:	f7fe ff9a 	bl	d4bfc <spark_process>
   d5cc8:	e7f9      	b.n	d5cbe <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5cca:	2001      	movs	r0, #1
   d5ccc:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5cce:	2000      	movs	r0, #0
   d5cd0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5cd2:	f7ff ffd9 	bl	d5c88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5cd6:	2000      	movs	r0, #0
   d5cd8:	f7fe fe22 	bl	d4920 <HAL_RTC_Time_Is_Valid>
   d5cdc:	3000      	adds	r0, #0
   d5cde:	bf18      	it	ne
   d5ce0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5ce2:	bd10      	pop	{r4, pc}

000d5ce4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5ce4:	b508      	push	{r3, lr}
    (void)isValid();
   d5ce6:	f7ff ffdc 	bl	d5ca2 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5cee:	f7fe bdf7 	b.w	d48e0 <HAL_RTC_Get_UnixTime>
	...

000d5cf4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d5cf4:	b508      	push	{r3, lr}
	return hour(now());
   d5cf6:	f7ff fff5 	bl	d5ce4 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5cfa:	f7ff ff93 	bl	d5c24 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d5cfe:	4b01      	ldr	r3, [pc, #4]	; (d5d04 <_ZN9TimeClass4hourEv+0x10>)
   d5d00:	6898      	ldr	r0, [r3, #8]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	2003e578 	.word	0x2003e578

000d5d08 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d5d08:	b508      	push	{r3, lr}
	return minute(now());
   d5d0a:	f7ff ffeb 	bl	d5ce4 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5d0e:	f7ff ff89 	bl	d5c24 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d5d12:	4b01      	ldr	r3, [pc, #4]	; (d5d18 <_ZN9TimeClass6minuteEv+0x10>)
   d5d14:	6858      	ldr	r0, [r3, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	2003e578 	.word	0x2003e578

000d5d1c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d5d1c:	b508      	push	{r3, lr}
	return second(now());
   d5d1e:	f7ff ffe1 	bl	d5ce4 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5d22:	f7ff ff7f 	bl	d5c24 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d5d26:	4b01      	ldr	r3, [pc, #4]	; (d5d2c <_ZN9TimeClass6secondEv+0x10>)
   d5d28:	6818      	ldr	r0, [r3, #0]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	2003e578 	.word	0x2003e578

000d5d30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d30:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d32:	681a      	ldr	r2, [r3, #0]
   d5d34:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d36:	601a      	str	r2, [r3, #0]
   d5d38:	4770      	bx	lr
   d5d3a:	bf00      	nop
   d5d3c:	2003e22c 	.word	0x2003e22c
   d5d40:	2003e59c 	.word	0x2003e59c

000d5d44 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5d44:	4770      	bx	lr

000d5d46 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d46:	7441      	strb	r1, [r0, #17]
   d5d48:	4770      	bx	lr

000d5d4a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5d4a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5d4c:	7c00      	ldrb	r0, [r0, #16]
   d5d4e:	f7fe feaf 	bl	d4ab0 <HAL_USART_Available_Data_For_Write>
}
   d5d52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d56:	bd08      	pop	{r3, pc}

000d5d58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5d58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5d5a:	7c00      	ldrb	r0, [r0, #16]
   d5d5c:	f7fe fe80 	bl	d4a60 <HAL_USART_Available_Data>
}
   d5d60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d64:	bd08      	pop	{r3, pc}

000d5d66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5d66:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5d68:	7c00      	ldrb	r0, [r0, #16]
   d5d6a:	f7fe fe89 	bl	d4a80 <HAL_USART_Peek_Data>
}
   d5d6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d72:	bf28      	it	cs
   d5d74:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d78:	bd08      	pop	{r3, pc}

000d5d7a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5d7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5d7c:	7c00      	ldrb	r0, [r0, #16]
   d5d7e:	f7fe fe77 	bl	d4a70 <HAL_USART_Read_Data>
}
   d5d82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d86:	bf28      	it	cs
   d5d88:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d8c:	bd08      	pop	{r3, pc}

000d5d8e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5d8e:	7c00      	ldrb	r0, [r0, #16]
   d5d90:	f7fe be7e 	b.w	d4a90 <HAL_USART_Flush_Data>

000d5d94 <_ZN11USARTSerialD0Ev>:
   d5d94:	b510      	push	{r4, lr}
   d5d96:	2114      	movs	r1, #20
   d5d98:	4604      	mov	r4, r0
   d5d9a:	f000 f9ec 	bl	d6176 <_ZdlPvj>
   d5d9e:	4620      	mov	r0, r4
   d5da0:	bd10      	pop	{r4, pc}

000d5da2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5da2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5da4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5da6:	4604      	mov	r4, r0
   d5da8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5daa:	b925      	cbnz	r5, d5db6 <_ZN11USARTSerial5writeEh+0x14>
   d5dac:	7c00      	ldrb	r0, [r0, #16]
   d5dae:	f7fe fe7f 	bl	d4ab0 <HAL_USART_Available_Data_For_Write>
   d5db2:	2800      	cmp	r0, #0
   d5db4:	dd05      	ble.n	d5dc2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5db6:	4631      	mov	r1, r6
   d5db8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5dbe:	f7fe be47 	b.w	d4a50 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5dc2:	4628      	mov	r0, r5
   d5dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5dc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5dc8:	b510      	push	{r4, lr}
   d5dca:	4604      	mov	r4, r0
   d5dcc:	4608      	mov	r0, r1
   d5dce:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	6062      	str	r2, [r4, #4]
   d5dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5dd8:	60a2      	str	r2, [r4, #8]
   d5dda:	4a05      	ldr	r2, [pc, #20]	; (d5df0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5ddc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5dde:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5de0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5de2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5de4:	461a      	mov	r2, r3
   d5de6:	f7fe fe2b 	bl	d4a40 <HAL_USART_Init>
}
   d5dea:	4620      	mov	r0, r4
   d5dec:	bd10      	pop	{r4, pc}
   d5dee:	bf00      	nop
   d5df0:	000d7a48 	.word	0x000d7a48

000d5df4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5df4:	7c00      	ldrb	r0, [r0, #16]
   d5df6:	f7fe be53 	b.w	d4aa0 <HAL_USART_Is_Enabled>
	...

000d5dfc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5dfc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5dfe:	4d0c      	ldr	r5, [pc, #48]	; (d5e30 <_Z22__fetch_global_Serial1v+0x34>)
   d5e00:	6829      	ldr	r1, [r5, #0]
   d5e02:	f011 0401 	ands.w	r4, r1, #1
   d5e06:	d111      	bne.n	d5e2c <_Z22__fetch_global_Serial1v+0x30>
   d5e08:	4628      	mov	r0, r5
   d5e0a:	f7fe f94a 	bl	d40a2 <__cxa_guard_acquire>
   d5e0e:	b168      	cbz	r0, d5e2c <_Z22__fetch_global_Serial1v+0x30>
   d5e10:	4a08      	ldr	r2, [pc, #32]	; (d5e34 <_Z22__fetch_global_Serial1v+0x38>)
   d5e12:	4b09      	ldr	r3, [pc, #36]	; (d5e38 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e14:	4809      	ldr	r0, [pc, #36]	; (d5e3c <_Z22__fetch_global_Serial1v+0x40>)
   d5e16:	4621      	mov	r1, r4
   d5e18:	f7ff ffd6 	bl	d5dc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5e1c:	4628      	mov	r0, r5
   d5e1e:	f7fe f945 	bl	d40ac <__cxa_guard_release>
   d5e22:	4a07      	ldr	r2, [pc, #28]	; (d5e40 <_Z22__fetch_global_Serial1v+0x44>)
   d5e24:	4907      	ldr	r1, [pc, #28]	; (d5e44 <_Z22__fetch_global_Serial1v+0x48>)
   d5e26:	4805      	ldr	r0, [pc, #20]	; (d5e3c <_Z22__fetch_global_Serial1v+0x40>)
   d5e28:	f000 f9a0 	bl	d616c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e2c:	4803      	ldr	r0, [pc, #12]	; (d5e3c <_Z22__fetch_global_Serial1v+0x40>)
   d5e2e:	bd38      	pop	{r3, r4, r5, pc}
   d5e30:	2003e644 	.word	0x2003e644
   d5e34:	2003e648 	.word	0x2003e648
   d5e38:	2003e5c0 	.word	0x2003e5c0
   d5e3c:	2003e5ac 	.word	0x2003e5ac
   d5e40:	2003e2e8 	.word	0x2003e2e8
   d5e44:	000d5d45 	.word	0x000d5d45

000d5e48 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e48:	7441      	strb	r1, [r0, #17]
   d5e4a:	4770      	bx	lr

000d5e4c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5e4c:	4770      	bx	lr

000d5e4e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5e4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5e50:	2100      	movs	r1, #0
   d5e52:	7c00      	ldrb	r0, [r0, #16]
   d5e54:	f7fe fe4c 	bl	d4af0 <HAL_USB_USART_Receive_Data>
}
   d5e58:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e5c:	bf28      	it	cs
   d5e5e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5e62:	bd08      	pop	{r3, pc}

000d5e64 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5e64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5e66:	2101      	movs	r1, #1
   d5e68:	7c00      	ldrb	r0, [r0, #16]
   d5e6a:	f7fe fe41 	bl	d4af0 <HAL_USB_USART_Receive_Data>
}
   d5e6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e72:	bf28      	it	cs
   d5e74:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5e78:	bd08      	pop	{r3, pc}

000d5e7a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5e7a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e7c:	7c00      	ldrb	r0, [r0, #16]
   d5e7e:	f7fe fe2f 	bl	d4ae0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5e82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e86:	bd08      	pop	{r3, pc}

000d5e88 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5e88:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e8a:	7c00      	ldrb	r0, [r0, #16]
   d5e8c:	f7fe fe20 	bl	d4ad0 <HAL_USB_USART_Available_Data>
}
   d5e90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e94:	bd08      	pop	{r3, pc}

000d5e96 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5e96:	7c00      	ldrb	r0, [r0, #16]
   d5e98:	f7fe be3a 	b.w	d4b10 <HAL_USB_USART_Flush_Data>

000d5e9c <_ZN9USBSerialD0Ev>:
   d5e9c:	b510      	push	{r4, lr}
   d5e9e:	2114      	movs	r1, #20
   d5ea0:	4604      	mov	r4, r0
   d5ea2:	f000 f968 	bl	d6176 <_ZdlPvj>
   d5ea6:	4620      	mov	r0, r4
   d5ea8:	bd10      	pop	{r4, pc}

000d5eaa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5eaa:	b538      	push	{r3, r4, r5, lr}
   d5eac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eae:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5eb0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5eb2:	f7fe fe15 	bl	d4ae0 <HAL_USB_USART_Available_Data_For_Write>
   d5eb6:	2800      	cmp	r0, #0
   d5eb8:	dc01      	bgt.n	d5ebe <_ZN9USBSerial5writeEh+0x14>
   d5eba:	7c60      	ldrb	r0, [r4, #17]
   d5ebc:	b128      	cbz	r0, d5eca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5ebe:	4629      	mov	r1, r5
   d5ec0:	7c20      	ldrb	r0, [r4, #16]
   d5ec2:	f7fe fe1d 	bl	d4b00 <HAL_USB_USART_Send_Data>
   d5ec6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5eca:	bd38      	pop	{r3, r4, r5, pc}

000d5ecc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	4604      	mov	r4, r0
   d5ed0:	2300      	movs	r3, #0
   d5ed2:	6063      	str	r3, [r4, #4]
   d5ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ed8:	60a3      	str	r3, [r4, #8]
   d5eda:	4b05      	ldr	r3, [pc, #20]	; (d5ef0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5edc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5ede:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ee0:	4608      	mov	r0, r1
{
  _serial = serial;
   d5ee2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5ee4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5ee6:	4611      	mov	r1, r2
   d5ee8:	f7fe fdea 	bl	d4ac0 <HAL_USB_USART_Init>
}
   d5eec:	4620      	mov	r0, r4
   d5eee:	bd10      	pop	{r4, pc}
   d5ef0:	000d7a78 	.word	0x000d7a78

000d5ef4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ef4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5ef6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ef8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5efa:	2100      	movs	r1, #0
   d5efc:	f000 ff63 	bl	d6dc6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f00:	4620      	mov	r0, r4
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f04:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f06:	4d0e      	ldr	r5, [pc, #56]	; (d5f40 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f08:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f0a:	a801      	add	r0, sp, #4
   d5f0c:	f7ff fff2 	bl	d5ef4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f10:	6829      	ldr	r1, [r5, #0]
   d5f12:	f011 0401 	ands.w	r4, r1, #1
   d5f16:	d110      	bne.n	d5f3a <_Z16_fetch_usbserialv+0x36>
   d5f18:	4628      	mov	r0, r5
   d5f1a:	f7fe f8c2 	bl	d40a2 <__cxa_guard_acquire>
   d5f1e:	b160      	cbz	r0, d5f3a <_Z16_fetch_usbserialv+0x36>
   d5f20:	aa01      	add	r2, sp, #4
   d5f22:	4621      	mov	r1, r4
   d5f24:	4807      	ldr	r0, [pc, #28]	; (d5f44 <_Z16_fetch_usbserialv+0x40>)
   d5f26:	f7ff ffd1 	bl	d5ecc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f2a:	4628      	mov	r0, r5
   d5f2c:	f7fe f8be 	bl	d40ac <__cxa_guard_release>
   d5f30:	4a05      	ldr	r2, [pc, #20]	; (d5f48 <_Z16_fetch_usbserialv+0x44>)
   d5f32:	4906      	ldr	r1, [pc, #24]	; (d5f4c <_Z16_fetch_usbserialv+0x48>)
   d5f34:	4803      	ldr	r0, [pc, #12]	; (d5f44 <_Z16_fetch_usbserialv+0x40>)
   d5f36:	f000 f919 	bl	d616c <__aeabi_atexit>
	return _usbserial;
}
   d5f3a:	4802      	ldr	r0, [pc, #8]	; (d5f44 <_Z16_fetch_usbserialv+0x40>)
   d5f3c:	b007      	add	sp, #28
   d5f3e:	bd30      	pop	{r4, r5, pc}
   d5f40:	2003e6cc 	.word	0x2003e6cc
   d5f44:	2003e6d0 	.word	0x2003e6d0
   d5f48:	2003e2e8 	.word	0x2003e2e8
   d5f4c:	000d5e4d 	.word	0x000d5e4d

000d5f50 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5f50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5f52:	4b0c      	ldr	r3, [pc, #48]	; (d5f84 <serialEventRun+0x34>)
   d5f54:	b133      	cbz	r3, d5f64 <serialEventRun+0x14>
   d5f56:	f7ff ffd5 	bl	d5f04 <_Z16_fetch_usbserialv>
   d5f5a:	6803      	ldr	r3, [r0, #0]
   d5f5c:	691b      	ldr	r3, [r3, #16]
   d5f5e:	4798      	blx	r3
   d5f60:	2800      	cmp	r0, #0
   d5f62:	dc09      	bgt.n	d5f78 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5f64:	4b08      	ldr	r3, [pc, #32]	; (d5f88 <serialEventRun+0x38>)
   d5f66:	b163      	cbz	r3, d5f82 <serialEventRun+0x32>
   d5f68:	f7ff ff48 	bl	d5dfc <_Z22__fetch_global_Serial1v>
   d5f6c:	6803      	ldr	r3, [r0, #0]
   d5f6e:	691b      	ldr	r3, [r3, #16]
   d5f70:	4798      	blx	r3
   d5f72:	2800      	cmp	r0, #0
   d5f74:	dc03      	bgt.n	d5f7e <serialEventRun+0x2e>
   d5f76:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5f78:	f3af 8000 	nop.w
   d5f7c:	e7f2      	b.n	d5f64 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5f7e:	f3af 8000 	nop.w
   d5f82:	bd08      	pop	{r3, pc}
	...

000d5f8c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5f8c:	b508      	push	{r3, lr}
	serialEventRun();
   d5f8e:	f7ff ffdf 	bl	d5f50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5f92:	f7fe fc9d 	bl	d48d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5f96:	4b01      	ldr	r3, [pc, #4]	; (d5f9c <_post_loop+0x10>)
   d5f98:	6018      	str	r0, [r3, #0]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	2003e6e8 	.word	0x2003e6e8

000d5fa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5fa0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fa2:	2300      	movs	r3, #0
   d5fa4:	9300      	str	r3, [sp, #0]
   d5fa6:	461a      	mov	r2, r3
   d5fa8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fac:	f7fe fe02 	bl	d4bb4 <system_ctrl_set_result>
}
   d5fb0:	b003      	add	sp, #12
   d5fb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5fb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5fb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5fba:	8843      	ldrh	r3, [r0, #2]
   d5fbc:	2b0a      	cmp	r3, #10
   d5fbe:	d008      	beq.n	d5fd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5fc0:	2b50      	cmp	r3, #80	; 0x50
   d5fc2:	d109      	bne.n	d5fd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5fc4:	4b09      	ldr	r3, [pc, #36]	; (d5fec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5fc6:	681b      	ldr	r3, [r3, #0]
   d5fc8:	b13b      	cbz	r3, d5fda <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5fca:	b003      	add	sp, #12
   d5fcc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5fd0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5fd2:	f7ff ffe5 	bl	d5fa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5fd6:	e006      	b.n	d5fe6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fd8:	2300      	movs	r3, #0
   d5fda:	9300      	str	r3, [sp, #0]
   d5fdc:	461a      	mov	r2, r3
   d5fde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fe2:	f7fe fde7 	bl	d4bb4 <system_ctrl_set_result>
        break;
    }
}
   d5fe6:	b003      	add	sp, #12
   d5fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   d5fec:	2003e6e4 	.word	0x2003e6e4

000d5ff0 <module_user_init_hook>:

void module_user_init_hook()
{
   d5ff0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5ff2:	f7fe fc65 	bl	d48c0 <HAL_RNG_GetRandomNumber>
   d5ff6:	4604      	mov	r4, r0
    srand(seed);
   d5ff8:	f000 feee 	bl	d6dd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ffc:	4b07      	ldr	r3, [pc, #28]	; (d601c <module_user_init_hook+0x2c>)
   d5ffe:	b113      	cbz	r3, d6006 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6000:	4620      	mov	r0, r4
   d6002:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6006:	2100      	movs	r1, #0
   d6008:	4804      	ldr	r0, [pc, #16]	; (d601c <module_user_init_hook+0x2c>)
   d600a:	f7fe fe2f 	bl	d4c6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d600e:	2100      	movs	r1, #0
   d6010:	4803      	ldr	r0, [pc, #12]	; (d6020 <module_user_init_hook+0x30>)
}
   d6012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6016:	f7fe bdc3 	b.w	d4ba0 <system_ctrl_set_app_request_handler>
   d601a:	bf00      	nop
   d601c:	00000000 	.word	0x00000000
   d6020:	000d5fb9 	.word	0x000d5fb9

000d6024 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6024:	b510      	push	{r4, lr}
   d6026:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6028:	480f      	ldr	r0, [pc, #60]	; (d6068 <pinAvailable+0x44>)
   d602a:	f7ff fd0f 	bl	d5a4c <_ZN8SPIClass9isEnabledEv>
   d602e:	b128      	cbz	r0, d603c <pinAvailable+0x18>
   d6030:	f1a4 030b 	sub.w	r3, r4, #11
   d6034:	2b02      	cmp	r3, #2
   d6036:	d801      	bhi.n	d603c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6038:	2000      	movs	r0, #0
   d603a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d603c:	f000 f854 	bl	d60e8 <_Z19__fetch_global_Wirev>
   d6040:	f7ff fa9c 	bl	d557c <_ZN7TwoWire9isEnabledEv>
   d6044:	b108      	cbz	r0, d604a <pinAvailable+0x26>
   d6046:	2c01      	cmp	r4, #1
   d6048:	d9f6      	bls.n	d6038 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d604a:	f7ff fed7 	bl	d5dfc <_Z22__fetch_global_Serial1v>
   d604e:	f7ff fed1 	bl	d5df4 <_ZN11USARTSerial9isEnabledEv>
   d6052:	b118      	cbz	r0, d605c <pinAvailable+0x38>
   d6054:	f1a4 0309 	sub.w	r3, r4, #9
   d6058:	2b01      	cmp	r3, #1
   d605a:	d9ed      	bls.n	d6038 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d605c:	2c23      	cmp	r4, #35	; 0x23
   d605e:	bf8c      	ite	hi
   d6060:	2000      	movhi	r0, #0
   d6062:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6064:	bd10      	pop	{r4, pc}
   d6066:	bf00      	nop
   d6068:	2003e70c 	.word	0x2003e70c

000d606c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d606c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d606e:	b538      	push	{r3, r4, r5, lr}
   d6070:	4604      	mov	r4, r0
   d6072:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6074:	d80a      	bhi.n	d608c <pinMode+0x20>
   d6076:	29ff      	cmp	r1, #255	; 0xff
   d6078:	d008      	beq.n	d608c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d607a:	f7ff ffd3 	bl	d6024 <pinAvailable>
   d607e:	b128      	cbz	r0, d608c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6080:	4629      	mov	r1, r5
   d6082:	4620      	mov	r0, r4
}
   d6084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6088:	f7fe bc62 	b.w	d4950 <HAL_Pin_Mode>
   d608c:	bd38      	pop	{r3, r4, r5, pc}

000d608e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d608e:	b538      	push	{r3, r4, r5, lr}
   d6090:	4604      	mov	r4, r0
   d6092:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6094:	f7fe fc64 	bl	d4960 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6098:	28ff      	cmp	r0, #255	; 0xff
   d609a:	d010      	beq.n	d60be <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d609c:	2806      	cmp	r0, #6
   d609e:	d804      	bhi.n	d60aa <digitalWrite+0x1c>
   d60a0:	234d      	movs	r3, #77	; 0x4d
   d60a2:	fa23 f000 	lsr.w	r0, r3, r0
   d60a6:	07c3      	lsls	r3, r0, #31
   d60a8:	d409      	bmi.n	d60be <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d60aa:	4620      	mov	r0, r4
   d60ac:	f7ff ffba 	bl	d6024 <pinAvailable>
   d60b0:	b128      	cbz	r0, d60be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60b2:	4629      	mov	r1, r5
   d60b4:	4620      	mov	r0, r4
}
   d60b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60ba:	f7fe bc59 	b.w	d4970 <HAL_GPIO_Write>
   d60be:	bd38      	pop	{r3, r4, r5, pc}

000d60c0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d60c0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d60c2:	4c07      	ldr	r4, [pc, #28]	; (d60e0 <_Z21__fetch_global_EEPROMv+0x20>)
   d60c4:	6823      	ldr	r3, [r4, #0]
   d60c6:	07db      	lsls	r3, r3, #31
   d60c8:	d408      	bmi.n	d60dc <_Z21__fetch_global_EEPROMv+0x1c>
   d60ca:	4620      	mov	r0, r4
   d60cc:	f7fd ffe9 	bl	d40a2 <__cxa_guard_acquire>
   d60d0:	b120      	cbz	r0, d60dc <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d60d2:	f7fe fc0d 	bl	d48f0 <HAL_EEPROM_Init>
   d60d6:	4620      	mov	r0, r4
   d60d8:	f7fd ffe8 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d60dc:	4801      	ldr	r0, [pc, #4]	; (d60e4 <_Z21__fetch_global_EEPROMv+0x24>)
   d60de:	bd10      	pop	{r4, pc}
   d60e0:	2003e6ec 	.word	0x2003e6ec
   d60e4:	2003e6f0 	.word	0x2003e6f0

000d60e8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d60e8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d60ea:	4d0b      	ldr	r5, [pc, #44]	; (d6118 <_Z19__fetch_global_Wirev+0x30>)
   d60ec:	6829      	ldr	r1, [r5, #0]
   d60ee:	f011 0401 	ands.w	r4, r1, #1
   d60f2:	d10f      	bne.n	d6114 <_Z19__fetch_global_Wirev+0x2c>
   d60f4:	4628      	mov	r0, r5
   d60f6:	f7fd ffd4 	bl	d40a2 <__cxa_guard_acquire>
   d60fa:	b158      	cbz	r0, d6114 <_Z19__fetch_global_Wirev+0x2c>
   d60fc:	4621      	mov	r1, r4
   d60fe:	4807      	ldr	r0, [pc, #28]	; (d611c <_Z19__fetch_global_Wirev+0x34>)
   d6100:	f7ff fa2a 	bl	d5558 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6104:	4628      	mov	r0, r5
   d6106:	f7fd ffd1 	bl	d40ac <__cxa_guard_release>
   d610a:	4a05      	ldr	r2, [pc, #20]	; (d6120 <_Z19__fetch_global_Wirev+0x38>)
   d610c:	4905      	ldr	r1, [pc, #20]	; (d6124 <_Z19__fetch_global_Wirev+0x3c>)
   d610e:	4803      	ldr	r0, [pc, #12]	; (d611c <_Z19__fetch_global_Wirev+0x34>)
   d6110:	f000 f82c 	bl	d616c <__aeabi_atexit>
	return wire;
}
   d6114:	4801      	ldr	r0, [pc, #4]	; (d611c <_Z19__fetch_global_Wirev+0x34>)
   d6116:	bd38      	pop	{r3, r4, r5, pc}
   d6118:	2003e6f4 	.word	0x2003e6f4
   d611c:	2003e6f8 	.word	0x2003e6f8
   d6120:	2003e2e8 	.word	0x2003e2e8
   d6124:	000d5501 	.word	0x000d5501

000d6128 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6128:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d612a:	4c0c      	ldr	r4, [pc, #48]	; (d615c <_GLOBAL__sub_I_SPI+0x34>)
   d612c:	4e0c      	ldr	r6, [pc, #48]	; (d6160 <_GLOBAL__sub_I_SPI+0x38>)
   d612e:	4d0d      	ldr	r5, [pc, #52]	; (d6164 <_GLOBAL__sub_I_SPI+0x3c>)
   d6130:	2100      	movs	r1, #0
   d6132:	4620      	mov	r0, r4
   d6134:	f7ff fc76 	bl	d5a24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6138:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d613a:	4c0b      	ldr	r4, [pc, #44]	; (d6168 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d613c:	4632      	mov	r2, r6
   d613e:	4629      	mov	r1, r5
   d6140:	f000 f814 	bl	d616c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6144:	2101      	movs	r1, #1
   d6146:	4620      	mov	r0, r4
   d6148:	f7ff fc6c 	bl	d5a24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d614c:	4632      	mov	r2, r6
   d614e:	4629      	mov	r1, r5
   d6150:	4620      	mov	r0, r4
   d6152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6156:	f000 b809 	b.w	d616c <__aeabi_atexit>
   d615a:	bf00      	nop
   d615c:	2003e70c 	.word	0x2003e70c
   d6160:	2003e2e8 	.word	0x2003e2e8
   d6164:	000d5a15 	.word	0x000d5a15
   d6168:	2003e71c 	.word	0x2003e71c

000d616c <__aeabi_atexit>:
   d616c:	460b      	mov	r3, r1
   d616e:	4601      	mov	r1, r0
   d6170:	4618      	mov	r0, r3
   d6172:	f000 bd17 	b.w	d6ba4 <__cxa_atexit>

000d6176 <_ZdlPvj>:
   d6176:	f7fd bf90 	b.w	d409a <_ZdlPv>

000d617a <_ZSt25__throw_bad_function_callv>:
   d617a:	b508      	push	{r3, lr}
   d617c:	f7fe fdf6 	bl	d4d6c <abort>

000d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6180:	4b24      	ldr	r3, [pc, #144]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d0      	lsls	r0, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4b22      	ldr	r3, [pc, #136]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d1      	lsls	r1, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b20      	ldr	r3, [pc, #128]	; (d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d2      	lsls	r2, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b1e      	ldr	r3, [pc, #120]	; (d6220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d0      	lsls	r0, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b1c      	ldr	r3, [pc, #112]	; (d6224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d1      	lsls	r1, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b1a      	ldr	r3, [pc, #104]	; (d6228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d2      	lsls	r2, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b18      	ldr	r3, [pc, #96]	; (d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d0      	lsls	r0, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b16      	ldr	r3, [pc, #88]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d1      	lsls	r1, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b14      	ldr	r3, [pc, #80]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d2      	lsls	r2, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b12      	ldr	r3, [pc, #72]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d0      	lsls	r0, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b10      	ldr	r3, [pc, #64]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d1      	lsls	r1, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b0e      	ldr	r3, [pc, #56]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d2      	lsls	r2, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4770      	bx	lr
   d6212:	bf00      	nop
   d6214:	2003e758 	.word	0x2003e758
   d6218:	2003e754 	.word	0x2003e754
   d621c:	2003e750 	.word	0x2003e750
   d6220:	2003e74c 	.word	0x2003e74c
   d6224:	2003e748 	.word	0x2003e748
   d6228:	2003e744 	.word	0x2003e744
   d622c:	2003e740 	.word	0x2003e740
   d6230:	2003e73c 	.word	0x2003e73c
   d6234:	2003e738 	.word	0x2003e738
   d6238:	2003e734 	.word	0x2003e734
   d623c:	2003e730 	.word	0x2003e730
   d6240:	2003e72c 	.word	0x2003e72c

000d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6244:	4b18      	ldr	r3, [pc, #96]	; (d62a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6246:	681a      	ldr	r2, [r3, #0]
   d6248:	07d1      	lsls	r1, r2, #31
   d624a:	bf5c      	itt	pl
   d624c:	2201      	movpl	r2, #1
   d624e:	601a      	strpl	r2, [r3, #0]
   d6250:	4b16      	ldr	r3, [pc, #88]	; (d62ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d2      	lsls	r2, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b14      	ldr	r3, [pc, #80]	; (d62b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d0      	lsls	r0, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b12      	ldr	r3, [pc, #72]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d1      	lsls	r1, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b10      	ldr	r3, [pc, #64]	; (d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d2      	lsls	r2, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b0e      	ldr	r3, [pc, #56]	; (d62bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d0      	lsls	r0, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b0c      	ldr	r3, [pc, #48]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d1      	lsls	r1, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b0a      	ldr	r3, [pc, #40]	; (d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d2      	lsls	r2, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4770      	bx	lr
   d62a6:	bf00      	nop
   d62a8:	2003e778 	.word	0x2003e778
   d62ac:	2003e774 	.word	0x2003e774
   d62b0:	2003e770 	.word	0x2003e770
   d62b4:	2003e76c 	.word	0x2003e76c
   d62b8:	2003e768 	.word	0x2003e768
   d62bc:	2003e764 	.word	0x2003e764
   d62c0:	2003e760 	.word	0x2003e760
   d62c4:	2003e75c 	.word	0x2003e75c

000d62c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d62c8:	4b18      	ldr	r3, [pc, #96]	; (d632c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d1      	lsls	r1, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b16      	ldr	r3, [pc, #88]	; (d6330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d2      	lsls	r2, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b14      	ldr	r3, [pc, #80]	; (d6334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d0      	lsls	r0, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4b12      	ldr	r3, [pc, #72]	; (d6338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62ee:	681a      	ldr	r2, [r3, #0]
   d62f0:	07d1      	lsls	r1, r2, #31
   d62f2:	bf5c      	itt	pl
   d62f4:	2201      	movpl	r2, #1
   d62f6:	601a      	strpl	r2, [r3, #0]
   d62f8:	4b10      	ldr	r3, [pc, #64]	; (d633c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62fa:	681a      	ldr	r2, [r3, #0]
   d62fc:	07d2      	lsls	r2, r2, #31
   d62fe:	bf5c      	itt	pl
   d6300:	2201      	movpl	r2, #1
   d6302:	601a      	strpl	r2, [r3, #0]
   d6304:	4b0e      	ldr	r3, [pc, #56]	; (d6340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6306:	681a      	ldr	r2, [r3, #0]
   d6308:	07d0      	lsls	r0, r2, #31
   d630a:	bf5c      	itt	pl
   d630c:	2201      	movpl	r2, #1
   d630e:	601a      	strpl	r2, [r3, #0]
   d6310:	4b0c      	ldr	r3, [pc, #48]	; (d6344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6312:	681a      	ldr	r2, [r3, #0]
   d6314:	07d1      	lsls	r1, r2, #31
   d6316:	bf5c      	itt	pl
   d6318:	2201      	movpl	r2, #1
   d631a:	601a      	strpl	r2, [r3, #0]
   d631c:	4b0a      	ldr	r3, [pc, #40]	; (d6348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d631e:	681a      	ldr	r2, [r3, #0]
   d6320:	07d2      	lsls	r2, r2, #31
   d6322:	bf5c      	itt	pl
   d6324:	2201      	movpl	r2, #1
   d6326:	601a      	strpl	r2, [r3, #0]
   d6328:	4770      	bx	lr
   d632a:	bf00      	nop
   d632c:	2003e798 	.word	0x2003e798
   d6330:	2003e794 	.word	0x2003e794
   d6334:	2003e790 	.word	0x2003e790
   d6338:	2003e78c 	.word	0x2003e78c
   d633c:	2003e788 	.word	0x2003e788
   d6340:	2003e784 	.word	0x2003e784
   d6344:	2003e780 	.word	0x2003e780
   d6348:	2003e77c 	.word	0x2003e77c

000d634c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d634c:	4b24      	ldr	r3, [pc, #144]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d0      	lsls	r0, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b22      	ldr	r3, [pc, #136]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d1      	lsls	r1, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4b20      	ldr	r3, [pc, #128]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d2      	lsls	r2, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4b1e      	ldr	r3, [pc, #120]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	07d0      	lsls	r0, r2, #31
   d6376:	bf5c      	itt	pl
   d6378:	2201      	movpl	r2, #1
   d637a:	601a      	strpl	r2, [r3, #0]
   d637c:	4b1c      	ldr	r3, [pc, #112]	; (d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d1      	lsls	r1, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4b1a      	ldr	r3, [pc, #104]	; (d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d2      	lsls	r2, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b18      	ldr	r3, [pc, #96]	; (d63f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d0      	lsls	r0, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4b16      	ldr	r3, [pc, #88]	; (d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d63a2:	681a      	ldr	r2, [r3, #0]
   d63a4:	07d1      	lsls	r1, r2, #31
   d63a6:	bf5c      	itt	pl
   d63a8:	2201      	movpl	r2, #1
   d63aa:	601a      	strpl	r2, [r3, #0]
   d63ac:	4b14      	ldr	r3, [pc, #80]	; (d6400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d63ae:	681a      	ldr	r2, [r3, #0]
   d63b0:	07d2      	lsls	r2, r2, #31
   d63b2:	bf5c      	itt	pl
   d63b4:	2201      	movpl	r2, #1
   d63b6:	601a      	strpl	r2, [r3, #0]
   d63b8:	4b12      	ldr	r3, [pc, #72]	; (d6404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d63ba:	681a      	ldr	r2, [r3, #0]
   d63bc:	07d0      	lsls	r0, r2, #31
   d63be:	bf5c      	itt	pl
   d63c0:	2201      	movpl	r2, #1
   d63c2:	601a      	strpl	r2, [r3, #0]
   d63c4:	4b10      	ldr	r3, [pc, #64]	; (d6408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d1      	lsls	r1, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b0e      	ldr	r3, [pc, #56]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d2      	lsls	r2, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4770      	bx	lr
   d63de:	bf00      	nop
   d63e0:	2003e7c8 	.word	0x2003e7c8
   d63e4:	2003e7c4 	.word	0x2003e7c4
   d63e8:	2003e7c0 	.word	0x2003e7c0
   d63ec:	2003e7bc 	.word	0x2003e7bc
   d63f0:	2003e7b8 	.word	0x2003e7b8
   d63f4:	2003e7b4 	.word	0x2003e7b4
   d63f8:	2003e7b0 	.word	0x2003e7b0
   d63fc:	2003e7ac 	.word	0x2003e7ac
   d6400:	2003e7a8 	.word	0x2003e7a8
   d6404:	2003e7a4 	.word	0x2003e7a4
   d6408:	2003e7a0 	.word	0x2003e7a0
   d640c:	2003e79c 	.word	0x2003e79c

000d6410 <__aeabi_drsub>:
   d6410:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6414:	e002      	b.n	d641c <__adddf3>
   d6416:	bf00      	nop

000d6418 <__aeabi_dsub>:
   d6418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d641c <__adddf3>:
   d641c:	b530      	push	{r4, r5, lr}
   d641e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6422:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6426:	ea94 0f05 	teq	r4, r5
   d642a:	bf08      	it	eq
   d642c:	ea90 0f02 	teqeq	r0, r2
   d6430:	bf1f      	itttt	ne
   d6432:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6436:	ea55 0c02 	orrsne.w	ip, r5, r2
   d643a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d643e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6442:	f000 80e2 	beq.w	d660a <__adddf3+0x1ee>
   d6446:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d644a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d644e:	bfb8      	it	lt
   d6450:	426d      	neglt	r5, r5
   d6452:	dd0c      	ble.n	d646e <__adddf3+0x52>
   d6454:	442c      	add	r4, r5
   d6456:	ea80 0202 	eor.w	r2, r0, r2
   d645a:	ea81 0303 	eor.w	r3, r1, r3
   d645e:	ea82 0000 	eor.w	r0, r2, r0
   d6462:	ea83 0101 	eor.w	r1, r3, r1
   d6466:	ea80 0202 	eor.w	r2, r0, r2
   d646a:	ea81 0303 	eor.w	r3, r1, r3
   d646e:	2d36      	cmp	r5, #54	; 0x36
   d6470:	bf88      	it	hi
   d6472:	bd30      	pophi	{r4, r5, pc}
   d6474:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6478:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d647c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6480:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6484:	d002      	beq.n	d648c <__adddf3+0x70>
   d6486:	4240      	negs	r0, r0
   d6488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d648c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6490:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6494:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6498:	d002      	beq.n	d64a0 <__adddf3+0x84>
   d649a:	4252      	negs	r2, r2
   d649c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d64a0:	ea94 0f05 	teq	r4, r5
   d64a4:	f000 80a7 	beq.w	d65f6 <__adddf3+0x1da>
   d64a8:	f1a4 0401 	sub.w	r4, r4, #1
   d64ac:	f1d5 0e20 	rsbs	lr, r5, #32
   d64b0:	db0d      	blt.n	d64ce <__adddf3+0xb2>
   d64b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d64b6:	fa22 f205 	lsr.w	r2, r2, r5
   d64ba:	1880      	adds	r0, r0, r2
   d64bc:	f141 0100 	adc.w	r1, r1, #0
   d64c0:	fa03 f20e 	lsl.w	r2, r3, lr
   d64c4:	1880      	adds	r0, r0, r2
   d64c6:	fa43 f305 	asr.w	r3, r3, r5
   d64ca:	4159      	adcs	r1, r3
   d64cc:	e00e      	b.n	d64ec <__adddf3+0xd0>
   d64ce:	f1a5 0520 	sub.w	r5, r5, #32
   d64d2:	f10e 0e20 	add.w	lr, lr, #32
   d64d6:	2a01      	cmp	r2, #1
   d64d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d64dc:	bf28      	it	cs
   d64de:	f04c 0c02 	orrcs.w	ip, ip, #2
   d64e2:	fa43 f305 	asr.w	r3, r3, r5
   d64e6:	18c0      	adds	r0, r0, r3
   d64e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d64ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64f0:	d507      	bpl.n	d6502 <__adddf3+0xe6>
   d64f2:	f04f 0e00 	mov.w	lr, #0
   d64f6:	f1dc 0c00 	rsbs	ip, ip, #0
   d64fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   d64fe:	eb6e 0101 	sbc.w	r1, lr, r1
   d6502:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6506:	d31b      	bcc.n	d6540 <__adddf3+0x124>
   d6508:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d650c:	d30c      	bcc.n	d6528 <__adddf3+0x10c>
   d650e:	0849      	lsrs	r1, r1, #1
   d6510:	ea5f 0030 	movs.w	r0, r0, rrx
   d6514:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6518:	f104 0401 	add.w	r4, r4, #1
   d651c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6520:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6524:	f080 809a 	bcs.w	d665c <__adddf3+0x240>
   d6528:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d652c:	bf08      	it	eq
   d652e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6532:	f150 0000 	adcs.w	r0, r0, #0
   d6536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d653a:	ea41 0105 	orr.w	r1, r1, r5
   d653e:	bd30      	pop	{r4, r5, pc}
   d6540:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6544:	4140      	adcs	r0, r0
   d6546:	eb41 0101 	adc.w	r1, r1, r1
   d654a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d654e:	f1a4 0401 	sub.w	r4, r4, #1
   d6552:	d1e9      	bne.n	d6528 <__adddf3+0x10c>
   d6554:	f091 0f00 	teq	r1, #0
   d6558:	bf04      	itt	eq
   d655a:	4601      	moveq	r1, r0
   d655c:	2000      	moveq	r0, #0
   d655e:	fab1 f381 	clz	r3, r1
   d6562:	bf08      	it	eq
   d6564:	3320      	addeq	r3, #32
   d6566:	f1a3 030b 	sub.w	r3, r3, #11
   d656a:	f1b3 0220 	subs.w	r2, r3, #32
   d656e:	da0c      	bge.n	d658a <__adddf3+0x16e>
   d6570:	320c      	adds	r2, #12
   d6572:	dd08      	ble.n	d6586 <__adddf3+0x16a>
   d6574:	f102 0c14 	add.w	ip, r2, #20
   d6578:	f1c2 020c 	rsb	r2, r2, #12
   d657c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6580:	fa21 f102 	lsr.w	r1, r1, r2
   d6584:	e00c      	b.n	d65a0 <__adddf3+0x184>
   d6586:	f102 0214 	add.w	r2, r2, #20
   d658a:	bfd8      	it	le
   d658c:	f1c2 0c20 	rsble	ip, r2, #32
   d6590:	fa01 f102 	lsl.w	r1, r1, r2
   d6594:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6598:	bfdc      	itt	le
   d659a:	ea41 010c 	orrle.w	r1, r1, ip
   d659e:	4090      	lslle	r0, r2
   d65a0:	1ae4      	subs	r4, r4, r3
   d65a2:	bfa2      	ittt	ge
   d65a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d65a8:	4329      	orrge	r1, r5
   d65aa:	bd30      	popge	{r4, r5, pc}
   d65ac:	ea6f 0404 	mvn.w	r4, r4
   d65b0:	3c1f      	subs	r4, #31
   d65b2:	da1c      	bge.n	d65ee <__adddf3+0x1d2>
   d65b4:	340c      	adds	r4, #12
   d65b6:	dc0e      	bgt.n	d65d6 <__adddf3+0x1ba>
   d65b8:	f104 0414 	add.w	r4, r4, #20
   d65bc:	f1c4 0220 	rsb	r2, r4, #32
   d65c0:	fa20 f004 	lsr.w	r0, r0, r4
   d65c4:	fa01 f302 	lsl.w	r3, r1, r2
   d65c8:	ea40 0003 	orr.w	r0, r0, r3
   d65cc:	fa21 f304 	lsr.w	r3, r1, r4
   d65d0:	ea45 0103 	orr.w	r1, r5, r3
   d65d4:	bd30      	pop	{r4, r5, pc}
   d65d6:	f1c4 040c 	rsb	r4, r4, #12
   d65da:	f1c4 0220 	rsb	r2, r4, #32
   d65de:	fa20 f002 	lsr.w	r0, r0, r2
   d65e2:	fa01 f304 	lsl.w	r3, r1, r4
   d65e6:	ea40 0003 	orr.w	r0, r0, r3
   d65ea:	4629      	mov	r1, r5
   d65ec:	bd30      	pop	{r4, r5, pc}
   d65ee:	fa21 f004 	lsr.w	r0, r1, r4
   d65f2:	4629      	mov	r1, r5
   d65f4:	bd30      	pop	{r4, r5, pc}
   d65f6:	f094 0f00 	teq	r4, #0
   d65fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d65fe:	bf06      	itte	eq
   d6600:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6604:	3401      	addeq	r4, #1
   d6606:	3d01      	subne	r5, #1
   d6608:	e74e      	b.n	d64a8 <__adddf3+0x8c>
   d660a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d660e:	bf18      	it	ne
   d6610:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6614:	d029      	beq.n	d666a <__adddf3+0x24e>
   d6616:	ea94 0f05 	teq	r4, r5
   d661a:	bf08      	it	eq
   d661c:	ea90 0f02 	teqeq	r0, r2
   d6620:	d005      	beq.n	d662e <__adddf3+0x212>
   d6622:	ea54 0c00 	orrs.w	ip, r4, r0
   d6626:	bf04      	itt	eq
   d6628:	4619      	moveq	r1, r3
   d662a:	4610      	moveq	r0, r2
   d662c:	bd30      	pop	{r4, r5, pc}
   d662e:	ea91 0f03 	teq	r1, r3
   d6632:	bf1e      	ittt	ne
   d6634:	2100      	movne	r1, #0
   d6636:	2000      	movne	r0, #0
   d6638:	bd30      	popne	{r4, r5, pc}
   d663a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d663e:	d105      	bne.n	d664c <__adddf3+0x230>
   d6640:	0040      	lsls	r0, r0, #1
   d6642:	4149      	adcs	r1, r1
   d6644:	bf28      	it	cs
   d6646:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d664a:	bd30      	pop	{r4, r5, pc}
   d664c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6650:	bf3c      	itt	cc
   d6652:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6656:	bd30      	popcc	{r4, r5, pc}
   d6658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d665c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6664:	f04f 0000 	mov.w	r0, #0
   d6668:	bd30      	pop	{r4, r5, pc}
   d666a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d666e:	bf1a      	itte	ne
   d6670:	4619      	movne	r1, r3
   d6672:	4610      	movne	r0, r2
   d6674:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6678:	bf1c      	itt	ne
   d667a:	460b      	movne	r3, r1
   d667c:	4602      	movne	r2, r0
   d667e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6682:	bf06      	itte	eq
   d6684:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6688:	ea91 0f03 	teqeq	r1, r3
   d668c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6690:	bd30      	pop	{r4, r5, pc}
   d6692:	bf00      	nop

000d6694 <__aeabi_ui2d>:
   d6694:	f090 0f00 	teq	r0, #0
   d6698:	bf04      	itt	eq
   d669a:	2100      	moveq	r1, #0
   d669c:	4770      	bxeq	lr
   d669e:	b530      	push	{r4, r5, lr}
   d66a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d66a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d66a8:	f04f 0500 	mov.w	r5, #0
   d66ac:	f04f 0100 	mov.w	r1, #0
   d66b0:	e750      	b.n	d6554 <__adddf3+0x138>
   d66b2:	bf00      	nop

000d66b4 <__aeabi_i2d>:
   d66b4:	f090 0f00 	teq	r0, #0
   d66b8:	bf04      	itt	eq
   d66ba:	2100      	moveq	r1, #0
   d66bc:	4770      	bxeq	lr
   d66be:	b530      	push	{r4, r5, lr}
   d66c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d66c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d66c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d66cc:	bf48      	it	mi
   d66ce:	4240      	negmi	r0, r0
   d66d0:	f04f 0100 	mov.w	r1, #0
   d66d4:	e73e      	b.n	d6554 <__adddf3+0x138>
   d66d6:	bf00      	nop

000d66d8 <__aeabi_f2d>:
   d66d8:	0042      	lsls	r2, r0, #1
   d66da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d66de:	ea4f 0131 	mov.w	r1, r1, rrx
   d66e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d66e6:	bf1f      	itttt	ne
   d66e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d66ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d66f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d66f4:	4770      	bxne	lr
   d66f6:	f092 0f00 	teq	r2, #0
   d66fa:	bf14      	ite	ne
   d66fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6700:	4770      	bxeq	lr
   d6702:	b530      	push	{r4, r5, lr}
   d6704:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d670c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6710:	e720      	b.n	d6554 <__adddf3+0x138>
   d6712:	bf00      	nop

000d6714 <__aeabi_ul2d>:
   d6714:	ea50 0201 	orrs.w	r2, r0, r1
   d6718:	bf08      	it	eq
   d671a:	4770      	bxeq	lr
   d671c:	b530      	push	{r4, r5, lr}
   d671e:	f04f 0500 	mov.w	r5, #0
   d6722:	e00a      	b.n	d673a <__aeabi_l2d+0x16>

000d6724 <__aeabi_l2d>:
   d6724:	ea50 0201 	orrs.w	r2, r0, r1
   d6728:	bf08      	it	eq
   d672a:	4770      	bxeq	lr
   d672c:	b530      	push	{r4, r5, lr}
   d672e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6732:	d502      	bpl.n	d673a <__aeabi_l2d+0x16>
   d6734:	4240      	negs	r0, r0
   d6736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d673a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d673e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6742:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6746:	f43f aedc 	beq.w	d6502 <__adddf3+0xe6>
   d674a:	f04f 0203 	mov.w	r2, #3
   d674e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6752:	bf18      	it	ne
   d6754:	3203      	addne	r2, #3
   d6756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d675a:	bf18      	it	ne
   d675c:	3203      	addne	r2, #3
   d675e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6762:	f1c2 0320 	rsb	r3, r2, #32
   d6766:	fa00 fc03 	lsl.w	ip, r0, r3
   d676a:	fa20 f002 	lsr.w	r0, r0, r2
   d676e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6772:	ea40 000e 	orr.w	r0, r0, lr
   d6776:	fa21 f102 	lsr.w	r1, r1, r2
   d677a:	4414      	add	r4, r2
   d677c:	e6c1      	b.n	d6502 <__adddf3+0xe6>
   d677e:	bf00      	nop

000d6780 <__aeabi_dmul>:
   d6780:	b570      	push	{r4, r5, r6, lr}
   d6782:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6786:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d678a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d678e:	bf1d      	ittte	ne
   d6790:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6794:	ea94 0f0c 	teqne	r4, ip
   d6798:	ea95 0f0c 	teqne	r5, ip
   d679c:	f000 f8de 	bleq	d695c <__aeabi_dmul+0x1dc>
   d67a0:	442c      	add	r4, r5
   d67a2:	ea81 0603 	eor.w	r6, r1, r3
   d67a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d67aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d67ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d67b2:	bf18      	it	ne
   d67b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d67b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d67bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d67c0:	d038      	beq.n	d6834 <__aeabi_dmul+0xb4>
   d67c2:	fba0 ce02 	umull	ip, lr, r0, r2
   d67c6:	f04f 0500 	mov.w	r5, #0
   d67ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   d67ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d67d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d67d6:	f04f 0600 	mov.w	r6, #0
   d67da:	fbe1 5603 	umlal	r5, r6, r1, r3
   d67de:	f09c 0f00 	teq	ip, #0
   d67e2:	bf18      	it	ne
   d67e4:	f04e 0e01 	orrne.w	lr, lr, #1
   d67e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d67ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d67f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d67f4:	d204      	bcs.n	d6800 <__aeabi_dmul+0x80>
   d67f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d67fa:	416d      	adcs	r5, r5
   d67fc:	eb46 0606 	adc.w	r6, r6, r6
   d6800:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6804:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6808:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d680c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6810:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6814:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6818:	bf88      	it	hi
   d681a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d681e:	d81e      	bhi.n	d685e <__aeabi_dmul+0xde>
   d6820:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6824:	bf08      	it	eq
   d6826:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d682a:	f150 0000 	adcs.w	r0, r0, #0
   d682e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6832:	bd70      	pop	{r4, r5, r6, pc}
   d6834:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6838:	ea46 0101 	orr.w	r1, r6, r1
   d683c:	ea40 0002 	orr.w	r0, r0, r2
   d6840:	ea81 0103 	eor.w	r1, r1, r3
   d6844:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6848:	bfc2      	ittt	gt
   d684a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d684e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6852:	bd70      	popgt	{r4, r5, r6, pc}
   d6854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6858:	f04f 0e00 	mov.w	lr, #0
   d685c:	3c01      	subs	r4, #1
   d685e:	f300 80ab 	bgt.w	d69b8 <__aeabi_dmul+0x238>
   d6862:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6866:	bfde      	ittt	le
   d6868:	2000      	movle	r0, #0
   d686a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d686e:	bd70      	pople	{r4, r5, r6, pc}
   d6870:	f1c4 0400 	rsb	r4, r4, #0
   d6874:	3c20      	subs	r4, #32
   d6876:	da35      	bge.n	d68e4 <__aeabi_dmul+0x164>
   d6878:	340c      	adds	r4, #12
   d687a:	dc1b      	bgt.n	d68b4 <__aeabi_dmul+0x134>
   d687c:	f104 0414 	add.w	r4, r4, #20
   d6880:	f1c4 0520 	rsb	r5, r4, #32
   d6884:	fa00 f305 	lsl.w	r3, r0, r5
   d6888:	fa20 f004 	lsr.w	r0, r0, r4
   d688c:	fa01 f205 	lsl.w	r2, r1, r5
   d6890:	ea40 0002 	orr.w	r0, r0, r2
   d6894:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d689c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d68a0:	fa21 f604 	lsr.w	r6, r1, r4
   d68a4:	eb42 0106 	adc.w	r1, r2, r6
   d68a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d68ac:	bf08      	it	eq
   d68ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d68b2:	bd70      	pop	{r4, r5, r6, pc}
   d68b4:	f1c4 040c 	rsb	r4, r4, #12
   d68b8:	f1c4 0520 	rsb	r5, r4, #32
   d68bc:	fa00 f304 	lsl.w	r3, r0, r4
   d68c0:	fa20 f005 	lsr.w	r0, r0, r5
   d68c4:	fa01 f204 	lsl.w	r2, r1, r4
   d68c8:	ea40 0002 	orr.w	r0, r0, r2
   d68cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d68d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d68d4:	f141 0100 	adc.w	r1, r1, #0
   d68d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d68dc:	bf08      	it	eq
   d68de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d68e2:	bd70      	pop	{r4, r5, r6, pc}
   d68e4:	f1c4 0520 	rsb	r5, r4, #32
   d68e8:	fa00 f205 	lsl.w	r2, r0, r5
   d68ec:	ea4e 0e02 	orr.w	lr, lr, r2
   d68f0:	fa20 f304 	lsr.w	r3, r0, r4
   d68f4:	fa01 f205 	lsl.w	r2, r1, r5
   d68f8:	ea43 0302 	orr.w	r3, r3, r2
   d68fc:	fa21 f004 	lsr.w	r0, r1, r4
   d6900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6904:	fa21 f204 	lsr.w	r2, r1, r4
   d6908:	ea20 0002 	bic.w	r0, r0, r2
   d690c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6914:	bf08      	it	eq
   d6916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d691a:	bd70      	pop	{r4, r5, r6, pc}
   d691c:	f094 0f00 	teq	r4, #0
   d6920:	d10f      	bne.n	d6942 <__aeabi_dmul+0x1c2>
   d6922:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6926:	0040      	lsls	r0, r0, #1
   d6928:	eb41 0101 	adc.w	r1, r1, r1
   d692c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6930:	bf08      	it	eq
   d6932:	3c01      	subeq	r4, #1
   d6934:	d0f7      	beq.n	d6926 <__aeabi_dmul+0x1a6>
   d6936:	ea41 0106 	orr.w	r1, r1, r6
   d693a:	f095 0f00 	teq	r5, #0
   d693e:	bf18      	it	ne
   d6940:	4770      	bxne	lr
   d6942:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6946:	0052      	lsls	r2, r2, #1
   d6948:	eb43 0303 	adc.w	r3, r3, r3
   d694c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6950:	bf08      	it	eq
   d6952:	3d01      	subeq	r5, #1
   d6954:	d0f7      	beq.n	d6946 <__aeabi_dmul+0x1c6>
   d6956:	ea43 0306 	orr.w	r3, r3, r6
   d695a:	4770      	bx	lr
   d695c:	ea94 0f0c 	teq	r4, ip
   d6960:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6964:	bf18      	it	ne
   d6966:	ea95 0f0c 	teqne	r5, ip
   d696a:	d00c      	beq.n	d6986 <__aeabi_dmul+0x206>
   d696c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6970:	bf18      	it	ne
   d6972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6976:	d1d1      	bne.n	d691c <__aeabi_dmul+0x19c>
   d6978:	ea81 0103 	eor.w	r1, r1, r3
   d697c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6980:	f04f 0000 	mov.w	r0, #0
   d6984:	bd70      	pop	{r4, r5, r6, pc}
   d6986:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d698a:	bf06      	itte	eq
   d698c:	4610      	moveq	r0, r2
   d698e:	4619      	moveq	r1, r3
   d6990:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6994:	d019      	beq.n	d69ca <__aeabi_dmul+0x24a>
   d6996:	ea94 0f0c 	teq	r4, ip
   d699a:	d102      	bne.n	d69a2 <__aeabi_dmul+0x222>
   d699c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d69a0:	d113      	bne.n	d69ca <__aeabi_dmul+0x24a>
   d69a2:	ea95 0f0c 	teq	r5, ip
   d69a6:	d105      	bne.n	d69b4 <__aeabi_dmul+0x234>
   d69a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d69ac:	bf1c      	itt	ne
   d69ae:	4610      	movne	r0, r2
   d69b0:	4619      	movne	r1, r3
   d69b2:	d10a      	bne.n	d69ca <__aeabi_dmul+0x24a>
   d69b4:	ea81 0103 	eor.w	r1, r1, r3
   d69b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d69c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d69c4:	f04f 0000 	mov.w	r0, #0
   d69c8:	bd70      	pop	{r4, r5, r6, pc}
   d69ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d69ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d69d2:	bd70      	pop	{r4, r5, r6, pc}

000d69d4 <__aeabi_ddiv>:
   d69d4:	b570      	push	{r4, r5, r6, lr}
   d69d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d69da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d69de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d69e2:	bf1d      	ittte	ne
   d69e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d69e8:	ea94 0f0c 	teqne	r4, ip
   d69ec:	ea95 0f0c 	teqne	r5, ip
   d69f0:	f000 f8a7 	bleq	d6b42 <__aeabi_ddiv+0x16e>
   d69f4:	eba4 0405 	sub.w	r4, r4, r5
   d69f8:	ea81 0e03 	eor.w	lr, r1, r3
   d69fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6a04:	f000 8088 	beq.w	d6b18 <__aeabi_ddiv+0x144>
   d6a08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6a0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6a10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6a14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6a18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6a1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6a20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6a24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6a28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6a2c:	429d      	cmp	r5, r3
   d6a2e:	bf08      	it	eq
   d6a30:	4296      	cmpeq	r6, r2
   d6a32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6a36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6a3a:	d202      	bcs.n	d6a42 <__aeabi_ddiv+0x6e>
   d6a3c:	085b      	lsrs	r3, r3, #1
   d6a3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a42:	1ab6      	subs	r6, r6, r2
   d6a44:	eb65 0503 	sbc.w	r5, r5, r3
   d6a48:	085b      	lsrs	r3, r3, #1
   d6a4a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6a52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6a56:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a5e:	bf22      	ittt	cs
   d6a60:	1ab6      	subcs	r6, r6, r2
   d6a62:	4675      	movcs	r5, lr
   d6a64:	ea40 000c 	orrcs.w	r0, r0, ip
   d6a68:	085b      	lsrs	r3, r3, #1
   d6a6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a76:	bf22      	ittt	cs
   d6a78:	1ab6      	subcs	r6, r6, r2
   d6a7a:	4675      	movcs	r5, lr
   d6a7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6a80:	085b      	lsrs	r3, r3, #1
   d6a82:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a86:	ebb6 0e02 	subs.w	lr, r6, r2
   d6a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6a8e:	bf22      	ittt	cs
   d6a90:	1ab6      	subcs	r6, r6, r2
   d6a92:	4675      	movcs	r5, lr
   d6a94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6a98:	085b      	lsrs	r3, r3, #1
   d6a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6aa6:	bf22      	ittt	cs
   d6aa8:	1ab6      	subcs	r6, r6, r2
   d6aaa:	4675      	movcs	r5, lr
   d6aac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6ab0:	ea55 0e06 	orrs.w	lr, r5, r6
   d6ab4:	d018      	beq.n	d6ae8 <__aeabi_ddiv+0x114>
   d6ab6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6aba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6abe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6ac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6ac6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6aca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6ace:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6ad2:	d1c0      	bne.n	d6a56 <__aeabi_ddiv+0x82>
   d6ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ad8:	d10b      	bne.n	d6af2 <__aeabi_ddiv+0x11e>
   d6ada:	ea41 0100 	orr.w	r1, r1, r0
   d6ade:	f04f 0000 	mov.w	r0, #0
   d6ae2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6ae6:	e7b6      	b.n	d6a56 <__aeabi_ddiv+0x82>
   d6ae8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6aec:	bf04      	itt	eq
   d6aee:	4301      	orreq	r1, r0
   d6af0:	2000      	moveq	r0, #0
   d6af2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6af6:	bf88      	it	hi
   d6af8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6afc:	f63f aeaf 	bhi.w	d685e <__aeabi_dmul+0xde>
   d6b00:	ebb5 0c03 	subs.w	ip, r5, r3
   d6b04:	bf04      	itt	eq
   d6b06:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6b0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6b0e:	f150 0000 	adcs.w	r0, r0, #0
   d6b12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b16:	bd70      	pop	{r4, r5, r6, pc}
   d6b18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6b1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6b20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6b24:	bfc2      	ittt	gt
   d6b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6b2e:	bd70      	popgt	{r4, r5, r6, pc}
   d6b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b34:	f04f 0e00 	mov.w	lr, #0
   d6b38:	3c01      	subs	r4, #1
   d6b3a:	e690      	b.n	d685e <__aeabi_dmul+0xde>
   d6b3c:	ea45 0e06 	orr.w	lr, r5, r6
   d6b40:	e68d      	b.n	d685e <__aeabi_dmul+0xde>
   d6b42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6b46:	ea94 0f0c 	teq	r4, ip
   d6b4a:	bf08      	it	eq
   d6b4c:	ea95 0f0c 	teqeq	r5, ip
   d6b50:	f43f af3b 	beq.w	d69ca <__aeabi_dmul+0x24a>
   d6b54:	ea94 0f0c 	teq	r4, ip
   d6b58:	d10a      	bne.n	d6b70 <__aeabi_ddiv+0x19c>
   d6b5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6b5e:	f47f af34 	bne.w	d69ca <__aeabi_dmul+0x24a>
   d6b62:	ea95 0f0c 	teq	r5, ip
   d6b66:	f47f af25 	bne.w	d69b4 <__aeabi_dmul+0x234>
   d6b6a:	4610      	mov	r0, r2
   d6b6c:	4619      	mov	r1, r3
   d6b6e:	e72c      	b.n	d69ca <__aeabi_dmul+0x24a>
   d6b70:	ea95 0f0c 	teq	r5, ip
   d6b74:	d106      	bne.n	d6b84 <__aeabi_ddiv+0x1b0>
   d6b76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6b7a:	f43f aefd 	beq.w	d6978 <__aeabi_dmul+0x1f8>
   d6b7e:	4610      	mov	r0, r2
   d6b80:	4619      	mov	r1, r3
   d6b82:	e722      	b.n	d69ca <__aeabi_dmul+0x24a>
   d6b84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6b88:	bf18      	it	ne
   d6b8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6b8e:	f47f aec5 	bne.w	d691c <__aeabi_dmul+0x19c>
   d6b92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6b96:	f47f af0d 	bne.w	d69b4 <__aeabi_dmul+0x234>
   d6b9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6b9e:	f47f aeeb 	bne.w	d6978 <__aeabi_dmul+0x1f8>
   d6ba2:	e712      	b.n	d69ca <__aeabi_dmul+0x24a>

000d6ba4 <__cxa_atexit>:
   d6ba4:	b510      	push	{r4, lr}
   d6ba6:	4c05      	ldr	r4, [pc, #20]	; (d6bbc <__cxa_atexit+0x18>)
   d6ba8:	4613      	mov	r3, r2
   d6baa:	b12c      	cbz	r4, d6bb8 <__cxa_atexit+0x14>
   d6bac:	460a      	mov	r2, r1
   d6bae:	4601      	mov	r1, r0
   d6bb0:	2002      	movs	r0, #2
   d6bb2:	f3af 8000 	nop.w
   d6bb6:	bd10      	pop	{r4, pc}
   d6bb8:	4620      	mov	r0, r4
   d6bba:	bd10      	pop	{r4, pc}
   d6bbc:	00000000 	.word	0x00000000

000d6bc0 <localtime>:
   d6bc0:	b538      	push	{r3, r4, r5, lr}
   d6bc2:	4b07      	ldr	r3, [pc, #28]	; (d6be0 <localtime+0x20>)
   d6bc4:	681c      	ldr	r4, [r3, #0]
   d6bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6bc8:	4605      	mov	r5, r0
   d6bca:	b91b      	cbnz	r3, d6bd4 <localtime+0x14>
   d6bcc:	2024      	movs	r0, #36	; 0x24
   d6bce:	f7fe f8a5 	bl	d4d1c <malloc>
   d6bd2:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6bd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6bd6:	4628      	mov	r0, r5
   d6bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6bdc:	f000 b802 	b.w	d6be4 <localtime_r>
   d6be0:	2003e294 	.word	0x2003e294

000d6be4 <localtime_r>:
   d6be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6be8:	460c      	mov	r4, r1
   d6bea:	4680      	mov	r8, r0
   d6bec:	f000 fc9c 	bl	d7528 <__gettzinfo>
   d6bf0:	4621      	mov	r1, r4
   d6bf2:	4607      	mov	r7, r0
   d6bf4:	4640      	mov	r0, r8
   d6bf6:	f000 fc9b 	bl	d7530 <gmtime_r>
   d6bfa:	6946      	ldr	r6, [r0, #20]
   d6bfc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6c00:	07b3      	lsls	r3, r6, #30
   d6c02:	4604      	mov	r4, r0
   d6c04:	d105      	bne.n	d6c12 <localtime_r+0x2e>
   d6c06:	2264      	movs	r2, #100	; 0x64
   d6c08:	fb96 f3f2 	sdiv	r3, r6, r2
   d6c0c:	fb02 6313 	mls	r3, r2, r3, r6
   d6c10:	b94b      	cbnz	r3, d6c26 <localtime_r+0x42>
   d6c12:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6c16:	fb96 f3f5 	sdiv	r3, r6, r5
   d6c1a:	fb05 6513 	mls	r5, r5, r3, r6
   d6c1e:	fab5 f385 	clz	r3, r5
   d6c22:	095b      	lsrs	r3, r3, #5
   d6c24:	e000      	b.n	d6c28 <localtime_r+0x44>
   d6c26:	2301      	movs	r3, #1
   d6c28:	4a5f      	ldr	r2, [pc, #380]	; (d6da8 <localtime_r+0x1c4>)
   d6c2a:	2530      	movs	r5, #48	; 0x30
   d6c2c:	fb05 2503 	mla	r5, r5, r3, r2
   d6c30:	f000 faae 	bl	d7190 <__tz_lock>
   d6c34:	f000 faae 	bl	d7194 <_tzset_unlocked>
   d6c38:	4b5c      	ldr	r3, [pc, #368]	; (d6dac <localtime_r+0x1c8>)
   d6c3a:	681b      	ldr	r3, [r3, #0]
   d6c3c:	b1f3      	cbz	r3, d6c7c <localtime_r+0x98>
   d6c3e:	687b      	ldr	r3, [r7, #4]
   d6c40:	429e      	cmp	r6, r3
   d6c42:	d105      	bne.n	d6c50 <localtime_r+0x6c>
   d6c44:	6839      	ldr	r1, [r7, #0]
   d6c46:	f8d8 3000 	ldr.w	r3, [r8]
   d6c4a:	69fa      	ldr	r2, [r7, #28]
   d6c4c:	b941      	cbnz	r1, d6c60 <localtime_r+0x7c>
   d6c4e:	e00a      	b.n	d6c66 <localtime_r+0x82>
   d6c50:	4630      	mov	r0, r6
   d6c52:	f000 f9f5 	bl	d7040 <__tzcalc_limits>
   d6c56:	2800      	cmp	r0, #0
   d6c58:	d1f4      	bne.n	d6c44 <localtime_r+0x60>
   d6c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6c5e:	e00d      	b.n	d6c7c <localtime_r+0x98>
   d6c60:	4293      	cmp	r3, r2
   d6c62:	db08      	blt.n	d6c76 <localtime_r+0x92>
   d6c64:	e001      	b.n	d6c6a <localtime_r+0x86>
   d6c66:	4293      	cmp	r3, r2
   d6c68:	da07      	bge.n	d6c7a <localtime_r+0x96>
   d6c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6c6c:	4293      	cmp	r3, r2
   d6c6e:	bfac      	ite	ge
   d6c70:	2300      	movge	r3, #0
   d6c72:	2301      	movlt	r3, #1
   d6c74:	e002      	b.n	d6c7c <localtime_r+0x98>
   d6c76:	2300      	movs	r3, #0
   d6c78:	e000      	b.n	d6c7c <localtime_r+0x98>
   d6c7a:	2301      	movs	r3, #1
   d6c7c:	6223      	str	r3, [r4, #32]
   d6c7e:	6a23      	ldr	r3, [r4, #32]
   d6c80:	2b01      	cmp	r3, #1
   d6c82:	bf0c      	ite	eq
   d6c84:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6c86:	6a39      	ldrne	r1, [r7, #32]
   d6c88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6c8c:	203c      	movs	r0, #60	; 0x3c
   d6c8e:	fb91 f6f3 	sdiv	r6, r1, r3
   d6c92:	fb03 1316 	mls	r3, r3, r6, r1
   d6c96:	6861      	ldr	r1, [r4, #4]
   d6c98:	fb93 f2f0 	sdiv	r2, r3, r0
   d6c9c:	fb00 3012 	mls	r0, r0, r2, r3
   d6ca0:	6823      	ldr	r3, [r4, #0]
   d6ca2:	1a89      	subs	r1, r1, r2
   d6ca4:	68a2      	ldr	r2, [r4, #8]
   d6ca6:	6061      	str	r1, [r4, #4]
   d6ca8:	1a1b      	subs	r3, r3, r0
   d6caa:	1b92      	subs	r2, r2, r6
   d6cac:	2b3b      	cmp	r3, #59	; 0x3b
   d6cae:	6023      	str	r3, [r4, #0]
   d6cb0:	60a2      	str	r2, [r4, #8]
   d6cb2:	dd03      	ble.n	d6cbc <localtime_r+0xd8>
   d6cb4:	3101      	adds	r1, #1
   d6cb6:	6061      	str	r1, [r4, #4]
   d6cb8:	3b3c      	subs	r3, #60	; 0x3c
   d6cba:	e004      	b.n	d6cc6 <localtime_r+0xe2>
   d6cbc:	2b00      	cmp	r3, #0
   d6cbe:	da03      	bge.n	d6cc8 <localtime_r+0xe4>
   d6cc0:	3901      	subs	r1, #1
   d6cc2:	6061      	str	r1, [r4, #4]
   d6cc4:	333c      	adds	r3, #60	; 0x3c
   d6cc6:	6023      	str	r3, [r4, #0]
   d6cc8:	6863      	ldr	r3, [r4, #4]
   d6cca:	2b3b      	cmp	r3, #59	; 0x3b
   d6ccc:	dd03      	ble.n	d6cd6 <localtime_r+0xf2>
   d6cce:	3201      	adds	r2, #1
   d6cd0:	60a2      	str	r2, [r4, #8]
   d6cd2:	3b3c      	subs	r3, #60	; 0x3c
   d6cd4:	e004      	b.n	d6ce0 <localtime_r+0xfc>
   d6cd6:	2b00      	cmp	r3, #0
   d6cd8:	da03      	bge.n	d6ce2 <localtime_r+0xfe>
   d6cda:	3a01      	subs	r2, #1
   d6cdc:	60a2      	str	r2, [r4, #8]
   d6cde:	333c      	adds	r3, #60	; 0x3c
   d6ce0:	6063      	str	r3, [r4, #4]
   d6ce2:	68a3      	ldr	r3, [r4, #8]
   d6ce4:	2b17      	cmp	r3, #23
   d6ce6:	dd22      	ble.n	d6d2e <localtime_r+0x14a>
   d6ce8:	69e2      	ldr	r2, [r4, #28]
   d6cea:	3201      	adds	r2, #1
   d6cec:	61e2      	str	r2, [r4, #28]
   d6cee:	69a2      	ldr	r2, [r4, #24]
   d6cf0:	3201      	adds	r2, #1
   d6cf2:	2a06      	cmp	r2, #6
   d6cf4:	bfc8      	it	gt
   d6cf6:	2200      	movgt	r2, #0
   d6cf8:	61a2      	str	r2, [r4, #24]
   d6cfa:	68e2      	ldr	r2, [r4, #12]
   d6cfc:	3b18      	subs	r3, #24
   d6cfe:	3201      	adds	r2, #1
   d6d00:	60a3      	str	r3, [r4, #8]
   d6d02:	6923      	ldr	r3, [r4, #16]
   d6d04:	60e2      	str	r2, [r4, #12]
   d6d06:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6d0a:	428a      	cmp	r2, r1
   d6d0c:	dd46      	ble.n	d6d9c <localtime_r+0x1b8>
   d6d0e:	3301      	adds	r3, #1
   d6d10:	2b0c      	cmp	r3, #12
   d6d12:	bf0c      	ite	eq
   d6d14:	6963      	ldreq	r3, [r4, #20]
   d6d16:	6123      	strne	r3, [r4, #16]
   d6d18:	eba2 0201 	sub.w	r2, r2, r1
   d6d1c:	60e2      	str	r2, [r4, #12]
   d6d1e:	bf01      	itttt	eq
   d6d20:	3301      	addeq	r3, #1
   d6d22:	2200      	moveq	r2, #0
   d6d24:	6122      	streq	r2, [r4, #16]
   d6d26:	6163      	streq	r3, [r4, #20]
   d6d28:	bf08      	it	eq
   d6d2a:	61e2      	streq	r2, [r4, #28]
   d6d2c:	e036      	b.n	d6d9c <localtime_r+0x1b8>
   d6d2e:	2b00      	cmp	r3, #0
   d6d30:	da34      	bge.n	d6d9c <localtime_r+0x1b8>
   d6d32:	69e2      	ldr	r2, [r4, #28]
   d6d34:	3a01      	subs	r2, #1
   d6d36:	61e2      	str	r2, [r4, #28]
   d6d38:	69a2      	ldr	r2, [r4, #24]
   d6d3a:	3a01      	subs	r2, #1
   d6d3c:	bf48      	it	mi
   d6d3e:	2206      	movmi	r2, #6
   d6d40:	61a2      	str	r2, [r4, #24]
   d6d42:	68e2      	ldr	r2, [r4, #12]
   d6d44:	3318      	adds	r3, #24
   d6d46:	3a01      	subs	r2, #1
   d6d48:	60e2      	str	r2, [r4, #12]
   d6d4a:	60a3      	str	r3, [r4, #8]
   d6d4c:	bb32      	cbnz	r2, d6d9c <localtime_r+0x1b8>
   d6d4e:	6923      	ldr	r3, [r4, #16]
   d6d50:	3b01      	subs	r3, #1
   d6d52:	d401      	bmi.n	d6d58 <localtime_r+0x174>
   d6d54:	6123      	str	r3, [r4, #16]
   d6d56:	e01d      	b.n	d6d94 <localtime_r+0x1b0>
   d6d58:	230b      	movs	r3, #11
   d6d5a:	6123      	str	r3, [r4, #16]
   d6d5c:	6963      	ldr	r3, [r4, #20]
   d6d5e:	1e5a      	subs	r2, r3, #1
   d6d60:	f012 0f03 	tst.w	r2, #3
   d6d64:	6162      	str	r2, [r4, #20]
   d6d66:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6d6a:	d105      	bne.n	d6d78 <localtime_r+0x194>
   d6d6c:	2164      	movs	r1, #100	; 0x64
   d6d6e:	fb93 f2f1 	sdiv	r2, r3, r1
   d6d72:	fb01 3212 	mls	r2, r1, r2, r3
   d6d76:	b94a      	cbnz	r2, d6d8c <localtime_r+0x1a8>
   d6d78:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6d7c:	fb93 f2f1 	sdiv	r2, r3, r1
   d6d80:	fb01 3312 	mls	r3, r1, r2, r3
   d6d84:	fab3 f383 	clz	r3, r3
   d6d88:	095b      	lsrs	r3, r3, #5
   d6d8a:	e000      	b.n	d6d8e <localtime_r+0x1aa>
   d6d8c:	2301      	movs	r3, #1
   d6d8e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6d92:	61e3      	str	r3, [r4, #28]
   d6d94:	6923      	ldr	r3, [r4, #16]
   d6d96:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6d9a:	60e3      	str	r3, [r4, #12]
   d6d9c:	f000 f9f9 	bl	d7192 <__tz_unlock>
   d6da0:	4620      	mov	r0, r4
   d6da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6da6:	bf00      	nop
   d6da8:	000d7c08 	.word	0x000d7c08
   d6dac:	2003e7e8 	.word	0x2003e7e8

000d6db0 <memcpy>:
   d6db0:	b510      	push	{r4, lr}
   d6db2:	1e43      	subs	r3, r0, #1
   d6db4:	440a      	add	r2, r1
   d6db6:	4291      	cmp	r1, r2
   d6db8:	d004      	beq.n	d6dc4 <memcpy+0x14>
   d6dba:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6dc2:	e7f8      	b.n	d6db6 <memcpy+0x6>
   d6dc4:	bd10      	pop	{r4, pc}

000d6dc6 <memset>:
   d6dc6:	4402      	add	r2, r0
   d6dc8:	4603      	mov	r3, r0
   d6dca:	4293      	cmp	r3, r2
   d6dcc:	d002      	beq.n	d6dd4 <memset+0xe>
   d6dce:	f803 1b01 	strb.w	r1, [r3], #1
   d6dd2:	e7fa      	b.n	d6dca <memset+0x4>
   d6dd4:	4770      	bx	lr
	...

000d6dd8 <srand>:
   d6dd8:	b538      	push	{r3, r4, r5, lr}
   d6dda:	4b12      	ldr	r3, [pc, #72]	; (d6e24 <srand+0x4c>)
   d6ddc:	681c      	ldr	r4, [r3, #0]
   d6dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6de0:	4605      	mov	r5, r0
   d6de2:	b9d3      	cbnz	r3, d6e1a <srand+0x42>
   d6de4:	2018      	movs	r0, #24
   d6de6:	f7fd ff99 	bl	d4d1c <malloc>
   d6dea:	f243 330e 	movw	r3, #13070	; 0x330e
   d6dee:	63a0      	str	r0, [r4, #56]	; 0x38
   d6df0:	8003      	strh	r3, [r0, #0]
   d6df2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6df6:	8043      	strh	r3, [r0, #2]
   d6df8:	f241 2334 	movw	r3, #4660	; 0x1234
   d6dfc:	8083      	strh	r3, [r0, #4]
   d6dfe:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e02:	80c3      	strh	r3, [r0, #6]
   d6e04:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e08:	8103      	strh	r3, [r0, #8]
   d6e0a:	2305      	movs	r3, #5
   d6e0c:	8143      	strh	r3, [r0, #10]
   d6e0e:	230b      	movs	r3, #11
   d6e10:	8183      	strh	r3, [r0, #12]
   d6e12:	2201      	movs	r2, #1
   d6e14:	2300      	movs	r3, #0
   d6e16:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e1c:	2200      	movs	r2, #0
   d6e1e:	611d      	str	r5, [r3, #16]
   d6e20:	615a      	str	r2, [r3, #20]
   d6e22:	bd38      	pop	{r3, r4, r5, pc}
   d6e24:	2003e294 	.word	0x2003e294

000d6e28 <rand>:
   d6e28:	4b19      	ldr	r3, [pc, #100]	; (d6e90 <rand+0x68>)
   d6e2a:	b510      	push	{r4, lr}
   d6e2c:	681c      	ldr	r4, [r3, #0]
   d6e2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e30:	b9d3      	cbnz	r3, d6e68 <rand+0x40>
   d6e32:	2018      	movs	r0, #24
   d6e34:	f7fd ff72 	bl	d4d1c <malloc>
   d6e38:	f243 330e 	movw	r3, #13070	; 0x330e
   d6e3c:	63a0      	str	r0, [r4, #56]	; 0x38
   d6e3e:	8003      	strh	r3, [r0, #0]
   d6e40:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e44:	8043      	strh	r3, [r0, #2]
   d6e46:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e4a:	8083      	strh	r3, [r0, #4]
   d6e4c:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e50:	80c3      	strh	r3, [r0, #6]
   d6e52:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e56:	8103      	strh	r3, [r0, #8]
   d6e58:	2305      	movs	r3, #5
   d6e5a:	8143      	strh	r3, [r0, #10]
   d6e5c:	230b      	movs	r3, #11
   d6e5e:	8183      	strh	r3, [r0, #12]
   d6e60:	2201      	movs	r2, #1
   d6e62:	2300      	movs	r3, #0
   d6e64:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6e68:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6e6a:	4c0a      	ldr	r4, [pc, #40]	; (d6e94 <rand+0x6c>)
   d6e6c:	690b      	ldr	r3, [r1, #16]
   d6e6e:	6948      	ldr	r0, [r1, #20]
   d6e70:	4a09      	ldr	r2, [pc, #36]	; (d6e98 <rand+0x70>)
   d6e72:	435c      	muls	r4, r3
   d6e74:	fb02 4000 	mla	r0, r2, r0, r4
   d6e78:	fba3 2302 	umull	r2, r3, r3, r2
   d6e7c:	3201      	adds	r2, #1
   d6e7e:	4403      	add	r3, r0
   d6e80:	f143 0300 	adc.w	r3, r3, #0
   d6e84:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d6e88:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d6e8c:	bd10      	pop	{r4, pc}
   d6e8e:	bf00      	nop
   d6e90:	2003e294 	.word	0x2003e294
   d6e94:	5851f42d 	.word	0x5851f42d
   d6e98:	4c957f2d 	.word	0x4c957f2d

000d6e9c <strcmp>:
   d6e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6ea4:	2a01      	cmp	r2, #1
   d6ea6:	bf28      	it	cs
   d6ea8:	429a      	cmpcs	r2, r3
   d6eaa:	d0f7      	beq.n	d6e9c <strcmp>
   d6eac:	1ad0      	subs	r0, r2, r3
   d6eae:	4770      	bx	lr

000d6eb0 <strcpy>:
   d6eb0:	4603      	mov	r3, r0
   d6eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6eb6:	f803 2b01 	strb.w	r2, [r3], #1
   d6eba:	2a00      	cmp	r2, #0
   d6ebc:	d1f9      	bne.n	d6eb2 <strcpy+0x2>
   d6ebe:	4770      	bx	lr

000d6ec0 <strdup>:
   d6ec0:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <strdup+0xc>)
   d6ec2:	4601      	mov	r1, r0
   d6ec4:	6818      	ldr	r0, [r3, #0]
   d6ec6:	f000 b803 	b.w	d6ed0 <_strdup_r>
   d6eca:	bf00      	nop
   d6ecc:	2003e294 	.word	0x2003e294

000d6ed0 <_strdup_r>:
   d6ed0:	b570      	push	{r4, r5, r6, lr}
   d6ed2:	4606      	mov	r6, r0
   d6ed4:	4608      	mov	r0, r1
   d6ed6:	460c      	mov	r4, r1
   d6ed8:	f000 f80d 	bl	d6ef6 <strlen>
   d6edc:	1c45      	adds	r5, r0, #1
   d6ede:	4629      	mov	r1, r5
   d6ee0:	4630      	mov	r0, r6
   d6ee2:	f7fd ff4b 	bl	d4d7c <_malloc_r>
   d6ee6:	4606      	mov	r6, r0
   d6ee8:	b118      	cbz	r0, d6ef2 <_strdup_r+0x22>
   d6eea:	462a      	mov	r2, r5
   d6eec:	4621      	mov	r1, r4
   d6eee:	f7ff ff5f 	bl	d6db0 <memcpy>
   d6ef2:	4630      	mov	r0, r6
   d6ef4:	bd70      	pop	{r4, r5, r6, pc}

000d6ef6 <strlen>:
   d6ef6:	4603      	mov	r3, r0
   d6ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6efc:	2a00      	cmp	r2, #0
   d6efe:	d1fb      	bne.n	d6ef8 <strlen+0x2>
   d6f00:	1a18      	subs	r0, r3, r0
   d6f02:	3801      	subs	r0, #1
   d6f04:	4770      	bx	lr

000d6f06 <strncmp>:
   d6f06:	b530      	push	{r4, r5, lr}
   d6f08:	b182      	cbz	r2, d6f2c <strncmp+0x26>
   d6f0a:	1e45      	subs	r5, r0, #1
   d6f0c:	3901      	subs	r1, #1
   d6f0e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6f12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6f16:	42a3      	cmp	r3, r4
   d6f18:	d106      	bne.n	d6f28 <strncmp+0x22>
   d6f1a:	43ec      	mvns	r4, r5
   d6f1c:	4414      	add	r4, r2
   d6f1e:	42e0      	cmn	r0, r4
   d6f20:	d001      	beq.n	d6f26 <strncmp+0x20>
   d6f22:	2b00      	cmp	r3, #0
   d6f24:	d1f3      	bne.n	d6f0e <strncmp+0x8>
   d6f26:	461c      	mov	r4, r3
   d6f28:	1b18      	subs	r0, r3, r4
   d6f2a:	bd30      	pop	{r4, r5, pc}
   d6f2c:	4610      	mov	r0, r2
   d6f2e:	bd30      	pop	{r4, r5, pc}

000d6f30 <_strtoul_r>:
   d6f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f34:	4680      	mov	r8, r0
   d6f36:	483c      	ldr	r0, [pc, #240]	; (d7028 <_strtoul_r+0xf8>)
   d6f38:	f8d0 9000 	ldr.w	r9, [r0]
   d6f3c:	460e      	mov	r6, r1
   d6f3e:	4635      	mov	r5, r6
   d6f40:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6f44:	eb09 0004 	add.w	r0, r9, r4
   d6f48:	7840      	ldrb	r0, [r0, #1]
   d6f4a:	f000 0008 	and.w	r0, r0, #8
   d6f4e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6f52:	b108      	cbz	r0, d6f58 <_strtoul_r+0x28>
   d6f54:	462e      	mov	r6, r5
   d6f56:	e7f2      	b.n	d6f3e <_strtoul_r+0xe>
   d6f58:	2c2d      	cmp	r4, #45	; 0x2d
   d6f5a:	d103      	bne.n	d6f64 <_strtoul_r+0x34>
   d6f5c:	1cb5      	adds	r5, r6, #2
   d6f5e:	7874      	ldrb	r4, [r6, #1]
   d6f60:	2701      	movs	r7, #1
   d6f62:	e003      	b.n	d6f6c <_strtoul_r+0x3c>
   d6f64:	2c2b      	cmp	r4, #43	; 0x2b
   d6f66:	bf04      	itt	eq
   d6f68:	7874      	ldrbeq	r4, [r6, #1]
   d6f6a:	1cb5      	addeq	r5, r6, #2
   d6f6c:	b113      	cbz	r3, d6f74 <_strtoul_r+0x44>
   d6f6e:	2b10      	cmp	r3, #16
   d6f70:	d10a      	bne.n	d6f88 <_strtoul_r+0x58>
   d6f72:	e053      	b.n	d701c <_strtoul_r+0xec>
   d6f74:	2c30      	cmp	r4, #48	; 0x30
   d6f76:	d14f      	bne.n	d7018 <_strtoul_r+0xe8>
   d6f78:	7828      	ldrb	r0, [r5, #0]
   d6f7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6f7e:	2858      	cmp	r0, #88	; 0x58
   d6f80:	d145      	bne.n	d700e <_strtoul_r+0xde>
   d6f82:	786c      	ldrb	r4, [r5, #1]
   d6f84:	2310      	movs	r3, #16
   d6f86:	3502      	adds	r5, #2
   d6f88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6f8c:	2600      	movs	r6, #0
   d6f8e:	fbbc fcf3 	udiv	ip, ip, r3
   d6f92:	fb03 fa0c 	mul.w	sl, r3, ip
   d6f96:	ea6f 0a0a 	mvn.w	sl, sl
   d6f9a:	4630      	mov	r0, r6
   d6f9c:	eb09 0e04 	add.w	lr, r9, r4
   d6fa0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6fa4:	f01e 0f04 	tst.w	lr, #4
   d6fa8:	d001      	beq.n	d6fae <_strtoul_r+0x7e>
   d6faa:	3c30      	subs	r4, #48	; 0x30
   d6fac:	e00b      	b.n	d6fc6 <_strtoul_r+0x96>
   d6fae:	f01e 0e03 	ands.w	lr, lr, #3
   d6fb2:	d01a      	beq.n	d6fea <_strtoul_r+0xba>
   d6fb4:	f1be 0f01 	cmp.w	lr, #1
   d6fb8:	bf0c      	ite	eq
   d6fba:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6fbe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6fc2:	ebce 0404 	rsb	r4, lr, r4
   d6fc6:	42a3      	cmp	r3, r4
   d6fc8:	dd0f      	ble.n	d6fea <_strtoul_r+0xba>
   d6fca:	2e00      	cmp	r6, #0
   d6fcc:	db08      	blt.n	d6fe0 <_strtoul_r+0xb0>
   d6fce:	4560      	cmp	r0, ip
   d6fd0:	d806      	bhi.n	d6fe0 <_strtoul_r+0xb0>
   d6fd2:	d101      	bne.n	d6fd8 <_strtoul_r+0xa8>
   d6fd4:	4554      	cmp	r4, sl
   d6fd6:	dc03      	bgt.n	d6fe0 <_strtoul_r+0xb0>
   d6fd8:	fb03 4000 	mla	r0, r3, r0, r4
   d6fdc:	2601      	movs	r6, #1
   d6fde:	e001      	b.n	d6fe4 <_strtoul_r+0xb4>
   d6fe0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d6fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6fe8:	e7d8      	b.n	d6f9c <_strtoul_r+0x6c>
   d6fea:	2e00      	cmp	r6, #0
   d6fec:	da07      	bge.n	d6ffe <_strtoul_r+0xce>
   d6fee:	2322      	movs	r3, #34	; 0x22
   d6ff0:	f8c8 3000 	str.w	r3, [r8]
   d6ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6ff8:	b92a      	cbnz	r2, d7006 <_strtoul_r+0xd6>
   d6ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6ffe:	b107      	cbz	r7, d7002 <_strtoul_r+0xd2>
   d7000:	4240      	negs	r0, r0
   d7002:	b172      	cbz	r2, d7022 <_strtoul_r+0xf2>
   d7004:	b106      	cbz	r6, d7008 <_strtoul_r+0xd8>
   d7006:	1e69      	subs	r1, r5, #1
   d7008:	6011      	str	r1, [r2, #0]
   d700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d700e:	2430      	movs	r4, #48	; 0x30
   d7010:	2b00      	cmp	r3, #0
   d7012:	d1b9      	bne.n	d6f88 <_strtoul_r+0x58>
   d7014:	2308      	movs	r3, #8
   d7016:	e7b7      	b.n	d6f88 <_strtoul_r+0x58>
   d7018:	230a      	movs	r3, #10
   d701a:	e7b5      	b.n	d6f88 <_strtoul_r+0x58>
   d701c:	2c30      	cmp	r4, #48	; 0x30
   d701e:	d0ab      	beq.n	d6f78 <_strtoul_r+0x48>
   d7020:	e7b2      	b.n	d6f88 <_strtoul_r+0x58>
   d7022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7026:	bf00      	nop
   d7028:	2003e230 	.word	0x2003e230

000d702c <strtoul>:
   d702c:	4613      	mov	r3, r2
   d702e:	460a      	mov	r2, r1
   d7030:	4601      	mov	r1, r0
   d7032:	4802      	ldr	r0, [pc, #8]	; (d703c <strtoul+0x10>)
   d7034:	6800      	ldr	r0, [r0, #0]
   d7036:	f7ff bf7b 	b.w	d6f30 <_strtoul_r>
   d703a:	bf00      	nop
   d703c:	2003e294 	.word	0x2003e294

000d7040 <__tzcalc_limits>:
   d7040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7044:	4604      	mov	r4, r0
   d7046:	f000 fa6f 	bl	d7528 <__gettzinfo>
   d704a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d704e:	429c      	cmp	r4, r3
   d7050:	f340 8096 	ble.w	d7180 <__tzcalc_limits+0x140>
   d7054:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7058:	18e3      	adds	r3, r4, r3
   d705a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d705e:	109b      	asrs	r3, r3, #2
   d7060:	f240 156d 	movw	r5, #365	; 0x16d
   d7064:	fb05 3502 	mla	r5, r5, r2, r3
   d7068:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d706c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7070:	fb92 f3f3 	sdiv	r3, r2, r3
   d7074:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7078:	442b      	add	r3, r5
   d707a:	18a5      	adds	r5, r4, r2
   d707c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7080:	fb95 f5f2 	sdiv	r5, r5, r2
   d7084:	441d      	add	r5, r3
   d7086:	2364      	movs	r3, #100	; 0x64
   d7088:	fb94 f7f2 	sdiv	r7, r4, r2
   d708c:	fb94 f6f3 	sdiv	r6, r4, r3
   d7090:	fb02 4717 	mls	r7, r2, r7, r4
   d7094:	fb03 4616 	mls	r6, r3, r6, r4
   d7098:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d709c:	fab7 fe87 	clz	lr, r7
   d70a0:	9301      	str	r3, [sp, #4]
   d70a2:	f004 0303 	and.w	r3, r4, #3
   d70a6:	6044      	str	r4, [r0, #4]
   d70a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d70ac:	4601      	mov	r1, r0
   d70ae:	9300      	str	r3, [sp, #0]
   d70b0:	f04f 0c07 	mov.w	ip, #7
   d70b4:	7a0b      	ldrb	r3, [r1, #8]
   d70b6:	2b4a      	cmp	r3, #74	; 0x4a
   d70b8:	d10e      	bne.n	d70d8 <__tzcalc_limits+0x98>
   d70ba:	694b      	ldr	r3, [r1, #20]
   d70bc:	9a00      	ldr	r2, [sp, #0]
   d70be:	18ec      	adds	r4, r5, r3
   d70c0:	b902      	cbnz	r2, d70c4 <__tzcalc_limits+0x84>
   d70c2:	b906      	cbnz	r6, d70c6 <__tzcalc_limits+0x86>
   d70c4:	b927      	cbnz	r7, d70d0 <__tzcalc_limits+0x90>
   d70c6:	2b3b      	cmp	r3, #59	; 0x3b
   d70c8:	bfd4      	ite	le
   d70ca:	2300      	movle	r3, #0
   d70cc:	2301      	movgt	r3, #1
   d70ce:	e000      	b.n	d70d2 <__tzcalc_limits+0x92>
   d70d0:	2300      	movs	r3, #0
   d70d2:	4423      	add	r3, r4
   d70d4:	3b01      	subs	r3, #1
   d70d6:	e03f      	b.n	d7158 <__tzcalc_limits+0x118>
   d70d8:	2b44      	cmp	r3, #68	; 0x44
   d70da:	d102      	bne.n	d70e2 <__tzcalc_limits+0xa2>
   d70dc:	694b      	ldr	r3, [r1, #20]
   d70de:	442b      	add	r3, r5
   d70e0:	e03a      	b.n	d7158 <__tzcalc_limits+0x118>
   d70e2:	9b00      	ldr	r3, [sp, #0]
   d70e4:	b92b      	cbnz	r3, d70f2 <__tzcalc_limits+0xb2>
   d70e6:	2e00      	cmp	r6, #0
   d70e8:	bf0c      	ite	eq
   d70ea:	46f0      	moveq	r8, lr
   d70ec:	f04f 0801 	movne.w	r8, #1
   d70f0:	e000      	b.n	d70f4 <__tzcalc_limits+0xb4>
   d70f2:	46f0      	mov	r8, lr
   d70f4:	4b24      	ldr	r3, [pc, #144]	; (d7188 <__tzcalc_limits+0x148>)
   d70f6:	68cc      	ldr	r4, [r1, #12]
   d70f8:	2230      	movs	r2, #48	; 0x30
   d70fa:	fb02 3808 	mla	r8, r2, r8, r3
   d70fe:	f1a8 0a04 	sub.w	sl, r8, #4
   d7102:	46a9      	mov	r9, r5
   d7104:	2301      	movs	r3, #1
   d7106:	42a3      	cmp	r3, r4
   d7108:	da04      	bge.n	d7114 <__tzcalc_limits+0xd4>
   d710a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d710e:	3301      	adds	r3, #1
   d7110:	44d9      	add	r9, fp
   d7112:	e7f8      	b.n	d7106 <__tzcalc_limits+0xc6>
   d7114:	f109 0304 	add.w	r3, r9, #4
   d7118:	fb93 fbfc 	sdiv	fp, r3, ip
   d711c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7120:	2c01      	cmp	r4, #1
   d7122:	ebca 0a03 	rsb	sl, sl, r3
   d7126:	694b      	ldr	r3, [r1, #20]
   d7128:	bfb8      	it	lt
   d712a:	2401      	movlt	r4, #1
   d712c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7130:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7134:	690b      	ldr	r3, [r1, #16]
   d7136:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d713a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d713e:	bf48      	it	mi
   d7140:	f10a 0a07 	addmi.w	sl, sl, #7
   d7144:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7148:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d714c:	4453      	add	r3, sl
   d714e:	42a3      	cmp	r3, r4
   d7150:	db01      	blt.n	d7156 <__tzcalc_limits+0x116>
   d7152:	3b07      	subs	r3, #7
   d7154:	e7fb      	b.n	d714e <__tzcalc_limits+0x10e>
   d7156:	444b      	add	r3, r9
   d7158:	698c      	ldr	r4, [r1, #24]
   d715a:	4a0c      	ldr	r2, [pc, #48]	; (d718c <__tzcalc_limits+0x14c>)
   d715c:	fb02 4303 	mla	r3, r2, r3, r4
   d7160:	6a0c      	ldr	r4, [r1, #32]
   d7162:	4423      	add	r3, r4
   d7164:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7168:	9b01      	ldr	r3, [sp, #4]
   d716a:	4299      	cmp	r1, r3
   d716c:	d1a2      	bne.n	d70b4 <__tzcalc_limits+0x74>
   d716e:	69c3      	ldr	r3, [r0, #28]
   d7170:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7172:	4293      	cmp	r3, r2
   d7174:	bfac      	ite	ge
   d7176:	2300      	movge	r3, #0
   d7178:	2301      	movlt	r3, #1
   d717a:	6003      	str	r3, [r0, #0]
   d717c:	2001      	movs	r0, #1
   d717e:	e000      	b.n	d7182 <__tzcalc_limits+0x142>
   d7180:	2000      	movs	r0, #0
   d7182:	b003      	add	sp, #12
   d7184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7188:	000d7c08 	.word	0x000d7c08
   d718c:	00015180 	.word	0x00015180

000d7190 <__tz_lock>:
   d7190:	4770      	bx	lr

000d7192 <__tz_unlock>:
   d7192:	4770      	bx	lr

000d7194 <_tzset_unlocked>:
   d7194:	4b01      	ldr	r3, [pc, #4]	; (d719c <_tzset_unlocked+0x8>)
   d7196:	6818      	ldr	r0, [r3, #0]
   d7198:	f000 b802 	b.w	d71a0 <_tzset_unlocked_r>
   d719c:	2003e294 	.word	0x2003e294

000d71a0 <_tzset_unlocked_r>:
   d71a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d71a4:	b08d      	sub	sp, #52	; 0x34
   d71a6:	4607      	mov	r7, r0
   d71a8:	f000 f9be 	bl	d7528 <__gettzinfo>
   d71ac:	49b0      	ldr	r1, [pc, #704]	; (d7470 <_tzset_unlocked_r+0x2d0>)
   d71ae:	4eb1      	ldr	r6, [pc, #708]	; (d7474 <_tzset_unlocked_r+0x2d4>)
   d71b0:	4604      	mov	r4, r0
   d71b2:	4638      	mov	r0, r7
   d71b4:	f000 f9b0 	bl	d7518 <_getenv_r>
   d71b8:	4605      	mov	r5, r0
   d71ba:	b960      	cbnz	r0, d71d6 <_tzset_unlocked_r+0x36>
   d71bc:	4bae      	ldr	r3, [pc, #696]	; (d7478 <_tzset_unlocked_r+0x2d8>)
   d71be:	4aaf      	ldr	r2, [pc, #700]	; (d747c <_tzset_unlocked_r+0x2dc>)
   d71c0:	6018      	str	r0, [r3, #0]
   d71c2:	4baf      	ldr	r3, [pc, #700]	; (d7480 <_tzset_unlocked_r+0x2e0>)
   d71c4:	6018      	str	r0, [r3, #0]
   d71c6:	4baf      	ldr	r3, [pc, #700]	; (d7484 <_tzset_unlocked_r+0x2e4>)
   d71c8:	6830      	ldr	r0, [r6, #0]
   d71ca:	601a      	str	r2, [r3, #0]
   d71cc:	605a      	str	r2, [r3, #4]
   d71ce:	f7fd fdad 	bl	d4d2c <free>
   d71d2:	6035      	str	r5, [r6, #0]
   d71d4:	e148      	b.n	d7468 <_tzset_unlocked_r+0x2c8>
   d71d6:	6831      	ldr	r1, [r6, #0]
   d71d8:	b979      	cbnz	r1, d71fa <_tzset_unlocked_r+0x5a>
   d71da:	6830      	ldr	r0, [r6, #0]
   d71dc:	f7fd fda6 	bl	d4d2c <free>
   d71e0:	4628      	mov	r0, r5
   d71e2:	f7ff fe88 	bl	d6ef6 <strlen>
   d71e6:	1c41      	adds	r1, r0, #1
   d71e8:	4638      	mov	r0, r7
   d71ea:	f7fd fdc7 	bl	d4d7c <_malloc_r>
   d71ee:	6030      	str	r0, [r6, #0]
   d71f0:	b148      	cbz	r0, d7206 <_tzset_unlocked_r+0x66>
   d71f2:	4629      	mov	r1, r5
   d71f4:	f7ff fe5c 	bl	d6eb0 <strcpy>
   d71f8:	e005      	b.n	d7206 <_tzset_unlocked_r+0x66>
   d71fa:	f7ff fe4f 	bl	d6e9c <strcmp>
   d71fe:	2800      	cmp	r0, #0
   d7200:	f000 8132 	beq.w	d7468 <_tzset_unlocked_r+0x2c8>
   d7204:	e7e9      	b.n	d71da <_tzset_unlocked_r+0x3a>
   d7206:	782b      	ldrb	r3, [r5, #0]
   d7208:	4a9f      	ldr	r2, [pc, #636]	; (d7488 <_tzset_unlocked_r+0x2e8>)
   d720a:	49a0      	ldr	r1, [pc, #640]	; (d748c <_tzset_unlocked_r+0x2ec>)
   d720c:	2b3a      	cmp	r3, #58	; 0x3a
   d720e:	bf08      	it	eq
   d7210:	3501      	addeq	r5, #1
   d7212:	ae0a      	add	r6, sp, #40	; 0x28
   d7214:	4633      	mov	r3, r6
   d7216:	4628      	mov	r0, r5
   d7218:	f7fd fd98 	bl	d4d4c <siscanf>
   d721c:	2800      	cmp	r0, #0
   d721e:	f340 8123 	ble.w	d7468 <_tzset_unlocked_r+0x2c8>
   d7222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7224:	18ef      	adds	r7, r5, r3
   d7226:	5ceb      	ldrb	r3, [r5, r3]
   d7228:	2b2d      	cmp	r3, #45	; 0x2d
   d722a:	d103      	bne.n	d7234 <_tzset_unlocked_r+0x94>
   d722c:	3701      	adds	r7, #1
   d722e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7232:	e003      	b.n	d723c <_tzset_unlocked_r+0x9c>
   d7234:	2b2b      	cmp	r3, #43	; 0x2b
   d7236:	bf08      	it	eq
   d7238:	3701      	addeq	r7, #1
   d723a:	2501      	movs	r5, #1
   d723c:	f10d 0a20 	add.w	sl, sp, #32
   d7240:	f10d 0b1e 	add.w	fp, sp, #30
   d7244:	f04f 0800 	mov.w	r8, #0
   d7248:	9603      	str	r6, [sp, #12]
   d724a:	f8cd a008 	str.w	sl, [sp, #8]
   d724e:	9601      	str	r6, [sp, #4]
   d7250:	f8cd b000 	str.w	fp, [sp]
   d7254:	4633      	mov	r3, r6
   d7256:	aa07      	add	r2, sp, #28
   d7258:	498d      	ldr	r1, [pc, #564]	; (d7490 <_tzset_unlocked_r+0x2f0>)
   d725a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d725e:	4638      	mov	r0, r7
   d7260:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7264:	f7fd fd72 	bl	d4d4c <siscanf>
   d7268:	4540      	cmp	r0, r8
   d726a:	f340 80fd 	ble.w	d7468 <_tzset_unlocked_r+0x2c8>
   d726e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7272:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7276:	f8df 9224 	ldr.w	r9, [pc, #548]	; d749c <_tzset_unlocked_r+0x2fc>
   d727a:	213c      	movs	r1, #60	; 0x3c
   d727c:	fb01 3302 	mla	r3, r1, r2, r3
   d7280:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7284:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7288:	fb01 3302 	mla	r3, r1, r2, r3
   d728c:	435d      	muls	r5, r3
   d728e:	6225      	str	r5, [r4, #32]
   d7290:	4d7c      	ldr	r5, [pc, #496]	; (d7484 <_tzset_unlocked_r+0x2e4>)
   d7292:	4b7d      	ldr	r3, [pc, #500]	; (d7488 <_tzset_unlocked_r+0x2e8>)
   d7294:	602b      	str	r3, [r5, #0]
   d7296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7298:	497c      	ldr	r1, [pc, #496]	; (d748c <_tzset_unlocked_r+0x2ec>)
   d729a:	441f      	add	r7, r3
   d729c:	464a      	mov	r2, r9
   d729e:	4633      	mov	r3, r6
   d72a0:	4638      	mov	r0, r7
   d72a2:	f7fd fd53 	bl	d4d4c <siscanf>
   d72a6:	4540      	cmp	r0, r8
   d72a8:	dc08      	bgt.n	d72bc <_tzset_unlocked_r+0x11c>
   d72aa:	682b      	ldr	r3, [r5, #0]
   d72ac:	606b      	str	r3, [r5, #4]
   d72ae:	4b72      	ldr	r3, [pc, #456]	; (d7478 <_tzset_unlocked_r+0x2d8>)
   d72b0:	6a22      	ldr	r2, [r4, #32]
   d72b2:	601a      	str	r2, [r3, #0]
   d72b4:	4b72      	ldr	r3, [pc, #456]	; (d7480 <_tzset_unlocked_r+0x2e0>)
   d72b6:	f8c3 8000 	str.w	r8, [r3]
   d72ba:	e0d5      	b.n	d7468 <_tzset_unlocked_r+0x2c8>
   d72bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d72be:	f8c5 9004 	str.w	r9, [r5, #4]
   d72c2:	18fd      	adds	r5, r7, r3
   d72c4:	5cfb      	ldrb	r3, [r7, r3]
   d72c6:	2b2d      	cmp	r3, #45	; 0x2d
   d72c8:	d103      	bne.n	d72d2 <_tzset_unlocked_r+0x132>
   d72ca:	3501      	adds	r5, #1
   d72cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d72d0:	e003      	b.n	d72da <_tzset_unlocked_r+0x13a>
   d72d2:	2b2b      	cmp	r3, #43	; 0x2b
   d72d4:	bf08      	it	eq
   d72d6:	3501      	addeq	r5, #1
   d72d8:	2701      	movs	r7, #1
   d72da:	2300      	movs	r3, #0
   d72dc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d72e0:	f8ad 301e 	strh.w	r3, [sp, #30]
   d72e4:	f8ad 3020 	strh.w	r3, [sp, #32]
   d72e8:	930a      	str	r3, [sp, #40]	; 0x28
   d72ea:	9603      	str	r6, [sp, #12]
   d72ec:	f8cd a008 	str.w	sl, [sp, #8]
   d72f0:	9601      	str	r6, [sp, #4]
   d72f2:	f8cd b000 	str.w	fp, [sp]
   d72f6:	4633      	mov	r3, r6
   d72f8:	aa07      	add	r2, sp, #28
   d72fa:	4965      	ldr	r1, [pc, #404]	; (d7490 <_tzset_unlocked_r+0x2f0>)
   d72fc:	4628      	mov	r0, r5
   d72fe:	f7fd fd25 	bl	d4d4c <siscanf>
   d7302:	2800      	cmp	r0, #0
   d7304:	dc04      	bgt.n	d7310 <_tzset_unlocked_r+0x170>
   d7306:	6a23      	ldr	r3, [r4, #32]
   d7308:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d730c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d730e:	e00e      	b.n	d732e <_tzset_unlocked_r+0x18e>
   d7310:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7314:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7318:	213c      	movs	r1, #60	; 0x3c
   d731a:	fb01 3302 	mla	r3, r1, r2, r3
   d731e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7322:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7326:	fb01 3302 	mla	r3, r1, r2, r3
   d732a:	435f      	muls	r7, r3
   d732c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7330:	4627      	mov	r7, r4
   d7332:	441d      	add	r5, r3
   d7334:	f04f 0900 	mov.w	r9, #0
   d7338:	782b      	ldrb	r3, [r5, #0]
   d733a:	2b2c      	cmp	r3, #44	; 0x2c
   d733c:	bf08      	it	eq
   d733e:	3501      	addeq	r5, #1
   d7340:	f895 8000 	ldrb.w	r8, [r5]
   d7344:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7348:	d126      	bne.n	d7398 <_tzset_unlocked_r+0x1f8>
   d734a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d734e:	9302      	str	r3, [sp, #8]
   d7350:	ab09      	add	r3, sp, #36	; 0x24
   d7352:	9300      	str	r3, [sp, #0]
   d7354:	9603      	str	r6, [sp, #12]
   d7356:	9601      	str	r6, [sp, #4]
   d7358:	4633      	mov	r3, r6
   d735a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d735e:	494d      	ldr	r1, [pc, #308]	; (d7494 <_tzset_unlocked_r+0x2f4>)
   d7360:	4628      	mov	r0, r5
   d7362:	f7fd fcf3 	bl	d4d4c <siscanf>
   d7366:	2803      	cmp	r0, #3
   d7368:	d17e      	bne.n	d7468 <_tzset_unlocked_r+0x2c8>
   d736a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d736e:	1e4b      	subs	r3, r1, #1
   d7370:	2b0b      	cmp	r3, #11
   d7372:	d879      	bhi.n	d7468 <_tzset_unlocked_r+0x2c8>
   d7374:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7378:	1e53      	subs	r3, r2, #1
   d737a:	2b04      	cmp	r3, #4
   d737c:	d874      	bhi.n	d7468 <_tzset_unlocked_r+0x2c8>
   d737e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7382:	2b06      	cmp	r3, #6
   d7384:	d870      	bhi.n	d7468 <_tzset_unlocked_r+0x2c8>
   d7386:	f887 8008 	strb.w	r8, [r7, #8]
   d738a:	60f9      	str	r1, [r7, #12]
   d738c:	613a      	str	r2, [r7, #16]
   d738e:	617b      	str	r3, [r7, #20]
   d7390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7392:	eb05 0803 	add.w	r8, r5, r3
   d7396:	e02a      	b.n	d73ee <_tzset_unlocked_r+0x24e>
   d7398:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d739c:	bf06      	itte	eq
   d739e:	3501      	addeq	r5, #1
   d73a0:	4643      	moveq	r3, r8
   d73a2:	2344      	movne	r3, #68	; 0x44
   d73a4:	220a      	movs	r2, #10
   d73a6:	a90b      	add	r1, sp, #44	; 0x2c
   d73a8:	4628      	mov	r0, r5
   d73aa:	9305      	str	r3, [sp, #20]
   d73ac:	f7ff fe3e 	bl	d702c <strtoul>
   d73b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d73b4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d73b8:	4545      	cmp	r5, r8
   d73ba:	9b05      	ldr	r3, [sp, #20]
   d73bc:	d114      	bne.n	d73e8 <_tzset_unlocked_r+0x248>
   d73be:	234d      	movs	r3, #77	; 0x4d
   d73c0:	f1b9 0f00 	cmp.w	r9, #0
   d73c4:	d107      	bne.n	d73d6 <_tzset_unlocked_r+0x236>
   d73c6:	7223      	strb	r3, [r4, #8]
   d73c8:	2303      	movs	r3, #3
   d73ca:	60e3      	str	r3, [r4, #12]
   d73cc:	2302      	movs	r3, #2
   d73ce:	6123      	str	r3, [r4, #16]
   d73d0:	f8c4 9014 	str.w	r9, [r4, #20]
   d73d4:	e00b      	b.n	d73ee <_tzset_unlocked_r+0x24e>
   d73d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d73da:	230b      	movs	r3, #11
   d73dc:	62a3      	str	r3, [r4, #40]	; 0x28
   d73de:	2301      	movs	r3, #1
   d73e0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d73e2:	2300      	movs	r3, #0
   d73e4:	6323      	str	r3, [r4, #48]	; 0x30
   d73e6:	e002      	b.n	d73ee <_tzset_unlocked_r+0x24e>
   d73e8:	b280      	uxth	r0, r0
   d73ea:	723b      	strb	r3, [r7, #8]
   d73ec:	6178      	str	r0, [r7, #20]
   d73ee:	2302      	movs	r3, #2
   d73f0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d73f4:	2300      	movs	r3, #0
   d73f6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d73fa:	f8ad 3020 	strh.w	r3, [sp, #32]
   d73fe:	930a      	str	r3, [sp, #40]	; 0x28
   d7400:	f898 3000 	ldrb.w	r3, [r8]
   d7404:	2b2f      	cmp	r3, #47	; 0x2f
   d7406:	d10b      	bne.n	d7420 <_tzset_unlocked_r+0x280>
   d7408:	9603      	str	r6, [sp, #12]
   d740a:	f8cd a008 	str.w	sl, [sp, #8]
   d740e:	9601      	str	r6, [sp, #4]
   d7410:	f8cd b000 	str.w	fp, [sp]
   d7414:	4633      	mov	r3, r6
   d7416:	aa07      	add	r2, sp, #28
   d7418:	491f      	ldr	r1, [pc, #124]	; (d7498 <_tzset_unlocked_r+0x2f8>)
   d741a:	4640      	mov	r0, r8
   d741c:	f7fd fc96 	bl	d4d4c <siscanf>
   d7420:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7424:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7428:	213c      	movs	r1, #60	; 0x3c
   d742a:	fb01 3302 	mla	r3, r1, r2, r3
   d742e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7432:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7436:	fb01 3302 	mla	r3, r1, r2, r3
   d743a:	61bb      	str	r3, [r7, #24]
   d743c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d743e:	f109 0901 	add.w	r9, r9, #1
   d7442:	f1b9 0f02 	cmp.w	r9, #2
   d7446:	4445      	add	r5, r8
   d7448:	f107 071c 	add.w	r7, r7, #28
   d744c:	f47f af74 	bne.w	d7338 <_tzset_unlocked_r+0x198>
   d7450:	6860      	ldr	r0, [r4, #4]
   d7452:	f7ff fdf5 	bl	d7040 <__tzcalc_limits>
   d7456:	4b08      	ldr	r3, [pc, #32]	; (d7478 <_tzset_unlocked_r+0x2d8>)
   d7458:	6a22      	ldr	r2, [r4, #32]
   d745a:	601a      	str	r2, [r3, #0]
   d745c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d745e:	1a9b      	subs	r3, r3, r2
   d7460:	4a07      	ldr	r2, [pc, #28]	; (d7480 <_tzset_unlocked_r+0x2e0>)
   d7462:	bf18      	it	ne
   d7464:	2301      	movne	r3, #1
   d7466:	6013      	str	r3, [r2, #0]
   d7468:	b00d      	add	sp, #52	; 0x34
   d746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d746e:	bf00      	nop
   d7470:	000d7c68 	.word	0x000d7c68
   d7474:	2003e7e4 	.word	0x2003e7e4
   d7478:	2003e7ec 	.word	0x2003e7ec
   d747c:	000d7c6b 	.word	0x000d7c6b
   d7480:	2003e7e8 	.word	0x2003e7e8
   d7484:	2003e298 	.word	0x2003e298
   d7488:	2003e7d7 	.word	0x2003e7d7
   d748c:	000d7c6f 	.word	0x000d7c6f
   d7490:	000d7c92 	.word	0x000d7c92
   d7494:	000d7c7e 	.word	0x000d7c7e
   d7498:	000d7c91 	.word	0x000d7c91
   d749c:	2003e7cc 	.word	0x2003e7cc

000d74a0 <_findenv_r>:
   d74a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74a4:	4607      	mov	r7, r0
   d74a6:	468b      	mov	fp, r1
   d74a8:	4690      	mov	r8, r2
   d74aa:	f000 f8d9 	bl	d7660 <__env_lock>
   d74ae:	4b19      	ldr	r3, [pc, #100]	; (d7514 <_findenv_r+0x74>)
   d74b0:	681d      	ldr	r5, [r3, #0]
   d74b2:	469a      	mov	sl, r3
   d74b4:	b13d      	cbz	r5, d74c6 <_findenv_r+0x26>
   d74b6:	465c      	mov	r4, fp
   d74b8:	4623      	mov	r3, r4
   d74ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d74be:	b142      	cbz	r2, d74d2 <_findenv_r+0x32>
   d74c0:	2a3d      	cmp	r2, #61	; 0x3d
   d74c2:	461c      	mov	r4, r3
   d74c4:	d1f8      	bne.n	d74b8 <_findenv_r+0x18>
   d74c6:	4638      	mov	r0, r7
   d74c8:	f000 f8cb 	bl	d7662 <__env_unlock>
   d74cc:	2000      	movs	r0, #0
   d74ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74d2:	ebcb 0404 	rsb	r4, fp, r4
   d74d6:	46a9      	mov	r9, r5
   d74d8:	f859 0b04 	ldr.w	r0, [r9], #4
   d74dc:	2800      	cmp	r0, #0
   d74de:	d0f2      	beq.n	d74c6 <_findenv_r+0x26>
   d74e0:	4622      	mov	r2, r4
   d74e2:	4659      	mov	r1, fp
   d74e4:	f7ff fd0f 	bl	d6f06 <strncmp>
   d74e8:	b988      	cbnz	r0, d750e <_findenv_r+0x6e>
   d74ea:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d74ee:	191e      	adds	r6, r3, r4
   d74f0:	5d1b      	ldrb	r3, [r3, r4]
   d74f2:	2b3d      	cmp	r3, #61	; 0x3d
   d74f4:	d10b      	bne.n	d750e <_findenv_r+0x6e>
   d74f6:	f8da 3000 	ldr.w	r3, [sl]
   d74fa:	1aed      	subs	r5, r5, r3
   d74fc:	10ad      	asrs	r5, r5, #2
   d74fe:	4638      	mov	r0, r7
   d7500:	f8c8 5000 	str.w	r5, [r8]
   d7504:	f000 f8ad 	bl	d7662 <__env_unlock>
   d7508:	1c70      	adds	r0, r6, #1
   d750a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d750e:	464d      	mov	r5, r9
   d7510:	e7e1      	b.n	d74d6 <_findenv_r+0x36>
   d7512:	bf00      	nop
   d7514:	2003e2e0 	.word	0x2003e2e0

000d7518 <_getenv_r>:
   d7518:	b507      	push	{r0, r1, r2, lr}
   d751a:	aa01      	add	r2, sp, #4
   d751c:	f7ff ffc0 	bl	d74a0 <_findenv_r>
   d7520:	b003      	add	sp, #12
   d7522:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7528 <__gettzinfo>:
   d7528:	4800      	ldr	r0, [pc, #0]	; (d752c <__gettzinfo+0x4>)
   d752a:	4770      	bx	lr
   d752c:	2003e2a0 	.word	0x2003e2a0

000d7530 <gmtime_r>:
   d7530:	6802      	ldr	r2, [r0, #0]
   d7532:	4b47      	ldr	r3, [pc, #284]	; (d7650 <gmtime_r+0x120>)
   d7534:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7536:	fb92 f4f3 	sdiv	r4, r2, r3
   d753a:	fb03 2214 	mls	r2, r3, r4, r2
   d753e:	2a00      	cmp	r2, #0
   d7540:	bfbc      	itt	lt
   d7542:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7546:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d754a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d754e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7552:	fb92 f3f0 	sdiv	r3, r2, r0
   d7556:	fb00 2213 	mls	r2, r0, r3, r2
   d755a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d755e:	bfac      	ite	ge
   d7560:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7564:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7568:	608b      	str	r3, [r1, #8]
   d756a:	fb92 f3f0 	sdiv	r3, r2, r0
   d756e:	fb00 2213 	mls	r2, r0, r3, r2
   d7572:	604b      	str	r3, [r1, #4]
   d7574:	600a      	str	r2, [r1, #0]
   d7576:	2307      	movs	r3, #7
   d7578:	1ce2      	adds	r2, r4, #3
   d757a:	fb92 f3f3 	sdiv	r3, r2, r3
   d757e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7582:	1ad3      	subs	r3, r2, r3
   d7584:	618b      	str	r3, [r1, #24]
   d7586:	4b33      	ldr	r3, [pc, #204]	; (d7654 <gmtime_r+0x124>)
   d7588:	4d33      	ldr	r5, [pc, #204]	; (d7658 <gmtime_r+0x128>)
   d758a:	fb94 f5f5 	sdiv	r5, r4, r5
   d758e:	fb03 4405 	mla	r4, r3, r5, r4
   d7592:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7596:	fbb4 f2f2 	udiv	r2, r4, r2
   d759a:	4422      	add	r2, r4
   d759c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d75a0:	fbb4 f3f7 	udiv	r3, r4, r7
   d75a4:	1ad2      	subs	r2, r2, r3
   d75a6:	482d      	ldr	r0, [pc, #180]	; (d765c <gmtime_r+0x12c>)
   d75a8:	fbb4 f0f0 	udiv	r0, r4, r0
   d75ac:	f648 6694 	movw	r6, #36500	; 0x8e94
   d75b0:	1a13      	subs	r3, r2, r0
   d75b2:	fbb3 f6f6 	udiv	r6, r3, r6
   d75b6:	4434      	add	r4, r6
   d75b8:	f240 126d 	movw	r2, #365	; 0x16d
   d75bc:	fbb3 f0f2 	udiv	r0, r3, r2
   d75c0:	fbb3 f3f7 	udiv	r3, r3, r7
   d75c4:	1ae3      	subs	r3, r4, r3
   d75c6:	fb02 3310 	mls	r3, r2, r0, r3
   d75ca:	2499      	movs	r4, #153	; 0x99
   d75cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d75d0:	3202      	adds	r2, #2
   d75d2:	fbb2 f2f4 	udiv	r2, r2, r4
   d75d6:	2a0a      	cmp	r2, #10
   d75d8:	fb04 f402 	mul.w	r4, r4, r2
   d75dc:	f104 0602 	add.w	r6, r4, #2
   d75e0:	f04f 0405 	mov.w	r4, #5
   d75e4:	fbb6 f4f4 	udiv	r4, r6, r4
   d75e8:	bf34      	ite	cc
   d75ea:	2602      	movcc	r6, #2
   d75ec:	f06f 0609 	mvncs.w	r6, #9
   d75f0:	4416      	add	r6, r2
   d75f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d75f6:	fb02 0505 	mla	r5, r2, r5, r0
   d75fa:	1c5f      	adds	r7, r3, #1
   d75fc:	2e01      	cmp	r6, #1
   d75fe:	bf98      	it	ls
   d7600:	3501      	addls	r5, #1
   d7602:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7606:	eba7 0704 	sub.w	r7, r7, r4
   d760a:	d302      	bcc.n	d7612 <gmtime_r+0xe2>
   d760c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7610:	e014      	b.n	d763c <gmtime_r+0x10c>
   d7612:	0782      	lsls	r2, r0, #30
   d7614:	d105      	bne.n	d7622 <gmtime_r+0xf2>
   d7616:	2464      	movs	r4, #100	; 0x64
   d7618:	fbb0 f2f4 	udiv	r2, r0, r4
   d761c:	fb04 0212 	mls	r2, r4, r2, r0
   d7620:	b94a      	cbnz	r2, d7636 <gmtime_r+0x106>
   d7622:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7626:	fbb0 f4f2 	udiv	r4, r0, r2
   d762a:	fb02 0014 	mls	r0, r2, r4, r0
   d762e:	fab0 f280 	clz	r2, r0
   d7632:	0952      	lsrs	r2, r2, #5
   d7634:	e000      	b.n	d7638 <gmtime_r+0x108>
   d7636:	2201      	movs	r2, #1
   d7638:	333b      	adds	r3, #59	; 0x3b
   d763a:	441a      	add	r2, r3
   d763c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7640:	2300      	movs	r3, #0
   d7642:	61ca      	str	r2, [r1, #28]
   d7644:	614d      	str	r5, [r1, #20]
   d7646:	610e      	str	r6, [r1, #16]
   d7648:	60cf      	str	r7, [r1, #12]
   d764a:	620b      	str	r3, [r1, #32]
   d764c:	4608      	mov	r0, r1
   d764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7650:	00015180 	.word	0x00015180
   d7654:	fffdc54f 	.word	0xfffdc54f
   d7658:	00023ab1 	.word	0x00023ab1
   d765c:	00023ab0 	.word	0x00023ab0

000d7660 <__env_lock>:
   d7660:	4770      	bx	lr

000d7662 <__env_unlock>:
   d7662:	4770      	bx	lr

000d7664 <dynalib_user>:
   d7664:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7674:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d7684:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
   d76b8:	3425 312e 2066 2525 4100 2b54 4643 4e55     %4.1f %%.AT+CFUN
   d76c8:	313d 0d36 000a 6f6c 5077 776f 7265 6f4d     =16...lowPowerMo
   d76d8:	6564 5200 6c65 6165 6573 4d00 6165 7573     de.Release.Measu
   d76e8:	6572 4e2d 776f 4c00 776f 6f50 6577 4d72     re-Now.LowPowerM
   d76f8:	646f 0065 7453 7261 7574 0070 6854 2065     ode.Startup.The 
   d7708:	7661 7265 6761 2065 6f53 6c69 6f4d 7369     average SoilMois
   d7718:	7574 6572 6920 2073 3425 302e 2566 2025     ture is %4.0f%% 
   d7728:	6977 6874 2520 2069 6173 706d 656c 0073     with %i samples.
   d7738:	6f48 7275 796c 5220 7065 726f 0074 6153     Hourly Report.Sa
   d7748:	706d 656c 2520 2e34 6630 2525 202c 7641     mple %4.0f%%, Av
   d7758:	7265 6761 2065 3425 302e 2566 2025 6977     erage %4.0f%% wi
   d7768:	6874 2520 2069 6173 706d 656c 0073 694d     th %i samples.Mi
   d7778:	756e 6574 5320 6d61 6c70 0065 6f47 6e69     nute Sample.Goin
   d7788:	2067 6f74 5320 656c 7065 5300 6174 6574     g to Sleep.State
   d7798:	4500 7272 726f 5320 6174 6574 2d20 5220     .Error State - R
   d77a8:	7365 7465 4c00 776f 5020 776f 7265 4e00     eset.Low Power.N
   d77b8:	726f 616d 206c 704f 7265 7461 6f69 736e     ormal Operations
   d77c8:	5500 6b6e 6f6e 6e77 4e00 6e6f 0065 6957     .Unknown.None.Wi
   d77d8:	6946 4700 4d53 5500 544d 0053 4443 414d     Fi.GSM.UMTS.CDMA
   d77e8:	4c00 4554 4900 4545 3845 3230 3531 0034     .LTE.IEEE802154.
   d77f8:	2e31 3030 0000 0000                         1.00....

000d7800 <_ZTVN5spark13CellularClassE>:
	...
   d7808:	4e37 000d 4e2d 000d 4e23 000d 4dd9 000d     7N..-N..#N...M..
   d7818:	4e17 000d 4e0b 000d 4dff 000d 4df7 000d     .N...N...M...M..
   d7828:	4ded 000d 4de3 000d 5845 000d               .M...M..EX..

000d7834 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d783c:	4e71 000d 4e77 000d 4ecd 000d 4e85 000d     qN..wN...N...N..
   d784c:	4e73 000d                                   sN..

000d7850 <_ZTVN5spark13EthernetClassE>:
	...
   d7858:	54e3 000d 54d9 000d 54cf 000d 54c5 000d     .T...T...T...T..
   d7868:	54b9 000d 54ad 000d 54a1 000d 5499 000d     .T...T...T...T..
   d7878:	548f 000d 5485 000d 5845 000d               .T...T..EX..

000d7884 <_ZTV7TwoWire>:
	...
   d788c:	5501 000d 554b 000d 5523 000d 5503 000d     .U..KU..#U...U..
   d789c:	552b 000d 5533 000d 553b 000d 5543 000d     +U..3U..;U..CU..

000d78ac <_ZTV9IPAddress>:
	...
   d78b4:	5595 000d 5585 000d 5587 000d 0066 6e6c     .U...U...U..f.ln
   d78c4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d78d4:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
   d78e4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d78f4:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d7904:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d7914:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d7924:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d7934:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d7944:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d7954:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d7964:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d7974:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d7984:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d7994:	6170 696e 0063 6c61 006c 0000               panic.all...

000d79a0 <_ZTVN5spark9MeshClassE>:
	...
   d79a8:	56d7 000d 56cd 000d 56c3 000d 56b9 000d     .V...V...V...V..
   d79b8:	56ad 000d 56a1 000d 5695 000d 568d 000d     .V...V...V...V..
   d79c8:	5683 000d 5679 000d 5845 000d               .V..yV..EX..

000d79d4 <_ZTVN5spark12NetworkClassE>:
	...
   d79dc:	57dd 000d 57e7 000d 57f1 000d 57fb 000d     .W...W...W...W..
   d79ec:	5805 000d 5811 000d 581d 000d 5829 000d     .X...X...X..)X..
   d79fc:	5831 000d 583b 000d 5845 000d               1X..;X..EX..

000d7a08 <_ZTV8SPIClass>:
	...
   d7a10:	5a15 000d 5a17 000d 2b25 3330 3a64 3025     .Z...Z..%+03d:%0
   d7a20:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d7a30:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d7a40 <_ZTV11USARTSerial>:
	...
   d7a48:	5d45 000d 5d95 000d 5da3 000d 5925 000d     E]...]...]..%Y..
   d7a58:	5d59 000d 5d7b 000d 5d67 000d 5d8f 000d     Y]..{]..g]...]..
   d7a68:	5d47 000d 5d4b 000d                         G]..K]..

000d7a70 <_ZTV9USBSerial>:
	...
   d7a78:	5e4d 000d 5e9d 000d 5eab 000d 5925 000d     M^...^...^..%Y..
   d7a88:	5e89 000d 5e4f 000d 5e65 000d 5e97 000d     .^..O^..e^...^..
   d7a98:	5e7b 000d 5e49 000d                         {^..I^..

000d7aa0 <_ctype_>:
   d7aa0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7ab0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7ac0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7ad0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7ae0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7af0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7b00:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7b10:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7b20:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7ba4 <__sf_fake_stdin>:
	...

000d7bc4 <__sf_fake_stdout>:
	...

000d7be4 <__sf_fake_stderr>:
	...
   d7c04:	0043 0000                                   C...

000d7c08 <__month_lengths>:
   d7c08:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7c18:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7c28:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7c38:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d7c48:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7c58:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7c68:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d7c78:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7c88:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d7c98:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d7ca4 <link_const_variable_data_end>:
   d7ca4:	000d471d 	.word	0x000d471d
   d7ca8:	000d485b 	.word	0x000d485b
   d7cac:	000d4dc9 	.word	0x000d4dc9
   d7cb0:	000d4e41 	.word	0x000d4e41
   d7cb4:	000d54ed 	.word	0x000d54ed
   d7cb8:	000d5669 	.word	0x000d5669
   d7cbc:	000d578d 	.word	0x000d578d
   d7cc0:	000d5911 	.word	0x000d5911
   d7cc4:	000d59f9 	.word	0x000d59f9
   d7cc8:	000d5c0d 	.word	0x000d5c0d
   d7ccc:	000d5d31 	.word	0x000d5d31
   d7cd0:	000d6129 	.word	0x000d6129
   d7cd4:	000d6181 	.word	0x000d6181
   d7cd8:	000d6245 	.word	0x000d6245
   d7cdc:	000d62c9 	.word	0x000d62c9
   d7ce0:	000d634d 	.word	0x000d634d

000d7ce4 <link_constructors_end>:
	...
