
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-LiPo-Only/target/Cellular-LiPo-Only.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004ac4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018c64  2**0
                  CONTENTS
  4 .data         00000158  2003e054  000d8ae0  0000e054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000644  2003e1ac  2003e1ac  0001e1ac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8c38  000d8c38  00018c38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8c60  000d8c60  00018c60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e25c7  00000000  00000000  00018c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011bd3  00000000  00000000  000fb22b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f652  00000000  00000000  0010cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028a8  00000000  00000000  0012c450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004ae0  00000000  00000000  0012ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000355ff  00000000  00000000  001337d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a82b  00000000  00000000  00168dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001031ec  00000000  00000000  00193602  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d9c4  00000000  00000000  002967f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fb41 	bl	d76b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fb46 	bl	d76ca <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e054 	.word	0x2003e054
   d4048:	000d8ae0 	.word	0x000d8ae0
   d404c:	2003e1ac 	.word	0x2003e1ac
   d4050:	2003e1ac 	.word	0x2003e1ac
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fe1d 	bl	d6c98 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8ae0 	.word	0x000d8ae0
   d4080:	000d8aa4 	.word	0x000d8aa4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bef0 	b.w	d4e68 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcc7 	bl	d4a1c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bdcf 	b.w	d6c34 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bb2d 	b.w	d56f4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bb33 	b.w	d5704 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bb31 	b.w	d5704 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f002 fb37 	bl	d672a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d84b1 	.word	0x000d84b1
   d40cc:	2003e1fd 	.word	0x2003e1fd

000d40d0 <_ZN11EEPROMClass4readEi.isra.21>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d40d0:	f001 b8e2 	b.w	d5298 <HAL_EEPROM_Read>

000d40d4 <_ZN11EEPROMClass5writeEih.isra.22>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d40d4:	f001 b8e8 	b.w	d52a8 <HAL_EEPROM_Write>

000d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40da:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40de:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e0:	f88d 3000 	strb.w	r3, [sp]
   d40e4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e6:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e8:	f001 fe08 	bl	d5cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40ec:	4628      	mov	r0, r5
   d40ee:	b003      	add	sp, #12
   d40f0:	bd30      	pop	{r4, r5, pc}
	...

000d40f4 <_Z17getSignalStrengthv>:

  return 1;                                                             // Done, measurements take and the data array is stored as an obeect in EEPROM                                         
}

void getSignalStrength()
{
   d40f4:	b530      	push	{r4, r5, lr}
   d40f6:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d40f8:	4914      	ldr	r1, [pc, #80]	; (d414c <_Z17getSignalStrengthv+0x58>)
  sensor_data.rat = sig.getAccessTechnology();
   d40fa:	4c15      	ldr	r4, [pc, #84]	; (d4150 <_Z17getSignalStrengthv+0x5c>)
}

void getSignalStrength()
{
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d40fc:	a804      	add	r0, sp, #16
   d40fe:	f001 fb93 	bl	d5828 <_ZN5spark13CellularClass4RSSIEv>
  sensor_data.rat = sig.getAccessTechnology();
   d4102:	a804      	add	r0, sp, #16
   d4104:	f001 fbe3 	bl	d58ce <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4108:	63e0      	str	r0, [r4, #60]	; 0x3c
  //float strengthVal = sig.getStrengthValue();
  sensor_data.strengthPercentage = sig.getStrength();
   d410a:	a804      	add	r0, sp, #16
   d410c:	f001 fc48 	bl	d59a0 <_ZNK14CellularSignal11getStrengthEv>
  //float qualityVal = sig.getQualityValue();
  sensor_data.qualityPercentage = sig.getQuality();
   d4110:	a804      	add	r0, sp, #16
{
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
  sensor_data.rat = sig.getAccessTechnology();
  //float strengthVal = sig.getStrengthValue();
  sensor_data.strengthPercentage = sig.getStrength();
   d4112:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
  //float qualityVal = sig.getQualityValue();
  sensor_data.qualityPercentage = sig.getQuality();
   d4116:	f001 fc29 	bl	d596c <_ZNK14CellularSignal10getQualityEv>
   d411a:	ee10 0a10 	vmov	r0, s0
   d411e:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[sensor_data.rat], sensor_data.strengthPercentage, sensor_data.qualityPercentage);
   d4122:	f003 f92d 	bl	d7380 <__aeabi_f2d>
   d4126:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d412a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d412c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   d412e:	f003 f927 	bl	d7380 <__aeabi_f2d>
   d4132:	e9cd 0100 	strd	r0, r1, [sp]
   d4136:	4b07      	ldr	r3, [pc, #28]	; (d4154 <_Z17getSignalStrengthv+0x60>)
   d4138:	4a07      	ldr	r2, [pc, #28]	; (d4158 <_Z17getSignalStrengthv+0x64>)
   d413a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   d413e:	4807      	ldr	r0, [pc, #28]	; (d415c <_Z17getSignalStrengthv+0x68>)
   d4140:	2140      	movs	r1, #64	; 0x40
   d4142:	f001 faff 	bl	d5744 <snprintf>
}
   d4146:	b00f      	add	sp, #60	; 0x3c
   d4148:	bd30      	pop	{r4, r5, pc}
   d414a:	bf00      	nop
   d414c:	2003e344 	.word	0x2003e344
   d4150:	2003e238 	.word	0x2003e238
   d4154:	2003e0d4 	.word	0x2003e0d4
   d4158:	000d8104 	.word	0x000d8104
   d415c:	2003e2b4 	.word	0x2003e2b4

000d4160 <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
   d4160:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // Mocked up here for the call - need to replace with your real readings
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
   d4162:	f002 fc1e 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4166:	4b91      	ldr	r3, [pc, #580]	; (d43ac <_Z16takeMeasurementsv+0x24c>)
   d4168:	6018      	str	r0, [r3, #0]
  int currentMinutes = Time.minute();                                // So we only have to check once
   d416a:	f002 fc2b 	bl	d69c4 <_ZN9TimeClass6minuteEv>
  switch (currentMinutes) {
   d416e:	280f      	cmp	r0, #15
   d4170:	d00a      	beq.n	d4188 <_Z16takeMeasurementsv+0x28>
   d4172:	dd07      	ble.n	d4184 <_Z16takeMeasurementsv+0x24>
   d4174:	281e      	cmp	r0, #30
   d4176:	d003      	beq.n	d4180 <_Z16takeMeasurementsv+0x20>
   d4178:	282d      	cmp	r0, #45	; 0x2d
   d417a:	d103      	bne.n	d4184 <_Z16takeMeasurementsv+0x24>
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
      break; 
    case 45:
      reportCycle = 2;                                                // This is the third of the sample-only periods
   d417c:	2502      	movs	r5, #2
      break; 
   d417e:	e004      	b.n	d418a <_Z16takeMeasurementsv+0x2a>
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
      break;  
    case 30:
      reportCycle = 1;                                                // This is the second of the sample-only periods
   d4180:	2501      	movs	r5, #1
   d4182:	e002      	b.n	d418a <_Z16takeMeasurementsv+0x2a>
      break; 
    case 0:
      reportCycle = 3;                                                // This is the fourth of the sample-only periods
      break; 
    default:
      reportCycle = 3;  
   d4184:	2503      	movs	r5, #3
      break;                                                          // just in case
   d4186:	e000      	b.n	d418a <_Z16takeMeasurementsv+0x2a>
  int reportCycle;                                                    // Where are we in the sense and report cycle
  currentCountTime = Time.now();
  int currentMinutes = Time.minute();                                // So we only have to check once
  switch (currentMinutes) {
    case 15:
      reportCycle = 0;                                                // This is the first of the sample-only periods
   d4188:	2500      	movs	r5, #0
      break;                                                          // just in case
  }
  

  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d418a:	4c89      	ldr	r4, [pc, #548]	; (d43b0 <_Z16takeMeasurementsv+0x250>)
   d418c:	2600      	movs	r6, #0

  // SoilMoisture Measurements here
  sensor_data.soilMoisture1 = random(100);
   d418e:	2064      	movs	r0, #100	; 0x64
      break;                                                          // just in case
  }
  

  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;
   d4190:	7026      	strb	r6, [r4, #0]

  // SoilMoisture Measurements here
  sensor_data.soilMoisture1 = random(100);
   d4192:	f002 fa17 	bl	d65c4 <_Z6randomi>
   d4196:	ee07 0a90 	vmov	s15, r0
   d419a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", sensor_data.soilMoisture1);
   d419e:	ee17 0a90 	vmov	r0, s15

  // Only gets marked true if we get all the measurements
  sensor_data.validData = false;

  // SoilMoisture Measurements here
  sensor_data.soilMoisture1 = random(100);
   d41a2:	edc4 7a02 	vstr	s15, [r4, #8]
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", sensor_data.soilMoisture1);
   d41a6:	f003 f8eb 	bl	d7380 <__aeabi_f2d>
   d41aa:	4a82      	ldr	r2, [pc, #520]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d41ac:	e9cd 0100 	strd	r0, r1, [sp]
   d41b0:	2110      	movs	r1, #16
   d41b2:	4881      	ldr	r0, [pc, #516]	; (d43b8 <_Z16takeMeasurementsv+0x258>)
   d41b4:	f001 fac6 	bl	d5744 <snprintf>
  sensor_data.soilMoisture2 = random(100);
   d41b8:	2064      	movs	r0, #100	; 0x64
   d41ba:	f002 fa03 	bl	d65c4 <_Z6randomi>
   d41be:	ee07 0a90 	vmov	s15, r0
   d41c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", sensor_data.soilMoisture2);
   d41c6:	ee17 0a90 	vmov	r0, s15
  sensor_data.validData = false;

  // SoilMoisture Measurements here
  sensor_data.soilMoisture1 = random(100);
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", sensor_data.soilMoisture1);
  sensor_data.soilMoisture2 = random(100);
   d41ca:	edc4 7a03 	vstr	s15, [r4, #12]
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", sensor_data.soilMoisture2);
   d41ce:	f003 f8d7 	bl	d7380 <__aeabi_f2d>
   d41d2:	4a78      	ldr	r2, [pc, #480]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d41d4:	e9cd 0100 	strd	r0, r1, [sp]
   d41d8:	2110      	movs	r1, #16
   d41da:	4878      	ldr	r0, [pc, #480]	; (d43bc <_Z16takeMeasurementsv+0x25c>)
   d41dc:	f001 fab2 	bl	d5744 <snprintf>
  sensor_data.soilMoisture3 = random(100);
   d41e0:	2064      	movs	r0, #100	; 0x64
   d41e2:	f002 f9ef 	bl	d65c4 <_Z6randomi>
   d41e6:	ee07 0a90 	vmov	s15, r0
   d41ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", sensor_data.soilMoisture3);
   d41ee:	ee17 0a90 	vmov	r0, s15
  // SoilMoisture Measurements here
  sensor_data.soilMoisture1 = random(100);
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", sensor_data.soilMoisture1);
  sensor_data.soilMoisture2 = random(100);
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", sensor_data.soilMoisture2);
  sensor_data.soilMoisture3 = random(100);
   d41f2:	edc4 7a04 	vstr	s15, [r4, #16]
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", sensor_data.soilMoisture3);
   d41f6:	f003 f8c3 	bl	d7380 <__aeabi_f2d>
   d41fa:	4a6e      	ldr	r2, [pc, #440]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d41fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4200:	2110      	movs	r1, #16
   d4202:	486f      	ldr	r0, [pc, #444]	; (d43c0 <_Z16takeMeasurementsv+0x260>)
   d4204:	f001 fa9e 	bl	d5744 <snprintf>
  sensor_data.soilMoisture4 = random(100);
   d4208:	2064      	movs	r0, #100	; 0x64
   d420a:	f002 f9db 	bl	d65c4 <_Z6randomi>
   d420e:	ee07 0a90 	vmov	s15, r0
   d4212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilMoisture4String,sizeof(soilMoisture4String), "%4.1f %%", sensor_data.soilMoisture4);
   d4216:	ee17 0a90 	vmov	r0, s15
  snprintf(soilMoisture1String,sizeof(soilMoisture1String), "%4.1f %%", sensor_data.soilMoisture1);
  sensor_data.soilMoisture2 = random(100);
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", sensor_data.soilMoisture2);
  sensor_data.soilMoisture3 = random(100);
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", sensor_data.soilMoisture3);
  sensor_data.soilMoisture4 = random(100);
   d421a:	edc4 7a05 	vstr	s15, [r4, #20]
  snprintf(soilMoisture4String,sizeof(soilMoisture4String), "%4.1f %%", sensor_data.soilMoisture4);
   d421e:	f003 f8af 	bl	d7380 <__aeabi_f2d>
   d4222:	4a64      	ldr	r2, [pc, #400]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d4224:	e9cd 0100 	strd	r0, r1, [sp]
   d4228:	2110      	movs	r1, #16
   d422a:	4866      	ldr	r0, [pc, #408]	; (d43c4 <_Z16takeMeasurementsv+0x264>)
   d422c:	f001 fa8a 	bl	d5744 <snprintf>
  sensor_data.soilMoisture5 = random(100);
   d4230:	2064      	movs	r0, #100	; 0x64
   d4232:	f002 f9c7 	bl	d65c4 <_Z6randomi>
   d4236:	ee07 0a90 	vmov	s15, r0
   d423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", sensor_data.soilMoisture5);
   d423e:	ee17 0a90 	vmov	r0, s15
  snprintf(soilMoisture2String,sizeof(soilMoisture2String), "%4.1f %%", sensor_data.soilMoisture2);
  sensor_data.soilMoisture3 = random(100);
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", sensor_data.soilMoisture3);
  sensor_data.soilMoisture4 = random(100);
  snprintf(soilMoisture4String,sizeof(soilMoisture4String), "%4.1f %%", sensor_data.soilMoisture4);
  sensor_data.soilMoisture5 = random(100);
   d4242:	edc4 7a06 	vstr	s15, [r4, #24]
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", sensor_data.soilMoisture5);
   d4246:	f003 f89b 	bl	d7380 <__aeabi_f2d>
   d424a:	4a5a      	ldr	r2, [pc, #360]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d424c:	e9cd 0100 	strd	r0, r1, [sp]
   d4250:	2110      	movs	r1, #16
   d4252:	485d      	ldr	r0, [pc, #372]	; (d43c8 <_Z16takeMeasurementsv+0x268>)
   d4254:	f001 fa76 	bl	d5744 <snprintf>
  sensor_data.soilMoisture6 = random(100);
   d4258:	2064      	movs	r0, #100	; 0x64
   d425a:	f002 f9b3 	bl	d65c4 <_Z6randomi>
   d425e:	ee07 0a90 	vmov	s15, r0
   d4262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilMoisture6String,sizeof(soilMoisture6String), "%4.1f %%", sensor_data.soilMoisture6);
   d4266:	ee17 0a90 	vmov	r0, s15
  snprintf(soilMoisture3String,sizeof(soilMoisture3String), "%4.1f %%", sensor_data.soilMoisture3);
  sensor_data.soilMoisture4 = random(100);
  snprintf(soilMoisture4String,sizeof(soilMoisture4String), "%4.1f %%", sensor_data.soilMoisture4);
  sensor_data.soilMoisture5 = random(100);
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", sensor_data.soilMoisture5);
  sensor_data.soilMoisture6 = random(100);
   d426a:	edc4 7a07 	vstr	s15, [r4, #28]
  snprintf(soilMoisture6String,sizeof(soilMoisture6String), "%4.1f %%", sensor_data.soilMoisture6);
   d426e:	f003 f887 	bl	d7380 <__aeabi_f2d>
   d4272:	4a50      	ldr	r2, [pc, #320]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d4274:	e9cd 0100 	strd	r0, r1, [sp]
   d4278:	2110      	movs	r1, #16
   d427a:	4854      	ldr	r0, [pc, #336]	; (d43cc <_Z16takeMeasurementsv+0x26c>)
   d427c:	f001 fa62 	bl	d5744 <snprintf>

  // Number of times the precipitation counter has tipped
  sensor_data.precipitationCount = random(1000);
   d4280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4284:	f002 f99e 	bl	d65c4 <_Z6randomi>
  snprintf(precipitationCountString,sizeof(precipitationCountString), "%i tips", sensor_data.precipitationCount);
   d4288:	4a51      	ldr	r2, [pc, #324]	; (d43d0 <_Z16takeMeasurementsv+0x270>)
  snprintf(soilMoisture5String,sizeof(soilMoisture5String), "%4.1f %%", sensor_data.soilMoisture5);
  sensor_data.soilMoisture6 = random(100);
  snprintf(soilMoisture6String,sizeof(soilMoisture6String), "%4.1f %%", sensor_data.soilMoisture6);

  // Number of times the precipitation counter has tipped
  sensor_data.precipitationCount = random(1000);
   d428a:	6220      	str	r0, [r4, #32]
   d428c:	4603      	mov	r3, r0
  snprintf(precipitationCountString,sizeof(precipitationCountString), "%i tips", sensor_data.precipitationCount);
   d428e:	2110      	movs	r1, #16
   d4290:	4850      	ldr	r0, [pc, #320]	; (d43d4 <_Z16takeMeasurementsv+0x274>)
   d4292:	f001 fa57 	bl	d5744 <snprintf>

  // Measure the soil temp
  sensor_data.soilTempInC = random(100);
   d4296:	2064      	movs	r0, #100	; 0x64
   d4298:	f002 f994 	bl	d65c4 <_Z6randomi>
   d429c:	ee07 0a90 	vmov	s15, r0
   d42a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(soilTempInCString, sizeof(soilTempInCString), "%4.1f C", sensor_data.soilTempInC);
   d42a4:	ee17 0a90 	vmov	r0, s15
  // Number of times the precipitation counter has tipped
  sensor_data.precipitationCount = random(1000);
  snprintf(precipitationCountString,sizeof(precipitationCountString), "%i tips", sensor_data.precipitationCount);

  // Measure the soil temp
  sensor_data.soilTempInC = random(100);
   d42a8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  snprintf(soilTempInCString, sizeof(soilTempInCString), "%4.1f C", sensor_data.soilTempInC);
   d42ac:	f003 f868 	bl	d7380 <__aeabi_f2d>
   d42b0:	4a49      	ldr	r2, [pc, #292]	; (d43d8 <_Z16takeMeasurementsv+0x278>)
   d42b2:	e9cd 0100 	strd	r0, r1, [sp]
   d42b6:	2110      	movs	r1, #16
   d42b8:	4848      	ldr	r0, [pc, #288]	; (d43dc <_Z16takeMeasurementsv+0x27c>)
   d42ba:	f001 fa43 	bl	d5744 <snprintf>

  // Meaure air temp and humidity
  sensor_data.humidity = random(100);
   d42be:	2064      	movs	r0, #100	; 0x64
   d42c0:	f002 f980 	bl	d65c4 <_Z6randomi>
   d42c4:	ee07 0a90 	vmov	s15, r0
   d42c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", sensor_data.humidity);
   d42cc:	ee17 0a90 	vmov	r0, s15
  // Measure the soil temp
  sensor_data.soilTempInC = random(100);
  snprintf(soilTempInCString, sizeof(soilTempInCString), "%4.1f C", sensor_data.soilTempInC);

  // Meaure air temp and humidity
  sensor_data.humidity = random(100);
   d42d0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", sensor_data.humidity);
   d42d4:	f003 f854 	bl	d7380 <__aeabi_f2d>
   d42d8:	4a36      	ldr	r2, [pc, #216]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d42da:	e9cd 0100 	strd	r0, r1, [sp]
   d42de:	2110      	movs	r1, #16
   d42e0:	483f      	ldr	r0, [pc, #252]	; (d43e0 <_Z16takeMeasurementsv+0x280>)
   d42e2:	f001 fa2f 	bl	d5744 <snprintf>

  sensor_data.temperature = random(100);
   d42e6:	2064      	movs	r0, #100	; 0x64
   d42e8:	f002 f96c 	bl	d65c4 <_Z6randomi>
   d42ec:	ee07 0a90 	vmov	s15, r0
   d42f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", sensor_data.temperature);
   d42f4:	ee17 0a90 	vmov	r0, s15

  // Meaure air temp and humidity
  sensor_data.humidity = random(100);
  snprintf(humidityString,sizeof(humidityString), "%4.1f %%", sensor_data.humidity);

  sensor_data.temperature = random(100);
   d42f8:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", sensor_data.temperature);
   d42fc:	f003 f840 	bl	d7380 <__aeabi_f2d>
   d4300:	4a35      	ldr	r2, [pc, #212]	; (d43d8 <_Z16takeMeasurementsv+0x278>)
   d4302:	e9cd 0100 	strd	r0, r1, [sp]
   d4306:	2110      	movs	r1, #16
   d4308:	4836      	ldr	r0, [pc, #216]	; (d43e4 <_Z16takeMeasurementsv+0x284>)
   d430a:	f001 fa1b 	bl	d5744 <snprintf>

  // Measure panel temp and humidity
  sensor_data.panelHumidity = random(100);
   d430e:	2064      	movs	r0, #100	; 0x64
   d4310:	f002 f958 	bl	d65c4 <_Z6randomi>
   d4314:	ee07 0a90 	vmov	s15, r0
   d4318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(panelHumidityString,sizeof(panelHumidityString), "%4.1f %%", sensor_data.panelHumidity);
   d431c:	ee17 0a90 	vmov	r0, s15

  sensor_data.temperature = random(100);
  snprintf(temperatureString,sizeof(temperatureString), "%4.1f C", sensor_data.temperature);

  // Measure panel temp and humidity
  sensor_data.panelHumidity = random(100);
   d4320:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
  snprintf(panelHumidityString,sizeof(panelHumidityString), "%4.1f %%", sensor_data.panelHumidity);
   d4324:	f003 f82c 	bl	d7380 <__aeabi_f2d>
   d4328:	4a22      	ldr	r2, [pc, #136]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d432a:	e9cd 0100 	strd	r0, r1, [sp]
   d432e:	2110      	movs	r1, #16
   d4330:	482d      	ldr	r0, [pc, #180]	; (d43e8 <_Z16takeMeasurementsv+0x288>)
   d4332:	f001 fa07 	bl	d5744 <snprintf>

  sensor_data.panelTemperature = random(100);
   d4336:	2064      	movs	r0, #100	; 0x64
   d4338:	f002 f944 	bl	d65c4 <_Z6randomi>
   d433c:	ee07 0a90 	vmov	s15, r0
   d4340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  snprintf(panelTemperatureString,sizeof(panelTemperatureString), "%4.1f C", sensor_data.panelTemperature);
   d4344:	ee17 0a90 	vmov	r0, s15

  // Measure panel temp and humidity
  sensor_data.panelHumidity = random(100);
  snprintf(panelHumidityString,sizeof(panelHumidityString), "%4.1f %%", sensor_data.panelHumidity);

  sensor_data.panelTemperature = random(100);
   d4348:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
  snprintf(panelTemperatureString,sizeof(panelTemperatureString), "%4.1f C", sensor_data.panelTemperature);
   d434c:	f003 f818 	bl	d7380 <__aeabi_f2d>
   d4350:	4a21      	ldr	r2, [pc, #132]	; (d43d8 <_Z16takeMeasurementsv+0x278>)
   d4352:	e9cd 0100 	strd	r0, r1, [sp]
   d4356:	2110      	movs	r1, #16
   d4358:	4824      	ldr	r0, [pc, #144]	; (d43ec <_Z16takeMeasurementsv+0x28c>)
   d435a:	f001 f9f3 	bl	d5744 <snprintf>

  // Get battery voltage level
  sensor_data.batteryVoltage = 4.0;                      // Voltage level of battery
   d435e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
   d4362:	63a3      	str	r3, [r4, #56]	; 0x38
  snprintf(batteryString, sizeof(batteryString), "%4.1f %%", sensor_data.batteryVoltage);
   d4364:	4b22      	ldr	r3, [pc, #136]	; (d43f0 <_Z16takeMeasurementsv+0x290>)
   d4366:	4823      	ldr	r0, [pc, #140]	; (d43f4 <_Z16takeMeasurementsv+0x294>)
   d4368:	2200      	movs	r2, #0
   d436a:	e9cd 2300 	strd	r2, r3, [sp]
   d436e:	2110      	movs	r1, #16
   d4370:	4a10      	ldr	r2, [pc, #64]	; (d43b4 <_Z16takeMeasurementsv+0x254>)
   d4372:	f001 f9e7 	bl	d5744 <snprintf>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4376:	4b20      	ldr	r3, [pc, #128]	; (d43f8 <_Z16takeMeasurementsv+0x298>)
   d4378:	4632      	mov	r2, r6
   d437a:	4631      	mov	r1, r6
   d437c:	6858      	ldr	r0, [r3, #4]
   d437e:	f001 f981 	bl	d5684 <network_ready>

  if (Cellular.ready()) getSignalStrength();                            // Test signal strength if the cellular modem is on and ready
   d4382:	b108      	cbz	r0, d4388 <_Z16takeMeasurementsv+0x228>
   d4384:	f7ff feb6 	bl	d40f4 <_Z17getSignalStrengthv>

  // Indicate that this is a valid data array and store it
  sensor_data.validData = true;
   d4388:	2601      	movs	r6, #1
   d438a:	7026      	strb	r6, [r4, #0]
  sensor_data.timeStamp = Time.now();
   d438c:	f002 fb09 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4390:	6060      	str	r0, [r4, #4]
  EEPROM.put(6 + 100*reportCycle,sensor_data);                              // Current object is 72 bytes long - leaving some room for expansion
   d4392:	f002 fce9 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4396:	2064      	movs	r0, #100	; 0x64
   d4398:	4368      	muls	r0, r5
   d439a:	2248      	movs	r2, #72	; 0x48
   d439c:	4904      	ldr	r1, [pc, #16]	; (d43b0 <_Z16takeMeasurementsv+0x250>)
   d439e:	3006      	adds	r0, #6
   d43a0:	f000 ff92 	bl	d52c8 <HAL_EEPROM_Put>

  return 1;                                                             // Done, measurements take and the data array is stored as an obeect in EEPROM                                         
}
   d43a4:	4630      	mov	r0, r6
   d43a6:	b002      	add	sp, #8
   d43a8:	bd70      	pop	{r4, r5, r6, pc}
   d43aa:	bf00      	nop
   d43ac:	2003e1d8 	.word	0x2003e1d8
   d43b0:	2003e238 	.word	0x2003e238
   d43b4:	000d811d 	.word	0x000d811d
   d43b8:	2003e1c4 	.word	0x2003e1c4
   d43bc:	2003e1dc 	.word	0x2003e1dc
   d43c0:	2003e1ed 	.word	0x2003e1ed
   d43c4:	2003e204 	.word	0x2003e204
   d43c8:	2003e228 	.word	0x2003e228
   d43cc:	2003e291 	.word	0x2003e291
   d43d0:	000d8126 	.word	0x000d8126
   d43d4:	2003e214 	.word	0x2003e214
   d43d8:	000d812e 	.word	0x000d812e
   d43dc:	2003e280 	.word	0x2003e280
   d43e0:	2003e31c 	.word	0x2003e31c
   d43e4:	2003e1b0 	.word	0x2003e1b0
   d43e8:	2003e30c 	.word	0x2003e30c
   d43ec:	2003e2fc 	.word	0x2003e2fc
   d43f0:	40100000 	.word	0x40100000
   d43f4:	2003e32c 	.word	0x2003e32c
   d43f8:	2003e344 	.word	0x2003e344

000d43fc <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[sensor_data.rat], sensor_data.strengthPercentage, sensor_data.qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
   d43fc:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4400:	482a      	ldr	r0, [pc, #168]	; (d44ac <_Z17connectToParticlev+0xb0>)
   d4402:	2300      	movs	r3, #0
   d4404:	461a      	mov	r2, r3
   d4406:	4619      	mov	r1, r3
   d4408:	6840      	ldr	r0, [r0, #4]
   d440a:	f001 f943 	bl	d5694 <network_on>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d440e:	f001 f8d9 	bl	d55c4 <spark_cloud_flag_connect>
   d4412:	f44f 7496 	mov.w	r4, #300	; 0x12c


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4416:	f240 36e7 	movw	r6, #999	; 0x3e7
   d441a:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d441c:	2000      	movs	r0, #0
   d441e:	f000 ff63 	bl	d52e8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4422:	f04f 0900 	mov.w	r9, #0
   d4426:	4680      	mov	r8, r0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4428:	2000      	movs	r0, #0
   d442a:	f000 ff5d 	bl	d52e8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d442e:	ebb0 0008 	subs.w	r0, r0, r8
   d4432:	eb61 0109 	sbc.w	r1, r1, r9
   d4436:	428f      	cmp	r7, r1
   d4438:	bf08      	it	eq
   d443a:	4286      	cmpeq	r6, r0
   d443c:	d305      	bcc.n	d444a <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d443e:	f001 f8d1 	bl	d55e4 <spark_cloud_flag_connected>
   d4442:	b910      	cbnz	r0, d444a <_Z17connectToParticlev+0x4e>
            spark_process();
   d4444:	f001 f8b6 	bl	d55b4 <spark_process>
   d4448:	e7ee      	b.n	d4428 <_Z17connectToParticlev+0x2c>
   d444a:	f001 f8cb 	bl	d55e4 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d444e:	b1d0      	cbz	r0, d4486 <_Z17connectToParticlev+0x8a>
   d4450:	f001 f8c8 	bl	d55e4 <spark_cloud_flag_connected>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) {
   d4454:	4604      	mov	r4, r0
   d4456:	b328      	cbz	r0, d44a4 <_Z17connectToParticlev+0xa8>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4458:	2000      	movs	r0, #0
   d445a:	f000 ff45 	bl	d52e8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d445e:	2700      	movs	r7, #0
   d4460:	4606      	mov	r6, r0
   d4462:	f64e 285f 	movw	r8, #59999	; 0xea5f
   d4466:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d446a:	2000      	movs	r0, #0
   d446c:	f000 ff3c 	bl	d52e8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4470:	1b80      	subs	r0, r0, r6
   d4472:	eb61 0107 	sbc.w	r1, r1, r7
   d4476:	4589      	cmp	r9, r1
   d4478:	bf08      	it	eq
   d447a:	4580      	cmpeq	r8, r0
   d447c:	d30c      	bcc.n	d4498 <_Z17connectToParticlev+0x9c>
    waitFor(Time.isValid, 60000);
   d447e:	f002 fa6f 	bl	d6960 <_ZN9TimeClass7isValidEv>
   d4482:	b948      	cbnz	r0, d4498 <_Z17connectToParticlev+0x9c>
   d4484:	e00b      	b.n	d449e <_Z17connectToParticlev+0xa2>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4486:	f000 feef 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d448a:	4b09      	ldr	r3, [pc, #36]	; (d44b0 <_Z17connectToParticlev+0xb4>)
   d448c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d448e:	f001 f891 	bl	d55b4 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4492:	3c01      	subs	r4, #1
   d4494:	d0dc      	beq.n	d4450 <_Z17connectToParticlev+0x54>
   d4496:	e7c1      	b.n	d441c <_Z17connectToParticlev+0x20>
    // Code I want to run while connecting
    Particle.process();
  }
  if (Particle.connected()) {
    waitFor(Time.isValid, 60000);
   d4498:	f002 fa62 	bl	d6960 <_ZN9TimeClass7isValidEv>
   d449c:	e002      	b.n	d44a4 <_Z17connectToParticlev+0xa8>
            spark_process();
   d449e:	f001 f889 	bl	d55b4 <spark_process>
   d44a2:	e7e2      	b.n	d446a <_Z17connectToParticlev+0x6e>
    return 1;                               // Were able to connect successfully
  }
  else return 0;                                                    // Failed to connect
}
   d44a4:	4620      	mov	r0, r4
   d44a6:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
   d44aa:	bf00      	nop
   d44ac:	2003e344 	.word	0x2003e344
   d44b0:	2003e6e4 	.word	0x2003e6e4

000d44b4 <_Z22disconnectFromParticlev>:

bool disconnectFromParticle()
{
   d44b4:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d44b6:	f001 f88d 	bl	d55d4 <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d44ba:	4806      	ldr	r0, [pc, #24]	; (d44d4 <_Z22disconnectFromParticlev+0x20>)
   d44bc:	2300      	movs	r3, #0
   d44be:	461a      	mov	r2, r3
   d44c0:	4619      	mov	r1, r3
   d44c2:	6840      	ldr	r0, [r0, #4]
   d44c4:	f001 f8ee 	bl	d56a4 <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
   d44c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d44cc:	f001 f952 	bl	d5774 <delay>
  return true;
}
   d44d0:	2001      	movs	r0, #1
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	2003e344 	.word	0x2003e344

000d44d8 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
   d44d8:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish >= publishFrequency) {
   d44da:	4c07      	ldr	r4, [pc, #28]	; (d44f8 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44dc:	f000 fec4 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
   d44e0:	6823      	ldr	r3, [r4, #0]
   d44e2:	1ac0      	subs	r0, r0, r3
   d44e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d44e8:	d304      	bcc.n	d44f4 <_Z20meterParticlePublishv+0x1c>
   d44ea:	f000 febd 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d44ee:	6020      	str	r0, [r4, #0]
   d44f0:	2001      	movs	r0, #1
   d44f2:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d44f4:	2000      	movs	r0, #0
}
   d44f6:	bd10      	pop	{r4, pc}
   d44f8:	2003e2f4 	.word	0x2003e2f4

000d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d44fc:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
   d44fe:	f7ff ffeb 	bl	d44d8 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4502:	b118      	cbz	r0, d450c <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4508:	f7ff bfe6 	b.w	d44d8 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d450c:	f001 f852 	bl	d55b4 <spark_process>
   d4510:	e7f5      	b.n	d44fe <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44+0x2>
	...

000d4514 <_Z14fullModemResetv>:
    return 1;
  }
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
   d4514:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4516:	f001 f85d 	bl	d55d4 <spark_cloud_flag_disconnect>
   d451a:	f000 fea5 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d451e:	f643 2597 	movw	r5, #14999	; 0x3a97
   d4522:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4524:	f001 f85e 	bl	d55e4 <spark_cloud_flag_connected>
   d4528:	b140      	cbz	r0, d453c <_Z14fullModemResetv+0x28>
   d452a:	f000 fe9d 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
   d452e:	1b00      	subs	r0, r0, r4
   d4530:	42a8      	cmp	r0, r5
   d4532:	d803      	bhi.n	d453c <_Z14fullModemResetv+0x28>
		delay(100);
   d4534:	2064      	movs	r0, #100	; 0x64
   d4536:	f001 f91d 	bl	d5774 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d453a:	e7f3      	b.n	d4524 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d453c:	2100      	movs	r1, #0
   d453e:	4b09      	ldr	r3, [pc, #36]	; (d4564 <_Z14fullModemResetv+0x50>)
   d4540:	f247 5230 	movw	r2, #30000	; 0x7530
   d4544:	4608      	mov	r0, r1
   d4546:	f000 fe3f 	bl	d51c8 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
   d454a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d454e:	f001 f911 	bl	d5774 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d4552:	4b05      	ldr	r3, [pc, #20]	; (d4568 <_Z14fullModemResetv+0x54>)
   d4554:	220a      	movs	r2, #10
   d4556:	681b      	ldr	r3, [r3, #0]
   d4558:	2101      	movs	r1, #1
   d455a:	4668      	mov	r0, sp
   d455c:	f002 f918 	bl	d6790 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d4560:	b003      	add	sp, #12
   d4562:	bd30      	pop	{r4, r5, pc}
   d4564:	000d8136 	.word	0x000d8136
   d4568:	2003e2a4 	.word	0x2003e2a4

000d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d456c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d456e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4570:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4572:	b17c      	cbz	r4, d4594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4574:	6863      	ldr	r3, [r4, #4]
   d4576:	3b01      	subs	r3, #1
   d4578:	6063      	str	r3, [r4, #4]
   d457a:	b95b      	cbnz	r3, d4594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d457c:	6823      	ldr	r3, [r4, #0]
   d457e:	4620      	mov	r0, r4
   d4580:	689b      	ldr	r3, [r3, #8]
   d4582:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4584:	68a3      	ldr	r3, [r4, #8]
   d4586:	3b01      	subs	r3, #1
   d4588:	60a3      	str	r3, [r4, #8]
   d458a:	b91b      	cbnz	r3, d4594 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d458c:	6823      	ldr	r3, [r4, #0]
   d458e:	4620      	mov	r0, r4
   d4590:	68db      	ldr	r3, [r3, #12]
   d4592:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4594:	4628      	mov	r0, r5
   d4596:	bd38      	pop	{r3, r4, r5, pc}

000d4598 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
   d4598:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d459a:	4c44      	ldr	r4, [pc, #272]	; (d46ac <_Z9sendEventv+0x114>)
  char data[512];                                                     // Store the date in this character array - not global
  for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(6 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
    snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", sensor_data.soilMoisture1, sensor_data.soilMoisture2, sensor_data.soilMoisture3, sensor_data.soilMoisture4, sensor_data.soilMoisture5, sensor_data.soilMoisture6, sensor_data.precipitationCount, sensor_data.soilTempInC, sensor_data.humidity, sensor_data.temperature, sensor_data.panelHumidity, sensor_data.panelTemperature, sensor_data.batteryVoltage, sensor_data.rat, sensor_data.strengthPercentage, sensor_data.qualityPercentage,resetCount, alertCount);
   d459c:	4f44      	ldr	r7, [pc, #272]	; (d46b0 <_Z9sendEventv+0x118>)
   d459e:	4e45      	ldr	r6, [pc, #276]	; (d46b4 <_Z9sendEventv+0x11c>)
    break;
  }
}

void sendEvent()
{
   d45a0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
   d45a4:	2506      	movs	r5, #6
  char data[512];                                                     // Store the date in this character array - not global
  for (int i = 0; i < 4; i++) {
    sensor_data = EEPROM.get(6 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d45a6:	f002 fbdf 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d45aa:	2248      	movs	r2, #72	; 0x48
   d45ac:	4628      	mov	r0, r5
   d45ae:	493f      	ldr	r1, [pc, #252]	; (d46ac <_Z9sendEventv+0x114>)
   d45b0:	f000 fe82 	bl	d52b8 <HAL_EEPROM_Get>
    snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", sensor_data.soilMoisture1, sensor_data.soilMoisture2, sensor_data.soilMoisture3, sensor_data.soilMoisture4, sensor_data.soilMoisture5, sensor_data.soilMoisture6, sensor_data.precipitationCount, sensor_data.soilTempInC, sensor_data.humidity, sensor_data.temperature, sensor_data.panelHumidity, sensor_data.panelTemperature, sensor_data.batteryVoltage, sensor_data.rat, sensor_data.strengthPercentage, sensor_data.qualityPercentage,resetCount, alertCount);
   d45b4:	683b      	ldr	r3, [r7, #0]
   d45b6:	9321      	str	r3, [sp, #132]	; 0x84
   d45b8:	6833      	ldr	r3, [r6, #0]
   d45ba:	9320      	str	r3, [sp, #128]	; 0x80
   d45bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   d45be:	f002 fedf 	bl	d7380 <__aeabi_f2d>
   d45c2:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
   d45c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d45c8:	f002 feda 	bl	d7380 <__aeabi_f2d>
   d45cc:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   d45d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d45d2:	931a      	str	r3, [sp, #104]	; 0x68
   d45d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d45d6:	f002 fed3 	bl	d7380 <__aeabi_f2d>
   d45da:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   d45de:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d45e0:	f002 fece 	bl	d7380 <__aeabi_f2d>
   d45e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   d45e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d45ea:	f002 fec9 	bl	d7380 <__aeabi_f2d>
   d45ee:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d45f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d45f4:	f002 fec4 	bl	d7380 <__aeabi_f2d>
   d45f8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   d45fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d45fe:	f002 febf 	bl	d7380 <__aeabi_f2d>
   d4602:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   d4606:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4608:	f002 feba 	bl	d7380 <__aeabi_f2d>
   d460c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   d4610:	6a23      	ldr	r3, [r4, #32]
   d4612:	930c      	str	r3, [sp, #48]	; 0x30
   d4614:	69e0      	ldr	r0, [r4, #28]
   d4616:	f002 feb3 	bl	d7380 <__aeabi_f2d>
   d461a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d461e:	69a0      	ldr	r0, [r4, #24]
   d4620:	f002 feae 	bl	d7380 <__aeabi_f2d>
   d4624:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4628:	6960      	ldr	r0, [r4, #20]
   d462a:	f002 fea9 	bl	d7380 <__aeabi_f2d>
   d462e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4632:	6920      	ldr	r0, [r4, #16]
   d4634:	f002 fea4 	bl	d7380 <__aeabi_f2d>
   d4638:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d463c:	68e0      	ldr	r0, [r4, #12]
   d463e:	f002 fe9f 	bl	d7380 <__aeabi_f2d>
   d4642:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4646:	68a0      	ldr	r0, [r4, #8]
   d4648:	f002 fe9a 	bl	d7380 <__aeabi_f2d>
   d464c:	4a1a      	ldr	r2, [pc, #104]	; (d46b8 <_Z9sendEventv+0x120>)
   d464e:	e9cd 0100 	strd	r0, r1, [sp]
   d4652:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4656:	a824      	add	r0, sp, #144	; 0x90
   d4658:	f001 f874 	bl	d5744 <snprintf>
   d465c:	4b17      	ldr	r3, [pc, #92]	; (d46bc <_Z9sendEventv+0x124>)
    Particle.publish("Cellular_LiPo_Hook", data, PRIVATE);            // If lowPowerMode - must have clear to send
   d465e:	4918      	ldr	r1, [pc, #96]	; (d46c0 <_Z9sendEventv+0x128>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4660:	781b      	ldrb	r3, [r3, #0]
   d4662:	2200      	movs	r2, #0
   d4664:	f88d 2000 	strb.w	r2, [sp]
   d4668:	a822      	add	r0, sp, #136	; 0x88
   d466a:	aa24      	add	r2, sp, #144	; 0x90
   d466c:	f7ff fd34 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4670:	3564      	adds	r5, #100	; 0x64
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4672:	a823      	add	r0, sp, #140	; 0x8c
   d4674:	f7ff ff7a 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    waitUntil(meterParticlePublish);                                  // Space out the sends
   d4678:	f7ff ff40 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
}

void sendEvent()
{
  char data[512];                                                     // Store the date in this character array - not global
  for (int i = 0; i < 4; i++) {
   d467c:	f5b5 7fcb 	cmp.w	r5, #406	; 0x196
   d4680:	d191      	bne.n	d45a6 <_Z9sendEventv+0xe>
    sensor_data = EEPROM.get(6 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
    snprintf(data, sizeof(data), "{\"Soilmoisture1\":%4.1f, \"Soilmoisture2\":%4.1f, \"Soilmoisture3\":%4.1f, \"Soilmoisture4\":%4.1f, \"Soilmoisture5\":%4.1f, \"Soilmoisture6\":%4.1f, \"Precipitation\": %i, \"Soiltemp\":%4.1f, \"Humidity\":%4.1f, \"Temperature\":%4.1f, \"Panelhumidity\":%4.1f, \"Paneltemperature\":%4.1f, \"Battery\":%4.1f, \"Radiotech\": %i, \"Signal\": %4.1f, \"Quality\": %4.1f, \"Resets\":%i, \"Alerts\":%i}", sensor_data.soilMoisture1, sensor_data.soilMoisture2, sensor_data.soilMoisture3, sensor_data.soilMoisture4, sensor_data.soilMoisture5, sensor_data.soilMoisture6, sensor_data.precipitationCount, sensor_data.soilTempInC, sensor_data.humidity, sensor_data.temperature, sensor_data.panelHumidity, sensor_data.panelTemperature, sensor_data.batteryVoltage, sensor_data.rat, sensor_data.strengthPercentage, sensor_data.qualityPercentage,resetCount, alertCount);
    Particle.publish("Cellular_LiPo_Hook", data, PRIVATE);            // If lowPowerMode - must have clear to send
    waitUntil(meterParticlePublish);                                  // Space out the sends
  }
  currentCountTime = Time.now();
   d4682:	f002 f98e 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4686:	4c0f      	ldr	r4, [pc, #60]	; (d46c4 <_Z9sendEventv+0x12c>)
   d4688:	6020      	str	r0, [r4, #0]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d468a:	f002 fb6d 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d468e:	7821      	ldrb	r1, [r4, #0]
   d4690:	2005      	movs	r0, #5
   d4692:	f7ff fd1f 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
  dataInFlight = true;                                                // set the data inflight flag
   d4696:	4b0c      	ldr	r3, [pc, #48]	; (d46c8 <_Z9sendEventv+0x130>)
   d4698:	2201      	movs	r2, #1
   d469a:	701a      	strb	r2, [r3, #0]
   d469c:	f000 fde4 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d46a0:	4b0a      	ldr	r3, [pc, #40]	; (d46cc <_Z9sendEventv+0x134>)
   d46a2:	6018      	str	r0, [r3, #0]
}
   d46a4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
   d46a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46aa:	bf00      	nop
   d46ac:	2003e238 	.word	0x2003e238
   d46b0:	2003e224 	.word	0x2003e224
   d46b4:	2003e200 	.word	0x2003e200
   d46b8:	000d8143 	.word	0x000d8143
   d46bc:	2003e1d4 	.word	0x2003e1d4
   d46c0:	000d82ac 	.word	0x000d82ac
   d46c4:	2003e1d8 	.word	0x2003e1d8
   d46c8:	2003e0cc 	.word	0x2003e0cc
   d46cc:	2003e1c0 	.word	0x2003e1c0

000d46d0 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d46d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d46d2:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d46d4:	4608      	mov	r0, r1
  dataInFlight = true;                                                // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d46d6:	af02      	add	r7, sp, #8
   d46d8:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d46da:	f003 f88e 	bl	d77fa <strlen>
   d46de:	f100 0308 	add.w	r3, r0, #8
   d46e2:	f023 0307 	bic.w	r3, r3, #7
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d46e6:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
   d46e8:	ebad 0d03 	sub.w	sp, sp, r3
   d46ec:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
   d46ee:	1c42      	adds	r2, r0, #1
   d46f0:	4631      	mov	r1, r6
   d46f2:	4620      	mov	r0, r4
   d46f4:	f003 f89e 	bl	d7834 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
   d46f8:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d46fc:	b94e      	cbnz	r6, d4712 <_Z14UbidotsHandlerPKcS0_+0x42>
   d46fe:	f000 ff71 	bl	d55e4 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4702:	2800      	cmp	r0, #0
   d4704:	d037      	beq.n	d4776 <_Z14UbidotsHandlerPKcS0_+0xa6>
   d4706:	4b1e      	ldr	r3, [pc, #120]	; (d4780 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d4708:	4a1e      	ldr	r2, [pc, #120]	; (d4784 <_Z14UbidotsHandlerPKcS0_+0xb4>)
   d470a:	781b      	ldrb	r3, [r3, #0]
   d470c:	f88d 6000 	strb.w	r6, [sp]
   d4710:	e02a      	b.n	d4768 <_Z14UbidotsHandlerPKcS0_+0x98>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
   d4712:	4620      	mov	r0, r4
   d4714:	f002 fec4 	bl	d74a0 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4718:	38c8      	subs	r0, #200	; 0xc8
   d471a:	2801      	cmp	r0, #1
   d471c:	d81b      	bhi.n	d4756 <_Z14UbidotsHandlerPKcS0_+0x86>
   d471e:	f000 ff61 	bl	d55e4 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
   d4722:	b160      	cbz	r0, d473e <_Z14UbidotsHandlerPKcS0_+0x6e>
   d4724:	4b16      	ldr	r3, [pc, #88]	; (d4780 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d4726:	4918      	ldr	r1, [pc, #96]	; (d4788 <_Z14UbidotsHandlerPKcS0_+0xb8>)
   d4728:	781b      	ldrb	r3, [r3, #0]
   d472a:	2200      	movs	r2, #0
   d472c:	f88d 2000 	strb.w	r2, [sp]
   d4730:	4638      	mov	r0, r7
   d4732:	4a16      	ldr	r2, [pc, #88]	; (d478c <_Z14UbidotsHandlerPKcS0_+0xbc>)
   d4734:	f7ff fcd0 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4738:	1d38      	adds	r0, r7, #4
   d473a:	f7ff ff17 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
   d473e:	f002 fb13 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4742:	f002 f92e 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4746:	b2c1      	uxtb	r1, r0
   d4748:	2005      	movs	r0, #5
   d474a:	f7ff fcc3 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
    dataInFlight = false;                                             // Data has been received
   d474e:	4b10      	ldr	r3, [pc, #64]	; (d4790 <_Z14UbidotsHandlerPKcS0_+0xc0>)
   d4750:	2200      	movs	r2, #0
   d4752:	701a      	strb	r2, [r3, #0]
   d4754:	e00f      	b.n	d4776 <_Z14UbidotsHandlerPKcS0_+0xa6>
   d4756:	f000 ff45 	bl	d55e4 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
   d475a:	b160      	cbz	r0, d4776 <_Z14UbidotsHandlerPKcS0_+0xa6>
   d475c:	4b08      	ldr	r3, [pc, #32]	; (d4780 <_Z14UbidotsHandlerPKcS0_+0xb0>)
   d475e:	2200      	movs	r2, #0
   d4760:	781b      	ldrb	r3, [r3, #0]
   d4762:	f88d 2000 	strb.w	r2, [sp]
   d4766:	4622      	mov	r2, r4
   d4768:	4638      	mov	r0, r7
   d476a:	490a      	ldr	r1, [pc, #40]	; (d4794 <_Z14UbidotsHandlerPKcS0_+0xc4>)
   d476c:	f7ff fcb4 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4770:	1d38      	adds	r0, r7, #4
   d4772:	f7ff fefb 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4776:	370c      	adds	r7, #12
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
   d4778:	46ad      	mov	sp, r5
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
   d477a:	46bd      	mov	sp, r7
   d477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d477e:	bf00      	nop
   d4780:	2003e1d4 	.word	0x2003e1d4
   d4784:	000d82bf 	.word	0x000d82bf
   d4788:	000d82e6 	.word	0x000d82e6
   d478c:	000d82d4 	.word	0x000d82d4
   d4790:	2003e0cc 	.word	0x2003e0cc
   d4794:	000d82c7 	.word	0x000d82c7

000d4798 <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4798:	b530      	push	{r4, r5, lr}
   d479a:	4922      	ldr	r1, [pc, #136]	; (d4824 <_Z14setVerboseMode6String+0x8c>)
   d479c:	b085      	sub	sp, #20
   d479e:	4605      	mov	r5, r0
   d47a0:	f001 ffc3 	bl	d672a <_ZNK6String6equalsEPKc>
  if (command == "1")
   d47a4:	4604      	mov	r4, r0
   d47a6:	b1c0      	cbz	r0, d47da <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
   d47a8:	4b1f      	ldr	r3, [pc, #124]	; (d4828 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
   d47aa:	4d20      	ldr	r5, [pc, #128]	; (d482c <_Z14setVerboseMode6String+0x94>)

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
   d47ac:	2401      	movs	r4, #1
   d47ae:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d47b0:	f002 fada 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d47b4:	2004      	movs	r0, #4
   d47b6:	f7ff fc8b 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
   d47ba:	f040 0008 	orr.w	r0, r0, #8
   d47be:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d47c0:	f002 fad2 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d47c4:	7829      	ldrb	r1, [r5, #0]
   d47c6:	2004      	movs	r0, #4
   d47c8:	f7ff fc84 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
   d47cc:	4b18      	ldr	r3, [pc, #96]	; (d4830 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d47ce:	2200      	movs	r2, #0
   d47d0:	781b      	ldrb	r3, [r3, #0]
   d47d2:	f88d 2000 	strb.w	r2, [sp]
   d47d6:	4a17      	ldr	r2, [pc, #92]	; (d4834 <_Z14setVerboseMode6String+0x9c>)
   d47d8:	e01a      	b.n	d4810 <_Z14setVerboseMode6String+0x78>
   d47da:	4917      	ldr	r1, [pc, #92]	; (d4838 <_Z14setVerboseMode6String+0xa0>)
   d47dc:	4628      	mov	r0, r5
   d47de:	f001 ffa4 	bl	d672a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
   d47e2:	b1e8      	cbz	r0, d4820 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
   d47e4:	4b10      	ldr	r3, [pc, #64]	; (d4828 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
   d47e6:	4d11      	ldr	r5, [pc, #68]	; (d482c <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
   d47e8:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d47ea:	f002 fabd 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d47ee:	2004      	movs	r0, #4
   d47f0:	f7ff fc6e 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
   d47f4:	f020 0008 	bic.w	r0, r0, #8
   d47f8:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d47fa:	f002 fab5 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d47fe:	7829      	ldrb	r1, [r5, #0]
   d4800:	2004      	movs	r0, #4
   d4802:	f7ff fc67 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
   d4806:	4b0a      	ldr	r3, [pc, #40]	; (d4830 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4808:	4a0c      	ldr	r2, [pc, #48]	; (d483c <_Z14setVerboseMode6String+0xa4>)
   d480a:	781b      	ldrb	r3, [r3, #0]
   d480c:	f88d 4000 	strb.w	r4, [sp]
   d4810:	490b      	ldr	r1, [pc, #44]	; (d4840 <_Z14setVerboseMode6String+0xa8>)
   d4812:	a802      	add	r0, sp, #8
   d4814:	f7ff fc60 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4818:	a803      	add	r0, sp, #12
   d481a:	f7ff fea7 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   d481e:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4820:	b005      	add	sp, #20
   d4822:	bd30      	pop	{r4, r5, pc}
   d4824:	000d84b1 	.word	0x000d84b1
   d4828:	2003e1ec 	.word	0x2003e1ec
   d482c:	2003e33c 	.word	0x2003e33c
   d4830:	2003e1d4 	.word	0x2003e1d4
   d4834:	000d82ec 	.word	0x000d82ec
   d4838:	000d82fd 	.word	0x000d82fd
   d483c:	000d82ff 	.word	0x000d82ff
   d4840:	000d830f 	.word	0x000d830f

000d4844 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
   d4844:	b530      	push	{r4, r5, lr}
   d4846:	b0cd      	sub	sp, #308	; 0x134
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4848:	220a      	movs	r2, #10
   d484a:	a905      	add	r1, sp, #20
   d484c:	6800      	ldr	r0, [r0, #0]
   d484e:	f003 f88b 	bl	d7968 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4852:	b2c4      	uxtb	r4, r0
   d4854:	f104 030c 	add.w	r3, r4, #12
   d4858:	b2db      	uxtb	r3, r3
   d485a:	2b18      	cmp	r3, #24
   d485c:	d83d      	bhi.n	d48da <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d485e:	b243      	sxtb	r3, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
   d4860:	ee07 3a90 	vmov	s15, r3
   d4864:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4868:	9303      	str	r3, [sp, #12]
   d486a:	4d1d      	ldr	r5, [pc, #116]	; (d48e0 <_Z11setTimeZone6String+0x9c>)
   d486c:	f002 f83a 	bl	d68e4 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
   d4870:	f002 fa7a 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4874:	4621      	mov	r1, r4
   d4876:	2003      	movs	r0, #3
   d4878:	f7ff fc2c 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d487c:	2400      	movs	r4, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d487e:	9b03      	ldr	r3, [sp, #12]
   d4880:	4a18      	ldr	r2, [pc, #96]	; (d48e4 <_Z11setTimeZone6String+0xa0>)
   d4882:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4886:	a80c      	add	r0, sp, #48	; 0x30
   d4888:	f000 ff5c 	bl	d5744 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d488c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
   d488e:	4916      	ldr	r1, [pc, #88]	; (d48e8 <_Z11setTimeZone6String+0xa4>)
   d4890:	f88d 4000 	strb.w	r4, [sp]
   d4894:	aa0c      	add	r2, sp, #48	; 0x30
   d4896:	a808      	add	r0, sp, #32
   d4898:	f7ff fc1e 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d489c:	a809      	add	r0, sp, #36	; 0x24
   d489e:	f7ff fe65 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
   d48a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d48a6:	f000 ff65 	bl	d5774 <delay>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d48aa:	f002 f87a 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d48ae:	4601      	mov	r1, r0
   d48b0:	a808      	add	r0, sp, #32
   d48b2:	f002 f833 	bl	d691c <_ZN9TimeClass7timeStrEl>
   d48b6:	9b08      	ldr	r3, [sp, #32]
   d48b8:	9303      	str	r3, [sp, #12]
  Particle.publish("Time",Time.timeStr(),PRIVATE);
   d48ba:	9a03      	ldr	r2, [sp, #12]
   d48bc:	782b      	ldrb	r3, [r5, #0]
   d48be:	490a      	ldr	r1, [pc, #40]	; (d48e8 <_Z11setTimeZone6String+0xa4>)
   d48c0:	f88d 4000 	strb.w	r4, [sp]
   d48c4:	a806      	add	r0, sp, #24
   d48c6:	f7ff fc07 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d48ca:	a807      	add	r0, sp, #28
   d48cc:	f7ff fe4e 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48d0:	a808      	add	r0, sp, #32
   d48d2:	f001 feb6 	bl	d6642 <_ZN6StringD1Ev>
  return 1;
   d48d6:	2001      	movs	r0, #1
   d48d8:	e000      	b.n	d48dc <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d48da:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(),PRIVATE);
  return 1;
}
   d48dc:	b04d      	add	sp, #308	; 0x134
   d48de:	bd30      	pop	{r4, r5, pc}
   d48e0:	2003e1d4 	.word	0x2003e1d4
   d48e4:	000d8314 	.word	0x000d8314
   d48e8:	000d8328 	.word	0x000d8328

000d48ec <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d48ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d48ee:	4926      	ldr	r1, [pc, #152]	; (d4988 <_Z15setLowPowerMode6String+0x9c>)
   d48f0:	4605      	mov	r5, r0
   d48f2:	f001 ff1a 	bl	d672a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d48f6:	b928      	cbnz	r0, d4904 <_Z15setLowPowerMode6String+0x18>
   d48f8:	4924      	ldr	r1, [pc, #144]	; (d498c <_Z15setLowPowerMode6String+0xa0>)
   d48fa:	4628      	mov	r0, r5
   d48fc:	f001 ff15 	bl	d672a <_ZNK6String6equalsEPKc>
   d4900:	2800      	cmp	r0, #0
   d4902:	d03f      	beq.n	d4984 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
   d4904:	f002 fa30 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4908:	2004      	movs	r0, #4
   d490a:	f7ff fbe1 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
   d490e:	4c20      	ldr	r4, [pc, #128]	; (d4990 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4910:	491d      	ldr	r1, [pc, #116]	; (d4988 <_Z15setLowPowerMode6String+0x9c>)
   d4912:	7020      	strb	r0, [r4, #0]
   d4914:	4628      	mov	r0, r5
   d4916:	f001 ff08 	bl	d672a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d491a:	4606      	mov	r6, r0
   d491c:	b1a0      	cbz	r0, d4948 <_Z15setLowPowerMode6String+0x5c>
   d491e:	4b1d      	ldr	r3, [pc, #116]	; (d4994 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
   d4920:	491d      	ldr	r1, [pc, #116]	; (d4998 <_Z15setLowPowerMode6String+0xac>)
   d4922:	781b      	ldrb	r3, [r3, #0]
   d4924:	2200      	movs	r2, #0
   d4926:	f88d 2000 	strb.w	r2, [sp]
   d492a:	a802      	add	r0, sp, #8
   d492c:	4a1b      	ldr	r2, [pc, #108]	; (d499c <_Z15setLowPowerMode6String+0xb0>)
   d492e:	f7ff fbd3 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4932:	a803      	add	r0, sp, #12
   d4934:	f7ff fe1a 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
   d4938:	7823      	ldrb	r3, [r4, #0]
   d493a:	f043 0301 	orr.w	r3, r3, #1
   d493e:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
   d4940:	4b17      	ldr	r3, [pc, #92]	; (d49a0 <_Z15setLowPowerMode6String+0xb4>)
   d4942:	2201      	movs	r2, #1
   d4944:	701a      	strb	r2, [r3, #0]
   d4946:	e016      	b.n	d4976 <_Z15setLowPowerMode6String+0x8a>
   d4948:	4910      	ldr	r1, [pc, #64]	; (d498c <_Z15setLowPowerMode6String+0xa0>)
   d494a:	4628      	mov	r0, r5
   d494c:	f001 feed 	bl	d672a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4950:	b188      	cbz	r0, d4976 <_Z15setLowPowerMode6String+0x8a>
   d4952:	4b10      	ldr	r3, [pc, #64]	; (d4994 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
   d4954:	4a13      	ldr	r2, [pc, #76]	; (d49a4 <_Z15setLowPowerMode6String+0xb8>)
   d4956:	781b      	ldrb	r3, [r3, #0]
   d4958:	490f      	ldr	r1, [pc, #60]	; (d4998 <_Z15setLowPowerMode6String+0xac>)
   d495a:	f88d 6000 	strb.w	r6, [sp]
   d495e:	a802      	add	r0, sp, #8
   d4960:	f7ff fbba 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4964:	a803      	add	r0, sp, #12
   d4966:	f7ff fe01 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
   d496a:	7823      	ldrb	r3, [r4, #0]
   d496c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   d4970:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
   d4972:	4b0b      	ldr	r3, [pc, #44]	; (d49a0 <_Z15setLowPowerMode6String+0xb4>)
   d4974:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
   d4976:	f002 f9f7 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d497a:	2004      	movs	r0, #4
   d497c:	7821      	ldrb	r1, [r4, #0]
   d497e:	f7ff fba9 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
   d4982:	2001      	movs	r0, #1
  return 1;
}
   d4984:	b004      	add	sp, #16
   d4986:	bd70      	pop	{r4, r5, r6, pc}
   d4988:	000d84b1 	.word	0x000d84b1
   d498c:	000d82fd 	.word	0x000d82fd
   d4990:	2003e33c 	.word	0x2003e33c
   d4994:	2003e1d4 	.word	0x2003e1d4
   d4998:	000d830f 	.word	0x000d830f
   d499c:	000d832d 	.word	0x000d832d
   d49a0:	2003e2ae 	.word	0x2003e2ae
   d49a4:	000d8337 	.word	0x000d8337

000d49a8 <_Z22publishStateTransitionv>:

// Utility functions here...
void publishStateTransition(void)
{
   d49a8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49aa:	4d16      	ldr	r5, [pc, #88]	; (d4a04 <_Z22publishStateTransitionv+0x5c>)
   d49ac:	4c16      	ldr	r4, [pc, #88]	; (d4a08 <_Z22publishStateTransitionv+0x60>)
   d49ae:	4917      	ldr	r1, [pc, #92]	; (d4a0c <_Z22publishStateTransitionv+0x64>)
   d49b0:	782a      	ldrb	r2, [r5, #0]
   d49b2:	7820      	ldrb	r0, [r4, #0]
  return 1;
}

// Utility functions here...
void publishStateTransition(void)
{
   d49b4:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d49b6:	230e      	movs	r3, #14
   d49b8:	fb03 1202 	mla	r2, r3, r2, r1
   d49bc:	9200      	str	r2, [sp, #0]
   d49be:	fb03 1300 	mla	r3, r3, r0, r1
   d49c2:	4a13      	ldr	r2, [pc, #76]	; (d4a10 <_Z22publishStateTransitionv+0x68>)
   d49c4:	2128      	movs	r1, #40	; 0x28
   d49c6:	a804      	add	r0, sp, #16
   d49c8:	f000 febc 	bl	d5744 <snprintf>
  oldState = state;
   d49cc:	782b      	ldrb	r3, [r5, #0]
   d49ce:	7023      	strb	r3, [r4, #0]
   d49d0:	f000 fe08 	bl	d55e4 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d49d4:	b170      	cbz	r0, d49f4 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
   d49d6:	f7ff fd91 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
   d49da:	4b0e      	ldr	r3, [pc, #56]	; (d4a14 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d49dc:	490e      	ldr	r1, [pc, #56]	; (d4a18 <_Z22publishStateTransitionv+0x70>)
   d49de:	781b      	ldrb	r3, [r3, #0]
   d49e0:	2200      	movs	r2, #0
   d49e2:	f88d 2000 	strb.w	r2, [sp]
   d49e6:	a802      	add	r0, sp, #8
   d49e8:	aa04      	add	r2, sp, #16
   d49ea:	f7ff fb75 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d49ee:	a803      	add	r0, sp, #12
   d49f0:	f7ff fdbc 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
   d49f4:	f002 f8da 	bl	d6bac <_Z16_fetch_usbserialv>
   d49f8:	a904      	add	r1, sp, #16
   d49fa:	f001 fd86 	bl	d650a <_ZN5Print7printlnEPKc>
}
   d49fe:	b00f      	add	sp, #60	; 0x3c
   d4a00:	bd30      	pop	{r4, r5, pc}
   d4a02:	bf00      	nop
   d4a04:	2003e1fd 	.word	0x2003e1fd
   d4a08:	2003e1d6 	.word	0x2003e1d6
   d4a0c:	2003e054 	.word	0x2003e054
   d4a10:	000d8349 	.word	0x000d8349
   d4a14:	2003e1d4 	.word	0x2003e1d4
   d4a18:	000d8357 	.word	0x000d8357

000d4a1c <loop>:

  stayAwakeTimeStamp = millis();                                      // Time stamp to keep us from going to sleep too early
}

void loop()
{
   d4a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
   d4a1e:	4c98      	ldr	r4, [pc, #608]	; (d4c80 <loop+0x264>)
   d4a20:	7823      	ldrb	r3, [r4, #0]
   d4a22:	3b01      	subs	r3, #1

  stayAwakeTimeStamp = millis();                                      // Time stamp to keep us from going to sleep too early
}

void loop()
{
   d4a24:	b089      	sub	sp, #36	; 0x24
  switch(state) {
   d4a26:	2b06      	cmp	r3, #6
   d4a28:	f200 81fa 	bhi.w	d4e20 <loop+0x404>
   d4a2c:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4a30:	00070191 	.word	0x00070191
   d4a34:	0075003c 	.word	0x0075003c
   d4a38:	00cc0090 	.word	0x00cc0090
   d4a3c:	015a      	.short	0x015a
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4a3e:	4b91      	ldr	r3, [pc, #580]	; (d4c84 <loop+0x268>)
   d4a40:	781b      	ldrb	r3, [r3, #0]
   d4a42:	b12b      	cbz	r3, d4a50 <loop+0x34>
   d4a44:	4b90      	ldr	r3, [pc, #576]	; (d4c88 <loop+0x26c>)
   d4a46:	781b      	ldrb	r3, [r3, #0]
   d4a48:	2b02      	cmp	r3, #2
   d4a4a:	d001      	beq.n	d4a50 <loop+0x34>
   d4a4c:	f7ff ffac 	bl	d49a8 <_Z22publishStateTransitionv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
   d4a50:	4b8e      	ldr	r3, [pc, #568]	; (d4c8c <loop+0x270>)
   d4a52:	781b      	ldrb	r3, [r3, #0]
   d4a54:	b14b      	cbz	r3, d4a6a <loop+0x4e>
   d4a56:	f000 fc07 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
   d4a5a:	4b8d      	ldr	r3, [pc, #564]	; (d4c90 <loop+0x274>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	1ac0      	subs	r0, r0, r3
   d4a60:	4b8c      	ldr	r3, [pc, #560]	; (d4c94 <loop+0x278>)
   d4a62:	681b      	ldr	r3, [r3, #0]
   d4a64:	4298      	cmp	r0, r3
   d4a66:	f200 81d5 	bhi.w	d4e14 <loop+0x3f8>
    if ((Time.minute() % 15 == 0) && (Time.now() - currentCountTime > 60)) state = MEASURING_STATE; 
   d4a6a:	f001 ffab 	bl	d69c4 <_ZN9TimeClass6minuteEv>
   d4a6e:	230f      	movs	r3, #15
   d4a70:	fb90 f3f3 	sdiv	r3, r0, r3
   d4a74:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   d4a78:	4298      	cmp	r0, r3
   d4a7a:	d107      	bne.n	d4a8c <loop+0x70>
   d4a7c:	f001 ff91 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4a80:	4b85      	ldr	r3, [pc, #532]	; (d4c98 <loop+0x27c>)
   d4a82:	681b      	ldr	r3, [r3, #0]
   d4a84:	1ac0      	subs	r0, r0, r3
   d4a86:	283c      	cmp	r0, #60	; 0x3c
   d4a88:	f300 81c7 	bgt.w	d4e1a <loop+0x3fe>
    if (sensor_data.batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
   d4a8c:	4b83      	ldr	r3, [pc, #524]	; (d4c9c <loop+0x280>)
   d4a8e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
   d4a92:	4b83      	ldr	r3, [pc, #524]	; (d4ca0 <loop+0x284>)
   d4a94:	edd3 7a00 	vldr	s15, [r3]
   d4a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4aa0:	f200 81be 	bhi.w	d4e20 <loop+0x404>
   d4aa4:	2307      	movs	r3, #7
   d4aa6:	e024      	b.n	d4af2 <loop+0xd6>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4aa8:	4b76      	ldr	r3, [pc, #472]	; (d4c84 <loop+0x268>)
   d4aaa:	781a      	ldrb	r2, [r3, #0]
   d4aac:	461d      	mov	r5, r3
   d4aae:	b12a      	cbz	r2, d4abc <loop+0xa0>
   d4ab0:	4b75      	ldr	r3, [pc, #468]	; (d4c88 <loop+0x26c>)
   d4ab2:	781b      	ldrb	r3, [r3, #0]
   d4ab4:	2b03      	cmp	r3, #3
   d4ab6:	d001      	beq.n	d4abc <loop+0xa0>
   d4ab8:	f7ff ff76 	bl	d49a8 <_Z22publishStateTransitionv>
    // Given you are coming up from a powered off state - you many need to introduce a non-blocking delay here to allow the sensors to warm up
    if (!takeMeasurements())
   d4abc:	f7ff fb50 	bl	d4160 <_Z16takeMeasurementsv>
   d4ac0:	4606      	mov	r6, r0
   d4ac2:	b990      	cbnz	r0, d4aea <loop+0xce>
    {
      state = ERROR_STATE;
   d4ac4:	2301      	movs	r3, #1
   d4ac6:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
   d4ac8:	782b      	ldrb	r3, [r5, #0]
   d4aca:	2b00      	cmp	r3, #0
   d4acc:	f000 81a8 	beq.w	d4e20 <loop+0x404>
        waitUntil(meterParticlePublish);
   d4ad0:	f7ff fd14 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
   d4ad4:	f000 fd86 	bl	d55e4 <spark_cloud_flag_connected>
        if(Particle.connected()) Particle.publish("State","Error taking Measurements",PRIVATE);
   d4ad8:	2800      	cmp	r0, #0
   d4ada:	f000 81a1 	beq.w	d4e20 <loop+0x404>
   d4ade:	4b71      	ldr	r3, [pc, #452]	; (d4ca4 <loop+0x288>)
   d4ae0:	4a71      	ldr	r2, [pc, #452]	; (d4ca8 <loop+0x28c>)
   d4ae2:	781b      	ldrb	r3, [r3, #0]
   d4ae4:	f88d 6000 	strb.w	r6, [sp]
   d4ae8:	e00f      	b.n	d4b0a <loop+0xee>
      }
    }
    else if (Time.minute() == 0) state = REPORTING_STATE;
   d4aea:	f001 ff6b 	bl	d69c4 <_ZN9TimeClass6minuteEv>
   d4aee:	b910      	cbnz	r0, d4af6 <loop+0xda>
   d4af0:	2304      	movs	r3, #4
   d4af2:	7023      	strb	r3, [r4, #0]
   d4af4:	e194      	b.n	d4e20 <loop+0x404>
    else {
      state = IDLE_STATE;
   d4af6:	2302      	movs	r3, #2
   d4af8:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
   d4afa:	f7ff fcff 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
   d4afe:	4b69      	ldr	r3, [pc, #420]	; (d4ca4 <loop+0x288>)
      Particle.publish("State","Measurement taken and stored",PRIVATE);
   d4b00:	2200      	movs	r2, #0
   d4b02:	781b      	ldrb	r3, [r3, #0]
   d4b04:	f88d 2000 	strb.w	r2, [sp]
   d4b08:	4a68      	ldr	r2, [pc, #416]	; (d4cac <loop+0x290>)
   d4b0a:	4969      	ldr	r1, [pc, #420]	; (d4cb0 <loop+0x294>)
   d4b0c:	a806      	add	r0, sp, #24
   d4b0e:	f7ff fae3 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4b12:	a807      	add	r0, sp, #28
   d4b14:	f7ff fd2a 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b18:	e182      	b.n	d4e20 <loop+0x404>
      }
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4b1a:	4b5a      	ldr	r3, [pc, #360]	; (d4c84 <loop+0x268>)
   d4b1c:	781b      	ldrb	r3, [r3, #0]
   d4b1e:	b12b      	cbz	r3, d4b2c <loop+0x110>
   d4b20:	4b59      	ldr	r3, [pc, #356]	; (d4c88 <loop+0x26c>)
   d4b22:	781b      	ldrb	r3, [r3, #0]
   d4b24:	2b04      	cmp	r3, #4
   d4b26:	d001      	beq.n	d4b2c <loop+0x110>
   d4b28:	f7ff ff3e 	bl	d49a8 <_Z22publishStateTransitionv>
   d4b2c:	f000 fd5a 	bl	d55e4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4b30:	2800      	cmp	r0, #0
   d4b32:	d047      	beq.n	d4bc4 <loop+0x1a8>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
   d4b34:	f001 ff3c 	bl	d69b0 <_ZN9TimeClass4hourEv>
   d4b38:	280c      	cmp	r0, #12
   d4b3a:	d105      	bne.n	d4b48 <loop+0x12c>
   d4b3c:	f000 fd52 	bl	d55e4 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4b40:	b110      	cbz	r0, d4b48 <loop+0x12c>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4b42:	2000      	movs	r0, #0
   d4b44:	f000 fd6e 	bl	d5624 <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots if we haven't already
   d4b48:	f7ff fd26 	bl	d4598 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
   d4b4c:	2305      	movs	r3, #5
   d4b4e:	e7d0      	b.n	d4af2 <loop+0xd6>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
   d4b50:	4b4c      	ldr	r3, [pc, #304]	; (d4c84 <loop+0x268>)
   d4b52:	781b      	ldrb	r3, [r3, #0]
   d4b54:	b12b      	cbz	r3, d4b62 <loop+0x146>
   d4b56:	4b4c      	ldr	r3, [pc, #304]	; (d4c88 <loop+0x26c>)
   d4b58:	781b      	ldrb	r3, [r3, #0]
   d4b5a:	2b05      	cmp	r3, #5
   d4b5c:	d001      	beq.n	d4b62 <loop+0x146>
   d4b5e:	f7ff ff23 	bl	d49a8 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                  // Response received back to IDLE state
   d4b62:	4b54      	ldr	r3, [pc, #336]	; (d4cb4 <loop+0x298>)
   d4b64:	781d      	ldrb	r5, [r3, #0]
   d4b66:	b995      	cbnz	r5, d4b8e <loop+0x172>
    {
      state = IDLE_STATE;
   d4b68:	2302      	movs	r3, #2
   d4b6a:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                        // Keeps Electron awake after reboot - helps with recovery
   d4b6c:	4b49      	ldr	r3, [pc, #292]	; (d4c94 <loop+0x278>)
   d4b6e:	f246 12a8 	movw	r2, #25000	; 0x61a8
   d4b72:	601a      	str	r2, [r3, #0]
   d4b74:	f000 fb78 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d4b78:	4b45      	ldr	r3, [pc, #276]	; (d4c90 <loop+0x274>)
   d4b7a:	6018      	str	r0, [r3, #0]
      waitUntil(meterParticlePublish);
   d4b7c:	f7ff fcbe 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
   d4b80:	4b48      	ldr	r3, [pc, #288]	; (d4ca4 <loop+0x288>)
      Particle.publish("Reporting","Cycle Complete - Data Received",PRIVATE); 
   d4b82:	4a4d      	ldr	r2, [pc, #308]	; (d4cb8 <loop+0x29c>)
   d4b84:	781b      	ldrb	r3, [r3, #0]
   d4b86:	494d      	ldr	r1, [pc, #308]	; (d4cbc <loop+0x2a0>)
   d4b88:	f88d 5000 	strb.w	r5, [sp]
   d4b8c:	e7be      	b.n	d4b0c <loop+0xf0>
   d4b8e:	f000 fb6b 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {               // If it takes too long - will need to reset
   d4b92:	4b4b      	ldr	r3, [pc, #300]	; (d4cc0 <loop+0x2a4>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	1ac0      	subs	r0, r0, r3
   d4b98:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4b9c:	4298      	cmp	r0, r3
   d4b9e:	f240 813f 	bls.w	d4e20 <loop+0x404>
   d4ba2:	f000 fb61 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ba6:	4b47      	ldr	r3, [pc, #284]	; (d4cc4 <loop+0x2a8>)
      Particle.publish("spark/device/session/end", "", PRIVATE);        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4ba8:	4947      	ldr	r1, [pc, #284]	; (d4cc8 <loop+0x2ac>)
      stayAwakeTimeStamp = millis();
      waitUntil(meterParticlePublish);
      Particle.publish("Reporting","Cycle Complete - Data Received",PRIVATE); 
    }
    else if (millis() - webhookTimeStamp > webhookWait) {               // If it takes too long - will need to reset
      resetTimeStamp = millis();
   d4baa:	6018      	str	r0, [r3, #0]
   d4bac:	4b3d      	ldr	r3, [pc, #244]	; (d4ca4 <loop+0x288>)
      Particle.publish("spark/device/session/end", "", PRIVATE);        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4bae:	2200      	movs	r2, #0
   d4bb0:	781b      	ldrb	r3, [r3, #0]
   d4bb2:	f88d 2000 	strb.w	r2, [sp]
   d4bb6:	a806      	add	r0, sp, #24
   d4bb8:	4a44      	ldr	r2, [pc, #272]	; (d4ccc <loop+0x2b0>)
   d4bba:	f7ff fa8d 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4bbe:	a807      	add	r0, sp, #28
   d4bc0:	f7ff fcd4 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                              // Response timed out
   d4bc4:	2301      	movs	r3, #1
   d4bc6:	e794      	b.n	d4af2 <loop+0xd6>
    } 
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
   d4bc8:	4b2e      	ldr	r3, [pc, #184]	; (d4c84 <loop+0x268>)
   d4bca:	781a      	ldrb	r2, [r3, #0]
   d4bcc:	461d      	mov	r5, r3
   d4bce:	b12a      	cbz	r2, d4bdc <loop+0x1c0>
   d4bd0:	4b2d      	ldr	r3, [pc, #180]	; (d4c88 <loop+0x26c>)
   d4bd2:	781b      	ldrb	r3, [r3, #0]
   d4bd4:	2b06      	cmp	r3, #6
   d4bd6:	d001      	beq.n	d4bdc <loop+0x1c0>
   d4bd8:	f7ff fee6 	bl	d49a8 <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
   d4bdc:	4b3c      	ldr	r3, [pc, #240]	; (d4cd0 <loop+0x2b4>)
   d4bde:	781e      	ldrb	r6, [r3, #0]
   d4be0:	461f      	mov	r7, r3
   d4be2:	bb3e      	cbnz	r6, d4c34 <loop+0x218>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4be4:	f000 fcfe 	bl	d55e4 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
   d4be8:	b1a8      	cbz	r0, d4c16 <loop+0x1fa>
        if (verboseMode) {
   d4bea:	782b      	ldrb	r3, [r5, #0]
   d4bec:	b16b      	cbz	r3, d4c0a <loop+0x1ee>
          waitUntil(meterParticlePublish);
   d4bee:	f7ff fc85 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
   d4bf2:	4b2c      	ldr	r3, [pc, #176]	; (d4ca4 <loop+0x288>)
          Particle.publish("State","Going to Sleep",PRIVATE);
   d4bf4:	4a37      	ldr	r2, [pc, #220]	; (d4cd4 <loop+0x2b8>)
   d4bf6:	781b      	ldrb	r3, [r3, #0]
   d4bf8:	492d      	ldr	r1, [pc, #180]	; (d4cb0 <loop+0x294>)
   d4bfa:	f88d 6000 	strb.w	r6, [sp]
   d4bfe:	a806      	add	r0, sp, #24
   d4c00:	f7ff fa6a 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4c04:	a807      	add	r0, sp, #28
   d4c06:	f7ff fcb1 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        delay(1000);                                                    // Time to send last update
   d4c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4c0e:	f000 fdb1 	bl	d5774 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
   d4c12:	f7ff fc4f 	bl	d44b4 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
   d4c16:	f002 f8a7 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4c1a:	4b2f      	ldr	r3, [pc, #188]	; (d4cd8 <loop+0x2bc>)
   d4c1c:	2002      	movs	r0, #2
   d4c1e:	7819      	ldrb	r1, [r3, #0]
   d4c20:	f7ff fa58 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
      ledState = false;
   d4c24:	4b2d      	ldr	r3, [pc, #180]	; (d4cdc <loop+0x2c0>)
   d4c26:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4c28:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
   d4c2a:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4c2c:	f002 f883 	bl	d6d36 <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
   d4c30:	2301      	movs	r3, #1
   d4c32:	703b      	strb	r3, [r7, #0]
    }
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d4c34:	f001 feb5 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4c38:	4b29      	ldr	r3, [pc, #164]	; (d4ce0 <loop+0x2c4>)
   d4c3a:	6819      	ldr	r1, [r3, #0]
   d4c3c:	2306      	movs	r3, #6
   d4c3e:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4c42:	ab08      	add	r3, sp, #32
   d4c44:	2201      	movs	r2, #1
   d4c46:	f803 2d0b 	strb.w	r2, [r3, #-11]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4c4a:	9102      	str	r1, [sp, #8]
   d4c4c:	f44f 7161 	mov.w	r1, #900	; 0x384
   d4c50:	fb90 f5f1 	sdiv	r5, r0, r1
   d4c54:	fb05 0011 	mls	r0, r5, r1, r0
   d4c58:	1a08      	subs	r0, r1, r0
   d4c5a:	4288      	cmp	r0, r1
   d4c5c:	bfa8      	it	ge
   d4c5e:	4608      	movge	r0, r1
   d4c60:	9200      	str	r2, [sp, #0]
   d4c62:	f10d 0116 	add.w	r1, sp, #22
   d4c66:	9001      	str	r0, [sp, #4]
   d4c68:	a806      	add	r0, sp, #24
   d4c6a:	f001 fdc1 	bl	d67f0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(D6,RISING,wakeInSeconds);  
    state = IDLE_STATE;                                                 // need to go back to idle immediately after wakup
   d4c6e:	2302      	movs	r3, #2
   d4c70:	7023      	strb	r3, [r4, #0]
    connectToParticle();                                                // Reconnect to Particle (not needed for stop sleep)
   d4c72:	f7ff fbc3 	bl	d43fc <_Z17connectToParticlev>
   d4c76:	f000 faf7 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
    stayAwakeTimeStamp = millis();                                      // Time stamp to keep us from going to sleep too early
   d4c7a:	4b05      	ldr	r3, [pc, #20]	; (d4c90 <loop+0x274>)
   d4c7c:	6018      	str	r0, [r3, #0]
    } break;
   d4c7e:	e0cf      	b.n	d4e20 <loop+0x404>
   d4c80:	2003e1fd 	.word	0x2003e1fd
   d4c84:	2003e1ec 	.word	0x2003e1ec
   d4c88:	2003e1d6 	.word	0x2003e1d6
   d4c8c:	2003e2ae 	.word	0x2003e2ae
   d4c90:	2003e2b0 	.word	0x2003e2b0
   d4c94:	2003e0c8 	.word	0x2003e0c8
   d4c98:	2003e1d8 	.word	0x2003e1d8
   d4c9c:	2003e238 	.word	0x2003e238
   d4ca0:	2003e0d0 	.word	0x2003e0d0
   d4ca4:	2003e1d4 	.word	0x2003e1d4
   d4ca8:	000d8368 	.word	0x000d8368
   d4cac:	000d8382 	.word	0x000d8382
   d4cb0:	000d82e6 	.word	0x000d82e6
   d4cb4:	2003e0cc 	.word	0x2003e0cc
   d4cb8:	000d839f 	.word	0x000d839f
   d4cbc:	000d83be 	.word	0x000d83be
   d4cc0:	2003e1c0 	.word	0x2003e1c0
   d4cc4:	2003e2f8 	.word	0x2003e2f8
   d4cc8:	000d83c8 	.word	0x000d83c8
   d4ccc:	000d8142 	.word	0x000d8142
   d4cd0:	2003e33d 	.word	0x2003e33d
   d4cd4:	000d83e1 	.word	0x000d83e1
   d4cd8:	2003e200 	.word	0x2003e200
   d4cdc:	2003e1d5 	.word	0x2003e1d5
   d4ce0:	2003e2a4 	.word	0x2003e2a4


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
   d4ce4:	4b4f      	ldr	r3, [pc, #316]	; (d4e24 <loop+0x408>)
   d4ce6:	781a      	ldrb	r2, [r3, #0]
   d4ce8:	461c      	mov	r4, r3
   d4cea:	b12a      	cbz	r2, d4cf8 <loop+0x2dc>
   d4cec:	4b4e      	ldr	r3, [pc, #312]	; (d4e28 <loop+0x40c>)
   d4cee:	781b      	ldrb	r3, [r3, #0]
   d4cf0:	2b07      	cmp	r3, #7
   d4cf2:	d001      	beq.n	d4cf8 <loop+0x2dc>
   d4cf4:	f7ff fe58 	bl	d49a8 <_Z22publishStateTransitionv>
   d4cf8:	f000 fc74 	bl	d55e4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4cfc:	b1b0      	cbz	r0, d4d2c <loop+0x310>
      if (verboseMode) {
   d4cfe:	7823      	ldrb	r3, [r4, #0]
   d4d00:	b173      	cbz	r3, d4d20 <loop+0x304>
        waitUntil(meterParticlePublish);
   d4d02:	f7ff fbfb 	bl	d44fc <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.44>
   d4d06:	4b49      	ldr	r3, [pc, #292]	; (d4e2c <loop+0x410>)
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
   d4d08:	4949      	ldr	r1, [pc, #292]	; (d4e30 <loop+0x414>)
   d4d0a:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	f88d 2000 	strb.w	r2, [sp]
   d4d12:	a806      	add	r0, sp, #24
   d4d14:	4a47      	ldr	r2, [pc, #284]	; (d4e34 <loop+0x418>)
   d4d16:	f7ff f9df 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4d1a:	a807      	add	r0, sp, #28
   d4d1c:	f7ff fc26 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                    // Time to send last update
   d4d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4d24:	f000 fd26 	bl	d5774 <delay>
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
   d4d28:	f7ff fbc4 	bl	d44b4 <_Z22disconnectFromParticlev>
    }
    ledState = false;
   d4d2c:	4b42      	ldr	r3, [pc, #264]	; (d4e38 <loop+0x41c>)
   d4d2e:	2100      	movs	r1, #0
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4d30:	2007      	movs	r0, #7
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
      }
      delay(1000);                                                    // Time to send last update
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
    }
    ledState = false;
   d4d32:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
   d4d34:	f001 ffff 	bl	d6d36 <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
   d4d38:	f001 fe44 	bl	d69c4 <_ZN9TimeClass6minuteEv>
    // In your use case, substitute the line below with the instrcution to the TPL5111 to disable the device
    System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
   d4d3c:	4b3f      	ldr	r3, [pc, #252]	; (d4e3c <loop+0x420>)
   d4d3e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4d42:	223c      	movs	r2, #60	; 0x3c
   d4d44:	4342      	muls	r2, r0
   d4d46:	681b      	ldr	r3, [r3, #0]
   d4d48:	2101      	movs	r1, #1
   d4d4a:	a806      	add	r0, sp, #24
   d4d4c:	f001 fd20 	bl	d6790 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
   d4d50:	e066      	b.n	d4e20 <loop+0x404>

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
   d4d52:	4b34      	ldr	r3, [pc, #208]	; (d4e24 <loop+0x408>)
   d4d54:	781b      	ldrb	r3, [r3, #0]
   d4d56:	b12b      	cbz	r3, d4d64 <loop+0x348>
   d4d58:	4b33      	ldr	r3, [pc, #204]	; (d4e28 <loop+0x40c>)
   d4d5a:	781b      	ldrb	r3, [r3, #0]
   d4d5c:	2b01      	cmp	r3, #1
   d4d5e:	d001      	beq.n	d4d64 <loop+0x348>
   d4d60:	f7ff fe22 	bl	d49a8 <_Z22publishStateTransitionv>
   d4d64:	f000 fa80 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4d68:	4b35      	ldr	r3, [pc, #212]	; (d4e40 <loop+0x424>)
   d4d6a:	681b      	ldr	r3, [r3, #0]
   d4d6c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d4d70:	3330      	adds	r3, #48	; 0x30
   d4d72:	4298      	cmp	r0, r3
   d4d74:	d954      	bls.n	d4e20 <loop+0x404>
    {
      if (resetCount <= 3) {                                          // First try simple reset
   d4d76:	4b33      	ldr	r3, [pc, #204]	; (d4e44 <loop+0x428>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	2b03      	cmp	r3, #3
   d4d7c:	dc16      	bgt.n	d4dac <loop+0x390>
   d4d7e:	f000 fc31 	bl	d55e4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4d82:	b160      	cbz	r0, d4d9e <loop+0x382>
   d4d84:	4b29      	ldr	r3, [pc, #164]	; (d4e2c <loop+0x410>)
   d4d86:	492a      	ldr	r1, [pc, #168]	; (d4e30 <loop+0x414>)
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4d88:	781b      	ldrb	r3, [r3, #0]
   d4d8a:	2200      	movs	r2, #0
   d4d8c:	f88d 2000 	strb.w	r2, [sp]
   d4d90:	a806      	add	r0, sp, #24
   d4d92:	4a2d      	ldr	r2, [pc, #180]	; (d4e48 <loop+0x42c>)
   d4d94:	f7ff f9a0 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4d98:	a807      	add	r0, sp, #28
   d4d9a:	f7ff fbe7 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4d9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4da2:	f000 fce7 	bl	d5774 <delay>
        System.reset();
   d4da6:	f001 fcef 	bl	d6788 <_ZN11SystemClass5resetEv>
   d4daa:	e039      	b.n	d4e20 <loop+0x404>
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
   d4dac:	f001 fdf9 	bl	d69a2 <_ZN9TimeClass3nowEv>
   d4db0:	4604      	mov	r4, r0
   d4db2:	f001 ffd9 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4db6:	2005      	movs	r0, #5
   d4db8:	f7ff f98a 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
   d4dbc:	1a20      	subs	r0, r4, r0
   d4dbe:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d4dc2:	dd1c      	ble.n	d4dfe <loop+0x3e2>
   d4dc4:	f000 fc0e 	bl	d55e4 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Lost Session", PRIVATE);  // Broadcast Reset Action
   d4dc8:	b160      	cbz	r0, d4de4 <loop+0x3c8>
   d4dca:	4b18      	ldr	r3, [pc, #96]	; (d4e2c <loop+0x410>)
   d4dcc:	2200      	movs	r2, #0
   d4dce:	781b      	ldrb	r3, [r3, #0]
   d4dd0:	f88d 2000 	strb.w	r2, [sp]
   d4dd4:	4a1d      	ldr	r2, [pc, #116]	; (d4e4c <loop+0x430>)
   d4dd6:	4916      	ldr	r1, [pc, #88]	; (d4e30 <loop+0x414>)
   d4dd8:	a806      	add	r0, sp, #24
   d4dda:	f7ff f97d 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d4dde:	a807      	add	r0, sp, #28
   d4de0:	f7ff fbc4 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
   d4de4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4de8:	f000 fcc4 	bl	d5774 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                      // Zero the ResetCount
   d4dec:	f001 ffbc 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4df0:	2100      	movs	r1, #0
   d4df2:	2002      	movs	r0, #2
   d4df4:	f7ff f96e 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
        fullModemReset();                                             // Full Modem reset and reboots
   d4df8:	f7ff fb8c 	bl	d4514 <_Z14fullModemResetv>
   d4dfc:	e010      	b.n	d4e20 <loop+0x404>
   d4dfe:	f000 fbf1 	bl	d55e4 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
   d4e02:	2800      	cmp	r0, #0
   d4e04:	d0ee      	beq.n	d4de4 <loop+0x3c8>
   d4e06:	4b09      	ldr	r3, [pc, #36]	; (d4e2c <loop+0x410>)
   d4e08:	2200      	movs	r2, #0
   d4e0a:	781b      	ldrb	r3, [r3, #0]
   d4e0c:	f88d 2000 	strb.w	r2, [sp]
   d4e10:	4a0f      	ldr	r2, [pc, #60]	; (d4e50 <loop+0x434>)
   d4e12:	e7e0      	b.n	d4dd6 <loop+0x3ba>
void loop()
{
  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
   d4e14:	2306      	movs	r3, #6
   d4e16:	7023      	strb	r3, [r4, #0]
   d4e18:	e627      	b.n	d4a6a <loop+0x4e>
    if ((Time.minute() % 15 == 0) && (Time.now() - currentCountTime > 60)) state = MEASURING_STATE; 
   d4e1a:	2303      	movs	r3, #3
   d4e1c:	7023      	strb	r3, [r4, #0]
   d4e1e:	e635      	b.n	d4a8c <loop+0x70>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
   d4e20:	b009      	add	sp, #36	; 0x24
   d4e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e24:	2003e1ec 	.word	0x2003e1ec
   d4e28:	2003e1d6 	.word	0x2003e1d6
   d4e2c:	2003e1d4 	.word	0x2003e1d4
   d4e30:	000d82e6 	.word	0x000d82e6
   d4e34:	000d83f0 	.word	0x000d83f0
   d4e38:	2003e1d5 	.word	0x2003e1d5
   d4e3c:	2003e2a4 	.word	0x2003e2a4
   d4e40:	2003e2f8 	.word	0x2003e2f8
   d4e44:	2003e200 	.word	0x2003e200
   d4e48:	000d8407 	.word	0x000d8407
   d4e4c:	000d841b 	.word	0x000d841b
   d4e50:	000d8436 	.word	0x000d8436

000d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4e54:	2300      	movs	r3, #0
   d4e56:	2204      	movs	r2, #4
   d4e58:	f000 bb9c 	b.w	d5594 <spark_variable>

000d4e5c <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4e5c:	4602      	mov	r2, r0
   d4e5e:	4801      	ldr	r0, [pc, #4]	; (d4e64 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4e60:	f000 be2b 	b.w	d5aba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4e64:	000d5a8f 	.word	0x000d5a8f

000d4e68 <setup>:
// Battery monitoring
float lowBattLimit=3.0;                             // Trigger for Low Batt State - LiPo voltage
bool lowPowerMode;                                  // Flag for Low Power Mode operations

void setup()                                                      // Note: Disconnected Setup()
{
   d4e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e6a:	4b91      	ldr	r3, [pc, #580]	; (d50b0 <setup+0x248>)
// Battery monitoring
float lowBattLimit=3.0;                             // Trigger for Low Batt State - LiPo voltage
bool lowPowerMode;                                  // Flag for Low Power Mode operations

void setup()                                                      // Note: Disconnected Setup()
{
   d4e6c:	b0b9      	sub	sp, #228	; 0xe4
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e6e:	aa08      	add	r2, sp, #32
   d4e70:	f103 0510 	add.w	r5, r3, #16
   d4e74:	4616      	mov	r6, r2
   d4e76:	6818      	ldr	r0, [r3, #0]
   d4e78:	6859      	ldr	r1, [r3, #4]
   d4e7a:	4614      	mov	r4, r2
   d4e7c:	c403      	stmia	r4!, {r0, r1}
   d4e7e:	3308      	adds	r3, #8
   d4e80:	42ab      	cmp	r3, r5
   d4e82:	4622      	mov	r2, r4
   d4e84:	d1f7      	bne.n	d4e76 <setup+0xe>
   d4e86:	8819      	ldrh	r1, [r3, #0]
   d4e88:	789b      	ldrb	r3, [r3, #2]
   d4e8a:	70a3      	strb	r3, [r4, #2]
   d4e8c:	222d      	movs	r2, #45	; 0x2d
   d4e8e:	8021      	strh	r1, [r4, #0]
   d4e90:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d4e94:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4e96:	4d87      	ldr	r5, [pc, #540]	; (d50b4 <setup+0x24c>)
float lowBattLimit=3.0;                             // Trigger for Low Batt State - LiPo voltage
bool lowPowerMode;                                  // Flag for Low Power Mode operations

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
   d4e98:	f002 fc17 	bl	d76ca <memset>
  state = IDLE_STATE;
   d4e9c:	2702      	movs	r7, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4e9e:	2101      	movs	r1, #1
   d4ea0:	2007      	movs	r0, #7
bool lowPowerMode;                                  // Flag for Low Power Mode operations

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
   d4ea2:	702f      	strb	r7, [r5, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
   d4ea4:	f001 ff36 	bl	d6d14 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4ea8:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4eaa:	2400      	movs	r4, #0
   d4eac:	f000 fba2 	bl	d55f4 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4eb0:	2300      	movs	r3, #0
   d4eb2:	227d      	movs	r2, #125	; 0x7d
   d4eb4:	a918      	add	r1, sp, #96	; 0x60
   d4eb6:	a804      	add	r0, sp, #16
   d4eb8:	f001 fc49 	bl	d674e <_ZNK6String8getBytesEPhjj>
   d4ebc:	4623      	mov	r3, r4
   d4ebe:	4622      	mov	r2, r4
   d4ec0:	497d      	ldr	r1, [pc, #500]	; (d50b8 <setup+0x250>)
   d4ec2:	9401      	str	r4, [sp, #4]
   d4ec4:	9400      	str	r4, [sp, #0]
   d4ec6:	a818      	add	r0, sp, #96	; 0x60
   d4ec8:	f000 fba4 	bl	d5614 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
   d4ecc:	497b      	ldr	r1, [pc, #492]	; (d50bc <setup+0x254>)
   d4ece:	487c      	ldr	r0, [pc, #496]	; (d50c0 <setup+0x258>)
   d4ed0:	f7ff ffc0 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4ed4:	4623      	mov	r3, r4
   d4ed6:	463a      	mov	r2, r7
   d4ed8:	497a      	ldr	r1, [pc, #488]	; (d50c4 <setup+0x25c>)
   d4eda:	487b      	ldr	r0, [pc, #492]	; (d50c8 <setup+0x260>)
   d4edc:	f000 fb5a 	bl	d5594 <spark_variable>
   d4ee0:	497a      	ldr	r1, [pc, #488]	; (d50cc <setup+0x264>)
   d4ee2:	487b      	ldr	r0, [pc, #492]	; (d50d0 <setup+0x268>)
   d4ee4:	6809      	ldr	r1, [r1, #0]
   d4ee6:	4623      	mov	r3, r4
   d4ee8:	2204      	movs	r2, #4
   d4eea:	f000 fb53 	bl	d5594 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
   d4eee:	4979      	ldr	r1, [pc, #484]	; (d50d4 <setup+0x26c>)
   d4ef0:	4879      	ldr	r0, [pc, #484]	; (d50d8 <setup+0x270>)
   d4ef2:	f7ff ffaf 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
   d4ef6:	4623      	mov	r3, r4
   d4ef8:	2201      	movs	r2, #1
   d4efa:	4978      	ldr	r1, [pc, #480]	; (d50dc <setup+0x274>)
   d4efc:	4878      	ldr	r0, [pc, #480]	; (d50e0 <setup+0x278>)
   d4efe:	f000 fb49 	bl	d5594 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
   d4f02:	4978      	ldr	r1, [pc, #480]	; (d50e4 <setup+0x27c>)
   d4f04:	4878      	ldr	r0, [pc, #480]	; (d50e8 <setup+0x280>)
   d4f06:	f7ff ffa5 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("humidity", humidityString);
   d4f0a:	4978      	ldr	r1, [pc, #480]	; (d50ec <setup+0x284>)
   d4f0c:	4878      	ldr	r0, [pc, #480]	; (d50f0 <setup+0x288>)
   d4f0e:	f7ff ffa1 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilTemp",soilTempInCString);
   d4f12:	4978      	ldr	r1, [pc, #480]	; (d50f4 <setup+0x28c>)
   d4f14:	4878      	ldr	r0, [pc, #480]	; (d50f8 <setup+0x290>)
   d4f16:	f7ff ff9d 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture1",soilMoisture1String);
   d4f1a:	4978      	ldr	r1, [pc, #480]	; (d50fc <setup+0x294>)
   d4f1c:	4878      	ldr	r0, [pc, #480]	; (d5100 <setup+0x298>)
   d4f1e:	f7ff ff99 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture2",soilMoisture2String);
   d4f22:	4978      	ldr	r1, [pc, #480]	; (d5104 <setup+0x29c>)
   d4f24:	4878      	ldr	r0, [pc, #480]	; (d5108 <setup+0x2a0>)
   d4f26:	f7ff ff95 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture3",soilMoisture3String);
   d4f2a:	4978      	ldr	r1, [pc, #480]	; (d510c <setup+0x2a4>)
   d4f2c:	4878      	ldr	r0, [pc, #480]	; (d5110 <setup+0x2a8>)
   d4f2e:	f7ff ff91 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture4",soilMoisture4String);
   d4f32:	4978      	ldr	r1, [pc, #480]	; (d5114 <setup+0x2ac>)
   d4f34:	4878      	ldr	r0, [pc, #480]	; (d5118 <setup+0x2b0>)
   d4f36:	f7ff ff8d 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture5",soilMoisture5String);
   d4f3a:	4978      	ldr	r1, [pc, #480]	; (d511c <setup+0x2b4>)
   d4f3c:	4878      	ldr	r0, [pc, #480]	; (d5120 <setup+0x2b8>)
   d4f3e:	f7ff ff89 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilMoisture6",soilMoisture6String);
   d4f42:	4978      	ldr	r1, [pc, #480]	; (d5124 <setup+0x2bc>)
   d4f44:	4878      	ldr	r0, [pc, #480]	; (d5128 <setup+0x2c0>)
   d4f46:	f7ff ff85 	bl	d4e54 <_ZN10CloudClass8variableIA14_cIA16_cEEEbRKT_DpRKT0_>

  Particle.function("Measure-Now",measureNow);
   d4f4a:	4978      	ldr	r1, [pc, #480]	; (d512c <setup+0x2c4>)
   d4f4c:	4878      	ldr	r0, [pc, #480]	; (d5130 <setup+0x2c8>)
   d4f4e:	f7ff ff85 	bl	d4e5c <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d4f52:	4978      	ldr	r1, [pc, #480]	; (d5134 <setup+0x2cc>)
   d4f54:	4878      	ldr	r0, [pc, #480]	; (d5138 <setup+0x2d0>)
   d4f56:	f7ff ff81 	bl	d4e5c <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d4f5a:	4978      	ldr	r1, [pc, #480]	; (d513c <setup+0x2d4>)
   d4f5c:	4878      	ldr	r0, [pc, #480]	; (d5140 <setup+0x2d8>)
   d4f5e:	f7ff ff7d 	bl	d4e5c <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
   d4f62:	4978      	ldr	r1, [pc, #480]	; (d5144 <setup+0x2dc>)
   d4f64:	4878      	ldr	r0, [pc, #480]	; (d5148 <setup+0x2e0>)
   d4f66:	f7ff ff79 	bl	d4e5c <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
   d4f6a:	f001 fefd 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4f6e:	4620      	mov	r0, r4
   d4f70:	f7ff f8ae 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
   d4f74:	42b8      	cmp	r0, r7
   d4f76:	d119      	bne.n	d4fac <setup+0x144>
    for (int i=1; i < 100; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
   d4f78:	f001 fef6 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4f7c:	2002      	movs	r0, #2
   d4f7e:	f7ff f8a7 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
   d4f82:	4c50      	ldr	r4, [pc, #320]	; (d50c4 <setup+0x25c>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4f84:	2200      	movs	r2, #0
   d4f86:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4f88:	4611      	mov	r1, r2
   d4f8a:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d4f8c:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4f8e:	f000 f95b 	bl	d5248 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d4f92:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
   d4f94:	2b14      	cmp	r3, #20
   d4f96:	d11e      	bne.n	d4fd6 <setup+0x16e>
  {
    resetCount++;
   d4f98:	6823      	ldr	r3, [r4, #0]
   d4f9a:	3301      	adds	r3, #1
   d4f9c:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
   d4f9e:	f001 fee3 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4fa2:	7821      	ldrb	r1, [r4, #0]
   d4fa4:	2002      	movs	r0, #2
   d4fa6:	f7ff f895 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
   d4faa:	e014      	b.n	d4fd6 <setup+0x16e>
  Particle.function("LowPowerMode",setLowPowerMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
   d4fac:	f001 fedc 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4fb0:	2204      	movs	r2, #4
   d4fb2:	a902      	add	r1, sp, #8
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	9702      	str	r7, [sp, #8]
   d4fb8:	f000 f986 	bl	d52c8 <HAL_EEPROM_Put>
    for (int i=1; i < 100; i++) {
   d4fbc:	2701      	movs	r7, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d4fbe:	f001 fed3 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4fc2:	4638      	mov	r0, r7
   d4fc4:	2204      	movs	r2, #4
   d4fc6:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4fc8:	3701      	adds	r7, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
   d4fca:	9402      	str	r4, [sp, #8]
   d4fcc:	f000 f97c 	bl	d52c8 <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 100; i++) {
   d4fd0:	2f64      	cmp	r7, #100	; 0x64
   d4fd2:	d1f4      	bne.n	d4fbe <setup+0x156>
   d4fd4:	e7d0      	b.n	d4f78 <setup+0x110>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
   d4fd6:	6823      	ldr	r3, [r4, #0]
   d4fd8:	2b05      	cmp	r3, #5
   d4fda:	dd07      	ble.n	d4fec <setup+0x184>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
   d4fdc:	f001 fec4 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4fe0:	2104      	movs	r1, #4
   d4fe2:	2002      	movs	r0, #2
   d4fe4:	f7ff f876 	bl	d40d4 <_ZN11EEPROMClass5writeEih.isra.22>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
   d4fe8:	f7ff fa94 	bl	d4514 <_Z14fullModemResetv>
  }

  // Load time variables
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
   d4fec:	f001 febc 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d4ff0:	2003      	movs	r0, #3
   d4ff2:	f7ff f86d 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
   d4ff6:	f100 030c 	add.w	r3, r0, #12
   d4ffa:	b2db      	uxtb	r3, r3
   d4ffc:	2b18      	cmp	r3, #24
   d4ffe:	bf9a      	itte	ls
   d5000:	b243      	sxtbls	r3, r0
   d5002:	ee00 3a10 	vmovls	s0, r3
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
   d5006:	ed9f 0a51 	vldrhi	s0, [pc, #324]	; d514c <setup+0x2e4>
  currentMinutePeriod = Time.minute(t);

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d500a:	4c51      	ldr	r4, [pc, #324]	; (d5150 <setup+0x2e8>)
    fullModemReset();                                                   // This will reset the modem and the device will reboot
  }

  // Load time variables
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
   d500c:	bf98      	it	ls
   d500e:	eeb8 0ac0 	vcvtls.f32.s32	s0, s0
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
   d5012:	f001 fc67 	bl	d68e4 <_ZN9TimeClass4zoneEf>
  time_t t = EEPROM.read(MEM_MAP::currentCountsTimeAddr);
   d5016:	f001 fea7 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d501a:	2005      	movs	r0, #5
   d501c:	f7ff f858 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
  currentMinutePeriod = Time.minute(t);
   d5020:	f001 fc58 	bl	d68d4 <_ZN9TimeClass6minuteEl>
   d5024:	4b4b      	ldr	r3, [pc, #300]	; (d5154 <setup+0x2ec>)
   d5026:	7018      	strb	r0, [r3, #0]

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
   d5028:	f001 fe9e 	bl	d6d68 <_Z21__fetch_global_EEPROMv>
   d502c:	2004      	movs	r0, #4
   d502e:	f7ff f84f 	bl	d40d0 <_ZN11EEPROMClass4readEi.isra.21>
   d5032:	4b49      	ldr	r3, [pc, #292]	; (d5158 <setup+0x2f0>)
   d5034:	7018      	strb	r0, [r3, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d5036:	4b29      	ldr	r3, [pc, #164]	; (d50dc <setup+0x274>)
   d5038:	f000 0201 	and.w	r2, r0, #1
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d503c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  time_t t = EEPROM.read(MEM_MAP::currentCountsTimeAddr);
  currentMinutePeriod = Time.minute(t);

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
   d5040:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
   d5042:	7020      	strb	r0, [r4, #0]

  takeMeasurements();                                                   // For the benefit of monitoring the device
   d5044:	f7ff f88c 	bl	d4160 <_Z16takeMeasurementsv>

  if (sensor_data.batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
   d5048:	4b44      	ldr	r3, [pc, #272]	; (d515c <setup+0x2f4>)
   d504a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
   d504e:	4b44      	ldr	r3, [pc, #272]	; (d5160 <setup+0x2f8>)
   d5050:	edd3 7a00 	vldr	s15, [r3]
   d5054:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d5058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d505c:	d802      	bhi.n	d5064 <setup+0x1fc>
   d505e:	2307      	movs	r3, #7
   d5060:	702b      	strb	r3, [r5, #0]
   d5062:	e008      	b.n	d5076 <setup+0x20e>
  else if(!connectToParticle()) {
   d5064:	f7ff f9ca 	bl	d43fc <_Z17connectToParticlev>
   d5068:	b928      	cbnz	r0, d5076 <setup+0x20e>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d506a:	2301      	movs	r3, #1
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d506c:	493d      	ldr	r1, [pc, #244]	; (d5164 <setup+0x2fc>)

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (sensor_data.batteryVoltage <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
   d506e:	702b      	strb	r3, [r5, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d5070:	4630      	mov	r0, r6
   d5072:	f002 fb9f 	bl	d77b4 <strcpy>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5076:	f000 fab5 	bl	d55e4 <spark_cloud_flag_connected>
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d507a:	b108      	cbz	r0, d5080 <setup+0x218>
   d507c:	7823      	ldrb	r3, [r4, #0]
   d507e:	b943      	cbnz	r3, d5092 <setup+0x22a>
   d5080:	f000 f8f2 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>

  stayAwakeTimeStamp = millis();                                      // Time stamp to keep us from going to sleep too early
   d5084:	4b38      	ldr	r3, [pc, #224]	; (d5168 <setup+0x300>)
   d5086:	6018      	str	r0, [r3, #0]
  state = IDLE_STATE;

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
   d5088:	a804      	add	r0, sp, #16
   d508a:	f001 fada 	bl	d6642 <_ZN6StringD1Ev>
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went

  stayAwakeTimeStamp = millis();                                      // Time stamp to keep us from going to sleep too early
}
   d508e:	b039      	add	sp, #228	; 0xe4
   d5090:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5092:	4b36      	ldr	r3, [pc, #216]	; (d516c <setup+0x304>)
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
   d5094:	4936      	ldr	r1, [pc, #216]	; (d5170 <setup+0x308>)
   d5096:	781b      	ldrb	r3, [r3, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5098:	2200      	movs	r2, #0
   d509a:	f88d 2000 	strb.w	r2, [sp]
   d509e:	a802      	add	r0, sp, #8
   d50a0:	4632      	mov	r2, r6
   d50a2:	f7ff f819 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.52.constprop.56>
   d50a6:	a803      	add	r0, sp, #12
   d50a8:	f7ff fa60 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50ac:	e7e8      	b.n	d5080 <setup+0x218>
   d50ae:	bf00      	nop
   d50b0:	000d80c4 	.word	0x000d80c4
   d50b4:	2003e1fd 	.word	0x2003e1fd
   d50b8:	000d46d1 	.word	0x000d46d1
   d50bc:	2003e2b4 	.word	0x2003e2b4
   d50c0:	000d8455 	.word	0x000d8455
   d50c4:	2003e200 	.word	0x2003e200
   d50c8:	000d845c 	.word	0x000d845c
   d50cc:	2003e0c4 	.word	0x2003e0c4
   d50d0:	000d8467 	.word	0x000d8467
   d50d4:	2003e32c 	.word	0x2003e32c
   d50d8:	000d846f 	.word	0x000d846f
   d50dc:	2003e2ae 	.word	0x2003e2ae
   d50e0:	000d847a 	.word	0x000d847a
   d50e4:	2003e1b0 	.word	0x2003e1b0
   d50e8:	000d8487 	.word	0x000d8487
   d50ec:	2003e31c 	.word	0x2003e31c
   d50f0:	000d8493 	.word	0x000d8493
   d50f4:	2003e280 	.word	0x2003e280
   d50f8:	000d849c 	.word	0x000d849c
   d50fc:	2003e1c4 	.word	0x2003e1c4
   d5100:	000d84a5 	.word	0x000d84a5
   d5104:	2003e1dc 	.word	0x2003e1dc
   d5108:	000d84b3 	.word	0x000d84b3
   d510c:	2003e1ed 	.word	0x2003e1ed
   d5110:	000d84c1 	.word	0x000d84c1
   d5114:	2003e204 	.word	0x2003e204
   d5118:	000d84cf 	.word	0x000d84cf
   d511c:	2003e228 	.word	0x2003e228
   d5120:	000d84dd 	.word	0x000d84dd
   d5124:	2003e291 	.word	0x2003e291
   d5128:	000d84eb 	.word	0x000d84eb
   d512c:	000d40b5 	.word	0x000d40b5
   d5130:	000d84f9 	.word	0x000d84f9
   d5134:	000d48ed 	.word	0x000d48ed
   d5138:	000d8505 	.word	0x000d8505
   d513c:	000d4799 	.word	0x000d4799
   d5140:	000d8512 	.word	0x000d8512
   d5144:	000d4845 	.word	0x000d4845
   d5148:	000d851f 	.word	0x000d851f
   d514c:	00000000 	.word	0x00000000
   d5150:	2003e1ec 	.word	0x2003e1ec
   d5154:	2003e290 	.word	0x2003e290
   d5158:	2003e33c 	.word	0x2003e33c
   d515c:	2003e238 	.word	0x2003e238
   d5160:	2003e0d0 	.word	0x2003e0d0
   d5164:	000d852b 	.word	0x000d852b
   d5168:	2003e2b0 	.word	0x2003e2b0
   d516c:	2003e1d4 	.word	0x2003e1d4
   d5170:	000d853d 	.word	0x000d853d

000d5174 <_GLOBAL__sub_I_SystemMode>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d5174:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5176:	4b0d      	ldr	r3, [pc, #52]	; (d51ac <_GLOBAL__sub_I_SystemMode+0x38>)
   d5178:	2400      	movs	r4, #0
   d517a:	601c      	str	r4, [r3, #0]
   d517c:	4b0c      	ldr	r3, [pc, #48]	; (d51b0 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d517e:	2501      	movs	r5, #1
   d5180:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5182:	f000 f8b9 	bl	d52f8 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5186:	4b0b      	ldr	r3, [pc, #44]	; (d51b4 <_GLOBAL__sub_I_SystemMode+0x40>)
   d5188:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d518c:	701c      	strb	r4, [r3, #0]
   d518e:	805c      	strh	r4, [r3, #2]
   d5190:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5192:	2002      	movs	r0, #2
   d5194:	f000 f9a8 	bl	d54e8 <set_system_mode>

#define MEMORYMAPVERSION 2                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5198:	4621      	mov	r1, r4
   d519a:	4628      	mov	r0, r5
   d519c:	f000 f9bc 	bl	d5518 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d51a0:	4629      	mov	r1, r5
   d51a2:	2004      	movs	r0, #4
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
   d51a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d51a8:	f000 b83e 	b.w	d5228 <HAL_Feature_Set>
   d51ac:	2003e2a4 	.word	0x2003e2a4
   d51b0:	2003e1d4 	.word	0x2003e1d4
   d51b4:	2003e2a8 	.word	0x2003e2a8

000d51b8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <cellular_signal+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	00030274 	.word	0x00030274

000d51c8 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <cellular_command+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	00030274 	.word	0x00030274

000d51d8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <os_thread_is_current+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	689b      	ldr	r3, [r3, #8]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	00030248 	.word	0x00030248

000d51e8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <os_thread_join+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	691b      	ldr	r3, [r3, #16]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	00030248 	.word	0x00030248

000d51f8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <os_thread_cleanup+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	695b      	ldr	r3, [r3, #20]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030248 	.word	0x00030248

000d5208 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <os_mutex_create+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030248 	.word	0x00030248

000d5218 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <os_mutex_recursive_create+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030248 	.word	0x00030248

000d5228 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <HAL_Feature_Set+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030234 	.word	0x00030234

000d5238 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <HAL_Core_System_Reset_Ex+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030234 	.word	0x00030234

000d5248 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030234 	.word	0x00030234

000d5258 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <HAL_RNG_GetRandomNumber+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	685b      	ldr	r3, [r3, #4]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030218 	.word	0x00030218

000d5268 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	695b      	ldr	r3, [r3, #20]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030218 	.word	0x00030218

000d5278 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <HAL_RTC_Get_UnixTime+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	69db      	ldr	r3, [r3, #28]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030218 	.word	0x00030218

000d5288 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <HAL_EEPROM_Init+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030218 	.word	0x00030218

000d5298 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_EEPROM_Read+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030218 	.word	0x00030218

000d52a8 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_EEPROM_Write+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030218 	.word	0x00030218

000d52b8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <HAL_EEPROM_Get+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030218 	.word	0x00030218

000d52c8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <HAL_EEPROM_Put+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030218 	.word	0x00030218

000d52d8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <HAL_RTC_Time_Is_Valid+0xc>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d52e0:	9301      	str	r3, [sp, #4]
   d52e2:	bd08      	pop	{r3, pc}
   d52e4:	00030218 	.word	0x00030218

000d52e8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d52e8:	b508      	push	{r3, lr}
   d52ea:	4b02      	ldr	r3, [pc, #8]	; (d52f4 <hal_timer_millis+0xc>)
   d52ec:	681b      	ldr	r3, [r3, #0]
   d52ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d52f0:	9301      	str	r3, [sp, #4]
   d52f2:	bd08      	pop	{r3, pc}
   d52f4:	00030218 	.word	0x00030218

000d52f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d52f8:	b508      	push	{r3, lr}
   d52fa:	4b02      	ldr	r3, [pc, #8]	; (d5304 <HAL_Pin_Map+0xc>)
   d52fc:	681b      	ldr	r3, [r3, #0]
   d52fe:	681b      	ldr	r3, [r3, #0]
   d5300:	9301      	str	r3, [sp, #4]
   d5302:	bd08      	pop	{r3, pc}
   d5304:	0003022c 	.word	0x0003022c

000d5308 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5308:	b508      	push	{r3, lr}
   d530a:	4b02      	ldr	r3, [pc, #8]	; (d5314 <HAL_Pin_Mode+0xc>)
   d530c:	681b      	ldr	r3, [r3, #0]
   d530e:	689b      	ldr	r3, [r3, #8]
   d5310:	9301      	str	r3, [sp, #4]
   d5312:	bd08      	pop	{r3, pc}
   d5314:	0003022c 	.word	0x0003022c

000d5318 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <HAL_Get_Pin_Mode+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	68db      	ldr	r3, [r3, #12]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	0003022c 	.word	0x0003022c

000d5328 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <HAL_GPIO_Write+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	691b      	ldr	r3, [r3, #16]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	0003022c 	.word	0x0003022c

000d5338 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <HAL_I2C_Write_Data+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	6a1b      	ldr	r3, [r3, #32]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030228 	.word	0x00030228

000d5348 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <HAL_I2C_Available_Data+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030228 	.word	0x00030228

000d5358 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <HAL_I2C_Read_Data+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030228 	.word	0x00030228

000d5368 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <HAL_I2C_Peek_Data+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030228 	.word	0x00030228

000d5378 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <HAL_I2C_Flush_Data+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	00030228 	.word	0x00030228

000d5388 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <HAL_I2C_Is_Enabled+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	00030228 	.word	0x00030228

000d5398 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <HAL_I2C_Init+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	00030228 	.word	0x00030228

000d53a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <inet_inet_ntop+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	695b      	ldr	r3, [r3, #20]
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	00030264 	.word	0x00030264

000d53b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <netdb_freeaddrinfo+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	689b      	ldr	r3, [r3, #8]
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	00030268 	.word	0x00030268

000d53c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <netdb_getaddrinfo+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	68db      	ldr	r3, [r3, #12]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030268 	.word	0x00030268

000d53d8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <HAL_SPI_Init+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	69db      	ldr	r3, [r3, #28]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030230 	.word	0x00030230

000d53e8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <HAL_SPI_Is_Enabled+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	6a1b      	ldr	r3, [r3, #32]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030230 	.word	0x00030230

000d53f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <HAL_USART_Init+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	681b      	ldr	r3, [r3, #0]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003023c 	.word	0x0003023c

000d5408 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <HAL_USART_Write_Data+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	68db      	ldr	r3, [r3, #12]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	0003023c 	.word	0x0003023c

000d5418 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <HAL_USART_Available_Data+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	0003023c 	.word	0x0003023c

000d5428 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <HAL_USART_Read_Data+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	0003023c 	.word	0x0003023c

000d5438 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_USART_Peek_Data+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	699b      	ldr	r3, [r3, #24]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	0003023c 	.word	0x0003023c

000d5448 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <HAL_USART_Flush_Data+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	69db      	ldr	r3, [r3, #28]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	0003023c 	.word	0x0003023c

000d5458 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_USART_Is_Enabled+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6a1b      	ldr	r3, [r3, #32]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	0003023c 	.word	0x0003023c

000d5468 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_USART_Available_Data_For_Write+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	0003023c 	.word	0x0003023c

000d5478 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <HAL_USB_USART_Init+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	681b      	ldr	r3, [r3, #0]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003024c 	.word	0x0003024c

000d5488 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_USB_USART_Available_Data+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	691b      	ldr	r3, [r3, #16]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	0003024c 	.word	0x0003024c

000d5498 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	695b      	ldr	r3, [r3, #20]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	0003024c 	.word	0x0003024c

000d54a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_USB_USART_Receive_Data+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	699b      	ldr	r3, [r3, #24]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	0003024c 	.word	0x0003024c

000d54b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_USB_USART_Send_Data+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	69db      	ldr	r3, [r3, #28]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	0003024c 	.word	0x0003024c

000d54c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <HAL_USB_USART_Flush_Data+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6a1b      	ldr	r3, [r3, #32]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	0003024c 	.word	0x0003024c

000d54d8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <system_mode+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	681b      	ldr	r3, [r3, #0]
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030220 	.word	0x00030220

000d54e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <set_system_mode+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	685b      	ldr	r3, [r3, #4]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030220 	.word	0x00030220

000d54f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <system_delay_ms+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	695b      	ldr	r3, [r3, #20]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030220 	.word	0x00030220

000d5508 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <system_sleep+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	699b      	ldr	r3, [r3, #24]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030220 	.word	0x00030220

000d5518 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <system_thread_set_state+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030220 	.word	0x00030220

000d5528 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <application_thread_current+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030220 	.word	0x00030220

000d5538 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <application_thread_invoke+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030220 	.word	0x00030220

000d5548 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <system_thread_get_state+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030220 	.word	0x00030220

000d5558 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b03      	ldr	r3, [pc, #12]	; (d5568 <system_ctrl_set_app_request_handler+0x10>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5562:	9301      	str	r3, [sp, #4]
   d5564:	bd08      	pop	{r3, pc}
   d5566:	0000      	.short	0x0000
   d5568:	00030220 	.word	0x00030220

000d556c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b03      	ldr	r3, [pc, #12]	; (d557c <system_ctrl_set_result+0x10>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5576:	9301      	str	r3, [sp, #4]
   d5578:	bd08      	pop	{r3, pc}
   d557a:	0000      	.short	0x0000
   d557c:	00030220 	.word	0x00030220

000d5580 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b03      	ldr	r3, [pc, #12]	; (d5590 <system_sleep_pins+0x10>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d558a:	9301      	str	r3, [sp, #4]
   d558c:	bd08      	pop	{r3, pc}
   d558e:	0000      	.short	0x0000
   d5590:	00030220 	.word	0x00030220

000d5594 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <spark_variable+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	681b      	ldr	r3, [r3, #0]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030244 	.word	0x00030244

000d55a4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <spark_function+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	685b      	ldr	r3, [r3, #4]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030244 	.word	0x00030244

000d55b4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <spark_process+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	689b      	ldr	r3, [r3, #8]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030244 	.word	0x00030244

000d55c4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <spark_cloud_flag_connect+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	68db      	ldr	r3, [r3, #12]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030244 	.word	0x00030244

000d55d4 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <spark_cloud_flag_disconnect+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	691b      	ldr	r3, [r3, #16]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030244 	.word	0x00030244

000d55e4 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <spark_cloud_flag_connected+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	695b      	ldr	r3, [r3, #20]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030244 	.word	0x00030244

000d55f4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <spark_deviceID+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	69db      	ldr	r3, [r3, #28]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030244 	.word	0x00030244

000d5604 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <spark_send_event+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6a1b      	ldr	r3, [r3, #32]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030244 	.word	0x00030244

000d5614 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <spark_subscribe+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030244 	.word	0x00030244

000d5624 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <spark_sync_time+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030244 	.word	0x00030244

000d5634 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <spark_sync_time_pending+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030244 	.word	0x00030244

000d5644 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030244 	.word	0x00030244

000d5654 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <network_connect+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	685b      	ldr	r3, [r3, #4]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030240 	.word	0x00030240

000d5664 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <network_connecting+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	689b      	ldr	r3, [r3, #8]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030240 	.word	0x00030240

000d5674 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <network_disconnect+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	68db      	ldr	r3, [r3, #12]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030240 	.word	0x00030240

000d5684 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <network_ready+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	691b      	ldr	r3, [r3, #16]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030240 	.word	0x00030240

000d5694 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <network_on+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	695b      	ldr	r3, [r3, #20]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030240 	.word	0x00030240

000d56a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <network_off+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	699b      	ldr	r3, [r3, #24]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030240 	.word	0x00030240

000d56b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <network_listen+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	69db      	ldr	r3, [r3, #28]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030240 	.word	0x00030240

000d56c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <network_listening+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6a1b      	ldr	r3, [r3, #32]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030240 	.word	0x00030240

000d56d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <network_set_listen_timeout+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030240 	.word	0x00030240

000d56e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <network_get_listen_timeout+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030240 	.word	0x00030240

000d56f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <malloc+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	681b      	ldr	r3, [r3, #0]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003021c 	.word	0x0003021c

000d5704 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <free+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	685b      	ldr	r3, [r3, #4]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003021c 	.word	0x0003021c

000d5714 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <realloc+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	689b      	ldr	r3, [r3, #8]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003021c 	.word	0x0003021c

000d5724 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <siprintf+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	691b      	ldr	r3, [r3, #16]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003021c 	.word	0x0003021c

000d5734 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <siscanf+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	699b      	ldr	r3, [r3, #24]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003021c 	.word	0x0003021c

000d5744 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <snprintf+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	69db      	ldr	r3, [r3, #28]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003021c 	.word	0x0003021c

000d5754 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <abort+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003021c 	.word	0x0003021c

000d5764 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <_malloc_r+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003021c 	.word	0x0003021c

000d5774 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5774:	2100      	movs	r1, #0
   d5776:	f7ff bebf 	b.w	d54f8 <system_delay_ms>

000d577a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d577a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d577c:	6883      	ldr	r3, [r0, #8]
   d577e:	4604      	mov	r4, r0
   d5780:	b90b      	cbnz	r3, d5786 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5782:	f001 fb4e 	bl	d6e22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5786:	68c3      	ldr	r3, [r0, #12]
   d5788:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d578a:	68a3      	ldr	r3, [r4, #8]
   d578c:	b11b      	cbz	r3, d5796 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d578e:	2203      	movs	r2, #3
   d5790:	4621      	mov	r1, r4
   d5792:	4620      	mov	r0, r4
   d5794:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5796:	4620      	mov	r0, r4
   d5798:	2110      	movs	r1, #16
}
   d579a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d579e:	f001 bb3e 	b.w	d6e1e <_ZdlPvj>

000d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d57a2:	680b      	ldr	r3, [r1, #0]
   d57a4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d57a6:	b113      	cbz	r3, d57ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d57a8:	685a      	ldr	r2, [r3, #4]
   d57aa:	3201      	adds	r2, #1
   d57ac:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d57ae:	4770      	bx	lr

000d57b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57b0:	4802      	ldr	r0, [pc, #8]	; (d57bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d57b2:	2300      	movs	r3, #0
   d57b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d57b6:	f7ff bd2f 	b.w	d5218 <os_mutex_recursive_create>
   d57ba:	bf00      	nop
   d57bc:	2003e340 	.word	0x2003e340

000d57c0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d57c0:	2200      	movs	r2, #0
   d57c2:	4611      	mov	r1, r2
   d57c4:	6840      	ldr	r0, [r0, #4]
   d57c6:	f7ff bf5d 	b.w	d5684 <network_ready>

000d57ca <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57ca:	2200      	movs	r2, #0
   d57cc:	4611      	mov	r1, r2
   d57ce:	6840      	ldr	r0, [r0, #4]
   d57d0:	f7ff bf78 	b.w	d56c4 <network_listening>

000d57d4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57d4:	2200      	movs	r2, #0
   d57d6:	4611      	mov	r1, r2
   d57d8:	6840      	ldr	r0, [r0, #4]
   d57da:	f7ff bf83 	b.w	d56e4 <network_get_listen_timeout>

000d57de <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57de:	2200      	movs	r2, #0
   d57e0:	6840      	ldr	r0, [r0, #4]
   d57e2:	f7ff bf77 	b.w	d56d4 <network_set_listen_timeout>

000d57e6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57e6:	2200      	movs	r2, #0
   d57e8:	f081 0101 	eor.w	r1, r1, #1
   d57ec:	6840      	ldr	r0, [r0, #4]
   d57ee:	f7ff bf61 	b.w	d56b4 <network_listen>

000d57f2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d57f2:	2300      	movs	r3, #0
   d57f4:	461a      	mov	r2, r3
   d57f6:	4619      	mov	r1, r3
   d57f8:	6840      	ldr	r0, [r0, #4]
   d57fa:	f7ff bf53 	b.w	d56a4 <network_off>

000d57fe <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d57fe:	2300      	movs	r3, #0
   d5800:	461a      	mov	r2, r3
   d5802:	4619      	mov	r1, r3
   d5804:	6840      	ldr	r0, [r0, #4]
   d5806:	f7ff bf45 	b.w	d5694 <network_on>

000d580a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d580a:	2200      	movs	r2, #0
   d580c:	4611      	mov	r1, r2
   d580e:	6840      	ldr	r0, [r0, #4]
   d5810:	f7ff bf28 	b.w	d5664 <network_connecting>

000d5814 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5814:	2200      	movs	r2, #0
   d5816:	2102      	movs	r1, #2
   d5818:	6840      	ldr	r0, [r0, #4]
   d581a:	f7ff bf2b 	b.w	d5674 <network_disconnect>

000d581e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d581e:	2300      	movs	r3, #0
   d5820:	461a      	mov	r2, r3
   d5822:	6840      	ldr	r0, [r0, #4]
   d5824:	f7ff bf16 	b.w	d5654 <network_connect>

000d5828 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5828:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d582a:	4b1b      	ldr	r3, [pc, #108]	; (d5898 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d582c:	6003      	str	r3, [r0, #0]
   d582e:	2500      	movs	r5, #0
   d5830:	460f      	mov	r7, r1
   d5832:	3328      	adds	r3, #40	; 0x28
   d5834:	2618      	movs	r6, #24
   d5836:	b089      	sub	sp, #36	; 0x24
   d5838:	6043      	str	r3, [r0, #4]
   d583a:	6085      	str	r5, [r0, #8]
   d583c:	60c5      	str	r5, [r0, #12]
   d583e:	4632      	mov	r2, r6
   d5840:	4629      	mov	r1, r5
   d5842:	4604      	mov	r4, r0
   d5844:	3010      	adds	r0, #16
   d5846:	f001 ff40 	bl	d76ca <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d584a:	462a      	mov	r2, r5
   d584c:	4629      	mov	r1, r5
   d584e:	6878      	ldr	r0, [r7, #4]
   d5850:	f7ff ff18 	bl	d5684 <network_ready>
   d5854:	b908      	cbnz	r0, d585a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5856:	60a0      	str	r0, [r4, #8]
            return sig;
   d5858:	e01b      	b.n	d5892 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d585a:	4629      	mov	r1, r5
   d585c:	4632      	mov	r2, r6
   d585e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5860:	9500      	str	r5, [sp, #0]
   d5862:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5864:	f001 ff31 	bl	d76ca <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5868:	a902      	add	r1, sp, #8
   d586a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d586c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5870:	f7ff fca2 	bl	d51b8 <cellular_signal>
   d5874:	b110      	cbz	r0, d587c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5876:	2301      	movs	r3, #1
   d5878:	60a3      	str	r3, [r4, #8]
            return sig;
   d587a:	e00a      	b.n	d5892 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d587c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d587e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5880:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5882:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5884:	b90b      	cbnz	r3, d588a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5886:	2302      	movs	r3, #2
   d5888:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d588a:	a902      	add	r1, sp, #8
   d588c:	4620      	mov	r0, r4
   d588e:	f000 f8a1 	bl	d59d4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5892:	4620      	mov	r0, r4
   d5894:	b009      	add	sp, #36	; 0x24
   d5896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5898:	000d85b8 	.word	0x000d85b8

000d589c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d589c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d589e:	4c08      	ldr	r4, [pc, #32]	; (d58c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d58a0:	2528      	movs	r5, #40	; 0x28
   d58a2:	462a      	mov	r2, r5
   d58a4:	2100      	movs	r1, #0
   d58a6:	4620      	mov	r0, r4
   d58a8:	f001 ff0f 	bl	d76ca <memset>
        cid = -1;
   d58ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d58b0:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d58b2:	4b04      	ldr	r3, [pc, #16]	; (d58c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d58b4:	8025      	strh	r5, [r4, #0]
   d58b6:	2204      	movs	r2, #4
   d58b8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d58ba:	4a03      	ldr	r2, [pc, #12]	; (d58c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d58bc:	601a      	str	r2, [r3, #0]
   d58be:	bd38      	pop	{r3, r4, r5, pc}
   d58c0:	2003e34c 	.word	0x2003e34c
   d58c4:	2003e344 	.word	0x2003e344
   d58c8:	000d8584 	.word	0x000d8584

000d58cc <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d58cc:	4770      	bx	lr

000d58ce <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d58ce:	7d00      	ldrb	r0, [r0, #20]
   d58d0:	4770      	bx	lr
	...

000d58d4 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d58d4:	7d03      	ldrb	r3, [r0, #20]
   d58d6:	b11b      	cbz	r3, d58e0 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d58d8:	6983      	ldr	r3, [r0, #24]
   d58da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d58de:	d102      	bne.n	d58e6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d58e0:	ed9f 0a05 	vldr	s0, [pc, #20]	; d58f8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d58e4:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d58e6:	ee07 3a90 	vmov	s15, r3
   d58ea:	ed9f 7a04 	vldr	s14, [pc, #16]	; d58fc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d58ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d58f2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d58f6:	4770      	bx	lr
   d58f8:	00000000 	.word	0x00000000
   d58fc:	42c80000 	.word	0x42c80000

000d5900 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5900:	7d03      	ldrb	r3, [r0, #20]
   d5902:	b11b      	cbz	r3, d590c <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5904:	6a03      	ldr	r3, [r0, #32]
   d5906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d590a:	d102      	bne.n	d5912 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d590c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5924 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5910:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5912:	ee07 3a90 	vmov	s15, r3
   d5916:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5928 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d591a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d591e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5922:	4770      	bx	lr
   d5924:	00000000 	.word	0x00000000
   d5928:	42c80000 	.word	0x42c80000

000d592c <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d592c:	b570      	push	{r4, r5, r6, lr}
   d592e:	460d      	mov	r5, r1
   d5930:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5932:	220a      	movs	r2, #10
   d5934:	6881      	ldr	r1, [r0, #8]
   d5936:	4628      	mov	r0, r5
   d5938:	f000 fe42 	bl	d65c0 <_ZN5Print5printEii>
    n += p.print(',');
   d593c:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d593e:	4604      	mov	r4, r0
    n += p.print(',');
   d5940:	4628      	mov	r0, r5
   d5942:	f000 fdd3 	bl	d64ec <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5946:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5948:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d594a:	68f1      	ldr	r1, [r6, #12]
   d594c:	4628      	mov	r0, r5
   d594e:	f000 fe37 	bl	d65c0 <_ZN5Print5printEii>
    return n;
}
   d5952:	4420      	add	r0, r4
   d5954:	bd70      	pop	{r4, r5, r6, pc}

000d5956 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5956:	f1a0 0004 	sub.w	r0, r0, #4
   d595a:	f7ff bfe7 	b.w	d592c <_ZNK14CellularSignal7printToER5Print>

000d595e <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d595e:	b510      	push	{r4, lr}
   d5960:	2128      	movs	r1, #40	; 0x28
   d5962:	4604      	mov	r4, r0
   d5964:	f001 fa5b 	bl	d6e1e <_ZdlPvj>
   d5968:	4620      	mov	r0, r4
   d596a:	bd10      	pop	{r4, pc}

000d596c <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d596c:	7d03      	ldrb	r3, [r0, #20]
   d596e:	b17b      	cbz	r3, d5990 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5970:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5972:	2b00      	cmp	r3, #0
   d5974:	db0c      	blt.n	d5990 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5976:	ee07 3a90 	vmov	s15, r3
   d597a:	eddf 6a07 	vldr	s13, [pc, #28]	; d5998 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d597e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d599c <_ZNK14CellularSignal10getQualityEv+0x30>
   d5982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5986:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d598a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d598e:	4770      	bx	lr
    }

    return -1.0f;
   d5990:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5994:	4770      	bx	lr
   d5996:	bf00      	nop
   d5998:	477fff00 	.word	0x477fff00
   d599c:	42c80000 	.word	0x42c80000

000d59a0 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d59a0:	7d03      	ldrb	r3, [r0, #20]
   d59a2:	b17b      	cbz	r3, d59c4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d59a4:	69c3      	ldr	r3, [r0, #28]
   d59a6:	2b00      	cmp	r3, #0
   d59a8:	db0c      	blt.n	d59c4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d59aa:	ee07 3a90 	vmov	s15, r3
   d59ae:	eddf 6a07 	vldr	s13, [pc, #28]	; d59cc <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d59b2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d59d0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d59b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d59ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d59be:	ee27 0a80 	vmul.f32	s0, s15, s0
   d59c2:	4770      	bx	lr
    }

    return -1.0f;
   d59c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d59c8:	4770      	bx	lr
   d59ca:	bf00      	nop
   d59cc:	477fff00 	.word	0x477fff00
   d59d0:	42c80000 	.word	0x42c80000

000d59d4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d59d4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d59d6:	460d      	mov	r5, r1
   d59d8:	f100 0410 	add.w	r4, r0, #16
   d59dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59e0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d59e4:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d59e8:	2001      	movs	r0, #1
   d59ea:	bd30      	pop	{r4, r5, pc}

000d59ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59ec:	4770      	bx	lr

000d59ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d59ee:	2000      	movs	r0, #0
   d59f0:	4770      	bx	lr

000d59f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59f2:	b510      	push	{r4, lr}
   d59f4:	2110      	movs	r1, #16
   d59f6:	4604      	mov	r4, r0
   d59f8:	f001 fa11 	bl	d6e1e <_ZdlPvj>
   d59fc:	4620      	mov	r0, r4
   d59fe:	bd10      	pop	{r4, pc}

000d5a00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5a00:	b508      	push	{r3, lr}
      { delete this; }
   d5a02:	b108      	cbz	r0, d5a08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5a04:	f7ff fff5 	bl	d59f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5a08:	bd08      	pop	{r3, pc}

000d5a0a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a0a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a0c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a0e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a10:	b113      	cbz	r3, d5a18 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a12:	2203      	movs	r2, #3
   d5a14:	4601      	mov	r1, r0
   d5a16:	4798      	blx	r3
    }
   d5a18:	4620      	mov	r0, r4
   d5a1a:	bd10      	pop	{r4, pc}

000d5a1c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a1c:	2200      	movs	r2, #0
   d5a1e:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5a20:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a22:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5a26:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a28:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5a2c:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a2e:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a30:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a32:	680c      	ldr	r4, [r1, #0]
   d5a34:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a36:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5a38:	bd10      	pop	{r4, pc}

000d5a3a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
    free((void*)msg_);
   d5a3e:	6800      	ldr	r0, [r0, #0]
   d5a40:	f7ff fe60 	bl	d5704 <free>
}
   d5a44:	4620      	mov	r0, r4
   d5a46:	bd10      	pop	{r4, pc}

000d5a48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5a48:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5a4a:	68c4      	ldr	r4, [r0, #12]
   d5a4c:	b1f4      	cbz	r4, d5a8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5a4e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5a50:	2b02      	cmp	r3, #2
   d5a52:	d103      	bne.n	d5a5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5a54:	f104 000c 	add.w	r0, r4, #12
   d5a58:	f7ff ffef 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5a5c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5a5e:	b135      	cbz	r5, d5a6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a60:	4628      	mov	r0, r5
   d5a62:	f7ff ffd2 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
   d5a66:	2110      	movs	r1, #16
   d5a68:	4628      	mov	r0, r5
   d5a6a:	f001 f9d8 	bl	d6e1e <_ZdlPvj>
   d5a6e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5a70:	b135      	cbz	r5, d5a80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5a72:	4628      	mov	r0, r5
   d5a74:	f7ff ffc9 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
   d5a78:	2110      	movs	r1, #16
   d5a7a:	4628      	mov	r0, r5
   d5a7c:	f001 f9cf 	bl	d6e1e <_ZdlPvj>
   d5a80:	4620      	mov	r0, r4
   d5a82:	2114      	movs	r1, #20
   d5a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5a88:	f001 b9c9 	b.w	d6e1e <_ZdlPvj>
   d5a8c:	bd38      	pop	{r3, r4, r5, pc}

000d5a8e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5a8e:	b510      	push	{r4, lr}
   d5a90:	b088      	sub	sp, #32
   d5a92:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5a94:	4668      	mov	r0, sp
   d5a96:	f000 fe1b 	bl	d66d0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5a9a:	4669      	mov	r1, sp
   d5a9c:	a804      	add	r0, sp, #16
   d5a9e:	f000 fe39 	bl	d6714 <_ZN6StringC1ERKS_>
   d5aa2:	a804      	add	r0, sp, #16
   d5aa4:	47a0      	blx	r4
   d5aa6:	4604      	mov	r4, r0
   d5aa8:	a804      	add	r0, sp, #16
   d5aaa:	f000 fdca 	bl	d6642 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5aae:	4668      	mov	r0, sp
   d5ab0:	f000 fdc7 	bl	d6642 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	b008      	add	sp, #32
   d5ab8:	bd10      	pop	{r4, pc}

000d5aba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5aba:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5abc:	2410      	movs	r4, #16
   d5abe:	b085      	sub	sp, #20
   d5ac0:	4607      	mov	r7, r0
   d5ac2:	460e      	mov	r6, r1
   d5ac4:	4615      	mov	r5, r2
   d5ac6:	2100      	movs	r1, #0
   d5ac8:	4622      	mov	r2, r4
   d5aca:	4668      	mov	r0, sp
   d5acc:	f001 fdfd 	bl	d76ca <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5ad0:	2200      	movs	r2, #0
   d5ad2:	4669      	mov	r1, sp
   d5ad4:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5ad6:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5ada:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5adc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5ade:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5ae0:	f7ff fd60 	bl	d55a4 <spark_function>
}
   d5ae4:	b005      	add	sp, #20
   d5ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ae8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5ae8:	b513      	push	{r0, r1, r4, lr}
   d5aea:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5aec:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5af0:	2300      	movs	r3, #0
   d5af2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5af4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5af6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5af8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5afa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5afc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5afe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b00:	f7fe fd34 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b04:	4620      	mov	r0, r4
   d5b06:	b002      	add	sp, #8
   d5b08:	bd10      	pop	{r4, pc}

000d5b0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b0c:	460c      	mov	r4, r1
   d5b0e:	ad02      	add	r5, sp, #8
   d5b10:	f854 3b04 	ldr.w	r3, [r4], #4
   d5b14:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5b18:	4606      	mov	r6, r0
   d5b1a:	460f      	mov	r7, r1
   d5b1c:	a801      	add	r0, sp, #4
   d5b1e:	4621      	mov	r1, r4
   d5b20:	f7ff fe3f 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5b24:	4629      	mov	r1, r5
   d5b26:	4630      	mov	r0, r6
   d5b28:	f7ff ffde 	bl	d5ae8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b2c:	a801      	add	r0, sp, #4
   d5b2e:	f7fe fd1d 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b32:	4620      	mov	r0, r4
   d5b34:	f7fe fd1a 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5b38:	4638      	mov	r0, r7
   d5b3a:	2108      	movs	r1, #8
   d5b3c:	f001 f96f 	bl	d6e1e <_ZdlPvj>
        return p;
    }
   d5b40:	4630      	mov	r0, r6
   d5b42:	b003      	add	sp, #12
   d5b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b46 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5b46:	b513      	push	{r0, r1, r4, lr}
   d5b48:	460b      	mov	r3, r1
   d5b4a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b4c:	c803      	ldmia	r0, {r0, r1}
   d5b4e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b52:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b56:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b5a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5b5e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5b62:	b002      	add	sp, #8
   d5b64:	bd10      	pop	{r4, pc}
	...

000d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b68:	b538      	push	{r3, r4, r5, lr}
   d5b6a:	2300      	movs	r3, #0
   d5b6c:	4604      	mov	r4, r0
   d5b6e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b70:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5b72:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b74:	f7fe fa8f 	bl	d4096 <_Znwj>
   d5b78:	b128      	cbz	r0, d5b86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5b7a:	2301      	movs	r3, #1
   d5b7c:	6043      	str	r3, [r0, #4]
   d5b7e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5b80:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5b82:	6003      	str	r3, [r0, #0]
   d5b84:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5b86:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5b88:	4620      	mov	r0, r4
   d5b8a:	bd38      	pop	{r3, r4, r5, pc}
   d5b8c:	000d85ec 	.word	0x000d85ec

000d5b90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b90:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b92:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b94:	b90a      	cbnz	r2, d5b9a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5b96:	f001 f944 	bl	d6e22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b9a:	68c3      	ldr	r3, [r0, #12]
    }
   d5b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ba0:	4718      	bx	r3

000d5ba2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ba2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5ba4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5ba6:	f100 0110 	add.w	r1, r0, #16
   d5baa:	f7ff fff1 	bl	d5b90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5bae:	bd08      	pop	{r3, pc}

000d5bb0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5bb0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5bb2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5bb4:	b90a      	cbnz	r2, d5bba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5bb6:	f001 f934 	bl	d6e22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bba:	68c3      	ldr	r3, [r0, #12]
    }
   d5bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bc0:	4718      	bx	r3

000d5bc2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5bc2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5bc4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5bc6:	f100 0110 	add.w	r1, r0, #16
   d5bca:	f7ff fff1 	bl	d5bb0 <_ZNKSt8functionIFvRKbEEclES1_>
   d5bce:	bd08      	pop	{r3, pc}

000d5bd0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bd0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bd2:	2300      	movs	r3, #0
   d5bd4:	6083      	str	r3, [r0, #8]
   d5bd6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bd8:	4604      	mov	r4, r0
   d5bda:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5bdc:	b12b      	cbz	r3, d5bea <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bde:	2202      	movs	r2, #2
   d5be0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5be2:	68eb      	ldr	r3, [r5, #12]
   d5be4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5be6:	68ab      	ldr	r3, [r5, #8]
   d5be8:	60a3      	str	r3, [r4, #8]
	}
    }
   d5bea:	4620      	mov	r0, r4
   d5bec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bf2:	b089      	sub	sp, #36	; 0x24
   d5bf4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5bf6:	4668      	mov	r0, sp
   d5bf8:	f7ff ff10 	bl	d5a1c <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5bfc:	2300      	movs	r3, #0
   d5bfe:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5c02:	f04f 0202 	mov.w	r2, #2
   d5c06:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5c0a:	2b00      	cmp	r3, #0
   d5c0c:	d103      	bne.n	d5c16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5c0e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5c12:	2900      	cmp	r1, #0
   d5c14:	d1f7      	bne.n	d5c06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5c16:	d002      	beq.n	d5c1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5c18:	f88d 3008 	strb.w	r3, [sp, #8]
   d5c1c:	e063      	b.n	d5ce6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5c1e:	f114 050c 	adds.w	r5, r4, #12
   d5c22:	d003      	beq.n	d5c2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5c24:	4669      	mov	r1, sp
   d5c26:	4628      	mov	r0, r5
   d5c28:	f7ff fef8 	bl	d5a1c <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5c2c:	f3bf 8f5f 	dmb	sy
   d5c30:	2301      	movs	r3, #1
   d5c32:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c34:	2000      	movs	r0, #0
   d5c36:	f104 0308 	add.w	r3, r4, #8
   d5c3a:	f3bf 8f5f 	dmb	sy
   d5c3e:	e853 6f00 	ldrex	r6, [r3]
   d5c42:	e843 0200 	strex	r2, r0, [r3]
   d5c46:	2a00      	cmp	r2, #0
   d5c48:	d1f9      	bne.n	d5c3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5c4a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5c4e:	2e00      	cmp	r6, #0
   d5c50:	d049      	beq.n	d5ce6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5c52:	f7ff fc69 	bl	d5528 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5c56:	b120      	cbz	r0, d5c62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c58:	4629      	mov	r1, r5
   d5c5a:	4630      	mov	r0, r6
   d5c5c:	f7ff ff98 	bl	d5b90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5c60:	e03a      	b.n	d5cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c62:	4631      	mov	r1, r6
   d5c64:	a802      	add	r0, sp, #8
   d5c66:	f7ff ffb3 	bl	d5bd0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5c6a:	68e0      	ldr	r0, [r4, #12]
   d5c6c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c70:	b108      	cbz	r0, d5c76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5c72:	f001 fda7 	bl	d77c4 <strdup>
   d5c76:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c78:	2010      	movs	r0, #16
   d5c7a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5c7e:	f7fe fa0a 	bl	d4096 <_Znwj>
   d5c82:	4605      	mov	r5, r0
   d5c84:	b1e8      	cbz	r0, d5cc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c86:	2700      	movs	r7, #0
   d5c88:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c8a:	2018      	movs	r0, #24
   d5c8c:	f7fe fa03 	bl	d4096 <_Znwj>
   d5c90:	4604      	mov	r4, r0
   d5c92:	b188      	cbz	r0, d5cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c94:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c96:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c98:	a802      	add	r0, sp, #8
   d5c9a:	f7ff ff54 	bl	d5b46 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c9e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5ca0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ca2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ca4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5ca6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ca8:	a906      	add	r1, sp, #24
   d5caa:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cac:	60e3      	str	r3, [r4, #12]
   d5cae:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5cb2:	9205      	str	r2, [sp, #20]
   d5cb4:	f7ff feb2 	bl	d5a1c <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5cb8:	4b0d      	ldr	r3, [pc, #52]	; (d5cf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5cba:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5cbc:	4b0d      	ldr	r3, [pc, #52]	; (d5cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cbe:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5cc0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5cc2:	a806      	add	r0, sp, #24
   d5cc4:	f7ff feb9 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cc8:	a802      	add	r0, sp, #8
   d5cca:	f7ff fe9e 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cce:	2200      	movs	r2, #0
   d5cd0:	4629      	mov	r1, r5
   d5cd2:	4809      	ldr	r0, [pc, #36]	; (d5cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5cd4:	f7ff fc30 	bl	d5538 <application_thread_invoke>
   d5cd8:	4630      	mov	r0, r6
   d5cda:	f7ff fe96 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5cde:	2110      	movs	r1, #16
   d5ce0:	4630      	mov	r0, r6
   d5ce2:	f001 f89c 	bl	d6e1e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5ce6:	4668      	mov	r0, sp
   d5ce8:	f7ff fea7 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
    }
   d5cec:	b009      	add	sp, #36	; 0x24
   d5cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cf0:	000d5ba3 	.word	0x000d5ba3
   d5cf4:	000d5e19 	.word	0x000d5e19
   d5cf8:	000d577b 	.word	0x000d577b

000d5cfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d00:	b08b      	sub	sp, #44	; 0x2c
   d5d02:	4606      	mov	r6, r0
   d5d04:	460f      	mov	r7, r1
   d5d06:	4690      	mov	r8, r2
   d5d08:	4699      	mov	r9, r3
   d5d0a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5d0e:	f7ff fc69 	bl	d55e4 <spark_cloud_flag_connected>
   d5d12:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5d14:	4683      	mov	fp, r0
   d5d16:	bb30      	cbnz	r0, d5d66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d18:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5d1c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d1e:	a905      	add	r1, sp, #20
   d5d20:	4628      	mov	r0, r5
   d5d22:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5d26:	f7ff fe79 	bl	d5a1c <_ZN8particle5ErrorC1EOS0_>
   d5d2a:	2014      	movs	r0, #20
   d5d2c:	f7fe f9b3 	bl	d4096 <_Znwj>
   d5d30:	4604      	mov	r4, r0
   d5d32:	b158      	cbz	r0, d5d4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5d34:	2302      	movs	r3, #2
   d5d36:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d38:	2301      	movs	r3, #1
   d5d3a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d3c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5d40:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5d44:	4629      	mov	r1, r5
   d5d46:	300c      	adds	r0, #12
   d5d48:	f7ff fe68 	bl	d5a1c <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5d4c:	4630      	mov	r0, r6
   d5d4e:	4621      	mov	r1, r4
   d5d50:	f840 4b04 	str.w	r4, [r0], #4
   d5d54:	f7ff ff08 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5d58:	4628      	mov	r0, r5
   d5d5a:	f7ff fe6e 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5d5e:	a805      	add	r0, sp, #20
   d5d60:	f7ff fe6b 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
   d5d64:	e052      	b.n	d5e0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5d66:	2400      	movs	r4, #0
   d5d68:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5d6a:	2014      	movs	r0, #20
   d5d6c:	606c      	str	r4, [r5, #4]
   d5d6e:	60ac      	str	r4, [r5, #8]
   d5d70:	9307      	str	r3, [sp, #28]
   d5d72:	f7fe f990 	bl	d4096 <_Znwj>
   d5d76:	4601      	mov	r1, r0
   d5d78:	b118      	cbz	r0, d5d82 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5d7a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5d7c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5d7e:	6044      	str	r4, [r0, #4]
   d5d80:	6084      	str	r4, [r0, #8]
   d5d82:	a804      	add	r0, sp, #16
   d5d84:	9103      	str	r1, [sp, #12]
   d5d86:	f7ff feef 	bl	d5b68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5d8a:	4b22      	ldr	r3, [pc, #136]	; (d5e14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5d8c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5d8e:	2008      	movs	r0, #8
   d5d90:	f7fe f981 	bl	d4096 <_Znwj>
   d5d94:	4604      	mov	r4, r0
   d5d96:	b128      	cbz	r0, d5da4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d98:	9b03      	ldr	r3, [sp, #12]
   d5d9a:	f840 3b04 	str.w	r3, [r0], #4
   d5d9e:	a904      	add	r1, sp, #16
   d5da0:	f7ff fcff 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5da4:	9500      	str	r5, [sp, #0]
   d5da6:	fa5f f38a 	uxtb.w	r3, sl
   d5daa:	464a      	mov	r2, r9
   d5dac:	4641      	mov	r1, r8
   d5dae:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5db0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5db2:	f7ff fc27 	bl	d5604 <spark_send_event>
   d5db6:	b920      	cbnz	r0, d5dc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5db8:	9b03      	ldr	r3, [sp, #12]
   d5dba:	785b      	ldrb	r3, [r3, #1]
   d5dbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5dc0:	b183      	cbz	r3, d5de4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5dc2:	9b03      	ldr	r3, [sp, #12]
   d5dc4:	9305      	str	r3, [sp, #20]
   d5dc6:	a904      	add	r1, sp, #16
   d5dc8:	a806      	add	r0, sp, #24
   d5dca:	f7ff fcea 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5dce:	a905      	add	r1, sp, #20
   d5dd0:	4630      	mov	r0, r6
   d5dd2:	f7ff fe89 	bl	d5ae8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dd6:	a806      	add	r0, sp, #24
   d5dd8:	f7fe fbc8 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ddc:	a804      	add	r0, sp, #16
   d5dde:	f7fe fbc5 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5de2:	e013      	b.n	d5e0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5de4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5de8:	a905      	add	r1, sp, #20
   d5dea:	a803      	add	r0, sp, #12
   d5dec:	9205      	str	r2, [sp, #20]
   d5dee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5df2:	f7ff fefd 	bl	d5bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5df6:	a805      	add	r0, sp, #20
   d5df8:	f7ff fe1f 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5dfc:	a805      	add	r0, sp, #20
   d5dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5e00:	f7ff fe83 	bl	d5b0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5e04:	a806      	add	r0, sp, #24
   d5e06:	f7fe fbb1 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e0a:	e7da      	b.n	d5dc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5e0c:	4630      	mov	r0, r6
   d5e0e:	b00b      	add	sp, #44	; 0x2c
   d5e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5e14:	000d5f89 	.word	0x000d5f89

000d5e18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e1e:	d006      	beq.n	d5e2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5e20:	2a03      	cmp	r2, #3
   d5e22:	d017      	beq.n	d5e54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5e24:	2a01      	cmp	r2, #1
   d5e26:	d122      	bne.n	d5e6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e2a:	6003      	str	r3, [r0, #0]
	      break;
   d5e2c:	e01f      	b.n	d5e6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e2e:	2018      	movs	r0, #24
   d5e30:	680e      	ldr	r6, [r1, #0]
   d5e32:	f7fe f930 	bl	d4096 <_Znwj>
   d5e36:	4605      	mov	r5, r0
   d5e38:	b150      	cbz	r0, d5e50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e3a:	4631      	mov	r1, r6
   d5e3c:	f7ff fec8 	bl	d5bd0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5e40:	6930      	ldr	r0, [r6, #16]
   d5e42:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5e46:	b108      	cbz	r0, d5e4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5e48:	f001 fcbc 	bl	d77c4 <strdup>
   d5e4c:	6128      	str	r0, [r5, #16]
   d5e4e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e50:	6025      	str	r5, [r4, #0]
   d5e52:	e00c      	b.n	d5e6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e54:	6804      	ldr	r4, [r0, #0]
   d5e56:	b154      	cbz	r4, d5e6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5e58:	f104 0010 	add.w	r0, r4, #16
   d5e5c:	f7ff fded 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e60:	4620      	mov	r0, r4
   d5e62:	f7ff fdd2 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e66:	2118      	movs	r1, #24
   d5e68:	4620      	mov	r0, r4
   d5e6a:	f000 ffd8 	bl	d6e1e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5e6e:	2000      	movs	r0, #0
   d5e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e72 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e72:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e74:	2300      	movs	r3, #0
   d5e76:	6083      	str	r3, [r0, #8]
   d5e78:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e7a:	4604      	mov	r4, r0
   d5e7c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e7e:	b12b      	cbz	r3, d5e8c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e80:	2202      	movs	r2, #2
   d5e82:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e84:	68eb      	ldr	r3, [r5, #12]
   d5e86:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e88:	68ab      	ldr	r3, [r5, #8]
   d5e8a:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e8c:	4620      	mov	r0, r4
   d5e8e:	bd38      	pop	{r3, r4, r5, pc}

000d5e90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e92:	b570      	push	{r4, r5, r6, lr}
   d5e94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e96:	d006      	beq.n	d5ea6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5e98:	2a03      	cmp	r2, #3
   d5e9a:	d011      	beq.n	d5ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5e9c:	2a01      	cmp	r2, #1
   d5e9e:	d118      	bne.n	d5ed2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5ea0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5ea2:	6003      	str	r3, [r0, #0]
	      break;
   d5ea4:	e015      	b.n	d5ed2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5ea6:	2014      	movs	r0, #20
   d5ea8:	680e      	ldr	r6, [r1, #0]
   d5eaa:	f7fe f8f4 	bl	d4096 <_Znwj>
   d5eae:	4605      	mov	r5, r0
   d5eb0:	b120      	cbz	r0, d5ebc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5eb2:	4631      	mov	r1, r6
   d5eb4:	f7ff ffdd 	bl	d5e72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5eb8:	7c33      	ldrb	r3, [r6, #16]
   d5eba:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5ebc:	6025      	str	r5, [r4, #0]
   d5ebe:	e008      	b.n	d5ed2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5ec0:	6804      	ldr	r4, [r0, #0]
   d5ec2:	b134      	cbz	r4, d5ed2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	f7ff fda0 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5eca:	2114      	movs	r1, #20
   d5ecc:	4620      	mov	r0, r4
   d5ece:	f000 ffa6 	bl	d6e1e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5ed2:	2000      	movs	r0, #0
   d5ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ed8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5ed8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5eda:	2300      	movs	r3, #0
   d5edc:	b087      	sub	sp, #28
   d5ede:	460c      	mov	r4, r1
   d5ee0:	f3bf 8f5f 	dmb	sy
   d5ee4:	e850 6f00 	ldrex	r6, [r0]
   d5ee8:	e840 3200 	strex	r2, r3, [r0]
   d5eec:	2a00      	cmp	r2, #0
   d5eee:	d1f9      	bne.n	d5ee4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5ef0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5ef4:	2e00      	cmp	r6, #0
   d5ef6:	d03f      	beq.n	d5f78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ef8:	4618      	mov	r0, r3
   d5efa:	f7ff fb15 	bl	d5528 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5efe:	4607      	mov	r7, r0
   d5f00:	b120      	cbz	r0, d5f0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f02:	4621      	mov	r1, r4
   d5f04:	4630      	mov	r0, r6
   d5f06:	f7ff fe53 	bl	d5bb0 <_ZNKSt8functionIFvRKbEEclES1_>
   d5f0a:	e02e      	b.n	d5f6a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f0c:	4631      	mov	r1, r6
   d5f0e:	a801      	add	r0, sp, #4
   d5f10:	f7ff ffaf 	bl	d5e72 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f14:	7823      	ldrb	r3, [r4, #0]
   d5f16:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f1a:	2010      	movs	r0, #16
   d5f1c:	f7fe f8bb 	bl	d4096 <_Znwj>
   d5f20:	4605      	mov	r5, r0
   d5f22:	b1d0      	cbz	r0, d5f5a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f24:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f26:	2014      	movs	r0, #20
   d5f28:	f7fe f8b5 	bl	d4096 <_Znwj>
   d5f2c:	4604      	mov	r4, r0
   d5f2e:	b178      	cbz	r0, d5f50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f30:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f32:	4601      	mov	r1, r0
   d5f34:	a801      	add	r0, sp, #4
   d5f36:	f7ff fe06 	bl	d5b46 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f3a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5f3c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f3e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f42:	9203      	str	r2, [sp, #12]
   d5f44:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f46:	60e3      	str	r3, [r4, #12]
   d5f48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f4c:	9204      	str	r2, [sp, #16]
   d5f4e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f50:	4b0a      	ldr	r3, [pc, #40]	; (d5f7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5f52:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f54:	4b0a      	ldr	r3, [pc, #40]	; (d5f80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f56:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f58:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f5a:	a801      	add	r0, sp, #4
   d5f5c:	f7ff fd55 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f60:	2200      	movs	r2, #0
   d5f62:	4629      	mov	r1, r5
   d5f64:	4807      	ldr	r0, [pc, #28]	; (d5f84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5f66:	f7ff fae7 	bl	d5538 <application_thread_invoke>
   d5f6a:	4630      	mov	r0, r6
   d5f6c:	f7ff fd4d 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5f70:	2110      	movs	r1, #16
   d5f72:	4630      	mov	r0, r6
   d5f74:	f000 ff53 	bl	d6e1e <_ZdlPvj>
        }
    }
   d5f78:	b007      	add	sp, #28
   d5f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f7c:	000d5bc3 	.word	0x000d5bc3
   d5f80:	000d5e91 	.word	0x000d5e91
   d5f84:	000d577b 	.word	0x000d577b

000d5f88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5f88:	b530      	push	{r4, r5, lr}
   d5f8a:	b085      	sub	sp, #20
   d5f8c:	4604      	mov	r4, r0
   d5f8e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5f90:	4668      	mov	r0, sp
   d5f92:	4611      	mov	r1, r2
   d5f94:	f7ff fdb9 	bl	d5b0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5f98:	b17c      	cbz	r4, d5fba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5f9a:	b224      	sxth	r4, r4
   d5f9c:	4628      	mov	r0, r5
   d5f9e:	b10d      	cbz	r5, d5fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5fa0:	f001 fc10 	bl	d77c4 <strdup>
   d5fa4:	9002      	str	r0, [sp, #8]
   d5fa6:	a902      	add	r1, sp, #8
   d5fa8:	4668      	mov	r0, sp
   d5faa:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5fae:	f7ff fe1f 	bl	d5bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5fb2:	a802      	add	r0, sp, #8
   d5fb4:	f7ff fd41 	bl	d5a3a <_ZN8particle5ErrorD1Ev>
   d5fb8:	e01d      	b.n	d5ff6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5fba:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5fbc:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5fc0:	f04f 0201 	mov.w	r2, #1
   d5fc4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5fc8:	42a3      	cmp	r3, r4
   d5fca:	d103      	bne.n	d5fd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5fcc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5fd0:	2900      	cmp	r1, #0
   d5fd2:	d1f7      	bne.n	d5fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5fd4:	d002      	beq.n	d5fdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5fd6:	f88d 3008 	strb.w	r3, [sp, #8]
   d5fda:	e00c      	b.n	d5ff6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5fdc:	f110 010c 	adds.w	r1, r0, #12
   d5fe0:	f04f 0301 	mov.w	r3, #1
   d5fe4:	bf18      	it	ne
   d5fe6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5fe8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5fec:	3004      	adds	r0, #4
   d5fee:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5ff2:	f7ff ff71 	bl	d5ed8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5ff6:	a801      	add	r0, sp, #4
   d5ff8:	f7fe fab8 	bl	d456c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5ffc:	b005      	add	sp, #20
   d5ffe:	bd30      	pop	{r4, r5, pc}

000d6000 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6000:	2200      	movs	r2, #0
   d6002:	4611      	mov	r1, r2
   d6004:	6840      	ldr	r0, [r0, #4]
   d6006:	f7ff bb5d 	b.w	d56c4 <network_listening>

000d600a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d600a:	2200      	movs	r2, #0
   d600c:	4611      	mov	r1, r2
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	f7ff bb68 	b.w	d56e4 <network_get_listen_timeout>

000d6014 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6014:	2200      	movs	r2, #0
   d6016:	6840      	ldr	r0, [r0, #4]
   d6018:	f7ff bb5c 	b.w	d56d4 <network_set_listen_timeout>

000d601c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d601c:	2200      	movs	r2, #0
   d601e:	f081 0101 	eor.w	r1, r1, #1
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	f7ff bb46 	b.w	d56b4 <network_listen>

000d6028 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6028:	2300      	movs	r3, #0
   d602a:	461a      	mov	r2, r3
   d602c:	4619      	mov	r1, r3
   d602e:	6840      	ldr	r0, [r0, #4]
   d6030:	f7ff bb38 	b.w	d56a4 <network_off>

000d6034 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6034:	2300      	movs	r3, #0
   d6036:	461a      	mov	r2, r3
   d6038:	4619      	mov	r1, r3
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7ff bb2a 	b.w	d5694 <network_on>

000d6040 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6040:	2200      	movs	r2, #0
   d6042:	4611      	mov	r1, r2
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	f7ff bb1d 	b.w	d5684 <network_ready>

000d604a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d604a:	2200      	movs	r2, #0
   d604c:	4611      	mov	r1, r2
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff bb08 	b.w	d5664 <network_connecting>

000d6054 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6054:	2200      	movs	r2, #0
   d6056:	2102      	movs	r1, #2
   d6058:	6840      	ldr	r0, [r0, #4]
   d605a:	f7ff bb0b 	b.w	d5674 <network_disconnect>

000d605e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d605e:	2300      	movs	r3, #0
   d6060:	461a      	mov	r2, r3
   d6062:	6840      	ldr	r0, [r0, #4]
   d6064:	f7ff baf6 	b.w	d5654 <network_connect>

000d6068 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6068:	4b02      	ldr	r3, [pc, #8]	; (d6074 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d606a:	2203      	movs	r2, #3
   d606c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d606e:	4a02      	ldr	r2, [pc, #8]	; (d6078 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6070:	601a      	str	r2, [r3, #0]
   d6072:	4770      	bx	lr
   d6074:	2003e374 	.word	0x2003e374
   d6078:	000d8608 	.word	0x000d8608

000d607c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d607c:	4770      	bx	lr

000d607e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d607e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6080:	4606      	mov	r6, r0
   d6082:	4615      	mov	r5, r2
   d6084:	460c      	mov	r4, r1
   d6086:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6088:	42bc      	cmp	r4, r7
   d608a:	d006      	beq.n	d609a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d608c:	6833      	ldr	r3, [r6, #0]
   d608e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6092:	689b      	ldr	r3, [r3, #8]
   d6094:	4630      	mov	r0, r6
   d6096:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6098:	e7f6      	b.n	d6088 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d609a:	4628      	mov	r0, r5
   d609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d609e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d609e:	2200      	movs	r2, #0
   d60a0:	7c00      	ldrb	r0, [r0, #16]
   d60a2:	f7ff b949 	b.w	d5338 <HAL_I2C_Write_Data>

000d60a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d60a6:	2100      	movs	r1, #0
   d60a8:	7c00      	ldrb	r0, [r0, #16]
   d60aa:	f7ff b94d 	b.w	d5348 <HAL_I2C_Available_Data>

000d60ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d60ae:	2100      	movs	r1, #0
   d60b0:	7c00      	ldrb	r0, [r0, #16]
   d60b2:	f7ff b951 	b.w	d5358 <HAL_I2C_Read_Data>

000d60b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d60b6:	2100      	movs	r1, #0
   d60b8:	7c00      	ldrb	r0, [r0, #16]
   d60ba:	f7ff b955 	b.w	d5368 <HAL_I2C_Peek_Data>

000d60be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d60be:	2100      	movs	r1, #0
   d60c0:	7c00      	ldrb	r0, [r0, #16]
   d60c2:	f7ff b959 	b.w	d5378 <HAL_I2C_Flush_Data>

000d60c6 <_ZN7TwoWireD0Ev>:
   d60c6:	b510      	push	{r4, lr}
   d60c8:	2114      	movs	r1, #20
   d60ca:	4604      	mov	r4, r0
   d60cc:	f000 fea7 	bl	d6e1e <_ZdlPvj>
   d60d0:	4620      	mov	r0, r4
   d60d2:	bd10      	pop	{r4, pc}

000d60d4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60d4:	b510      	push	{r4, lr}
   d60d6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d60d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60dc:	4608      	mov	r0, r1
   d60de:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d60e0:	2100      	movs	r1, #0
   d60e2:	4b04      	ldr	r3, [pc, #16]	; (d60f4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d60e4:	7420      	strb	r0, [r4, #16]
   d60e6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60e8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d60ea:	f7ff f955 	bl	d5398 <HAL_I2C_Init>

}
   d60ee:	4620      	mov	r0, r4
   d60f0:	bd10      	pop	{r4, pc}
   d60f2:	bf00      	nop
   d60f4:	000d863c 	.word	0x000d863c

000d60f8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d60f8:	2100      	movs	r1, #0
   d60fa:	7c00      	ldrb	r0, [r0, #16]
   d60fc:	f7ff b944 	b.w	d5388 <HAL_I2C_Is_Enabled>

000d6100 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6100:	4770      	bx	lr

000d6102 <_ZN9IPAddressD0Ev>:
   d6102:	b510      	push	{r4, lr}
   d6104:	2118      	movs	r1, #24
   d6106:	4604      	mov	r4, r0
   d6108:	f000 fe89 	bl	d6e1e <_ZdlPvj>
   d610c:	4620      	mov	r0, r4
   d610e:	bd10      	pop	{r4, pc}

000d6110 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6110:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6112:	7d03      	ldrb	r3, [r0, #20]
   d6114:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6116:	b08d      	sub	sp, #52	; 0x34
   d6118:	460e      	mov	r6, r1
   d611a:	f100 0704 	add.w	r7, r0, #4
   d611e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6122:	d002      	beq.n	d612a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6124:	f100 0508 	add.w	r5, r0, #8
   d6128:	e018      	b.n	d615c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d612a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d612c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d612e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6132:	232f      	movs	r3, #47	; 0x2f
   d6134:	462a      	mov	r2, r5
   d6136:	200a      	movs	r0, #10
   d6138:	f7ff f936 	bl	d53a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d613c:	4628      	mov	r0, r5
   d613e:	f001 fb5c 	bl	d77fa <strlen>
   d6142:	6833      	ldr	r3, [r6, #0]
   d6144:	4602      	mov	r2, r0
   d6146:	68db      	ldr	r3, [r3, #12]
   d6148:	4629      	mov	r1, r5
   d614a:	4630      	mov	r0, r6
   d614c:	4798      	blx	r3
   d614e:	e00f      	b.n	d6170 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6150:	b124      	cbz	r4, d615c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6152:	212e      	movs	r1, #46	; 0x2e
   d6154:	4630      	mov	r0, r6
   d6156:	f000 f9c9 	bl	d64ec <_ZN5Print5printEc>
   d615a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d615c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6160:	220a      	movs	r2, #10
   d6162:	4630      	mov	r0, r6
   d6164:	f000 fa08 	bl	d6578 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6168:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d616a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d616c:	d1f0      	bne.n	d6150 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d616e:	4620      	mov	r0, r4
    }
    return n;
}
   d6170:	b00d      	add	sp, #52	; 0x34
   d6172:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6174 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6174:	b510      	push	{r4, lr}
   d6176:	4b05      	ldr	r3, [pc, #20]	; (d618c <_ZN9IPAddressC1Ev+0x18>)
   d6178:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d617a:	2211      	movs	r2, #17
   d617c:	f840 3b04 	str.w	r3, [r0], #4
   d6180:	2100      	movs	r1, #0
   d6182:	f001 faa2 	bl	d76ca <memset>
{
    clear();
}
   d6186:	4620      	mov	r0, r4
   d6188:	bd10      	pop	{r4, pc}
   d618a:	bf00      	nop
   d618c:	000d8664 	.word	0x000d8664

000d6190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6190:	4603      	mov	r3, r0
   d6192:	4a07      	ldr	r2, [pc, #28]	; (d61b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6194:	b510      	push	{r4, lr}
   d6196:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d619a:	f101 0210 	add.w	r2, r1, #16
   d619e:	f851 4b04 	ldr.w	r4, [r1], #4
   d61a2:	f843 4b04 	str.w	r4, [r3], #4
   d61a6:	4291      	cmp	r1, r2
   d61a8:	d1f9      	bne.n	d619e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d61aa:	780a      	ldrb	r2, [r1, #0]
   d61ac:	701a      	strb	r2, [r3, #0]
}
   d61ae:	bd10      	pop	{r4, pc}
   d61b0:	000d8664 	.word	0x000d8664

000d61b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d61b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d61b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d61ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d61be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d61c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d61c6:	2304      	movs	r3, #4
   d61c8:	6041      	str	r1, [r0, #4]
   d61ca:	7503      	strb	r3, [r0, #20]
   d61cc:	bd10      	pop	{r4, pc}

000d61ce <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d61ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d61d0:	780d      	ldrb	r5, [r1, #0]
   d61d2:	788b      	ldrb	r3, [r1, #2]
   d61d4:	784a      	ldrb	r2, [r1, #1]
   d61d6:	78c9      	ldrb	r1, [r1, #3]
   d61d8:	9100      	str	r1, [sp, #0]
   d61da:	4629      	mov	r1, r5
   d61dc:	f7ff ffea 	bl	d61b4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d61e0:	b003      	add	sp, #12
   d61e2:	bd30      	pop	{r4, r5, pc}

000d61e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d61e4:	4b01      	ldr	r3, [pc, #4]	; (d61ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d61e6:	4a02      	ldr	r2, [pc, #8]	; (d61f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d61e8:	601a      	str	r2, [r3, #0]
   d61ea:	4770      	bx	lr
   d61ec:	2003e37c 	.word	0x2003e37c
   d61f0:	000d8722 	.word	0x000d8722

000d61f4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61f4:	2200      	movs	r2, #0
   d61f6:	4611      	mov	r1, r2
   d61f8:	6840      	ldr	r0, [r0, #4]
   d61fa:	f7ff ba63 	b.w	d56c4 <network_listening>

000d61fe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d61fe:	2200      	movs	r2, #0
   d6200:	4611      	mov	r1, r2
   d6202:	6840      	ldr	r0, [r0, #4]
   d6204:	f7ff ba6e 	b.w	d56e4 <network_get_listen_timeout>

000d6208 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6208:	2200      	movs	r2, #0
   d620a:	6840      	ldr	r0, [r0, #4]
   d620c:	f7ff ba62 	b.w	d56d4 <network_set_listen_timeout>

000d6210 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6210:	2200      	movs	r2, #0
   d6212:	f081 0101 	eor.w	r1, r1, #1
   d6216:	6840      	ldr	r0, [r0, #4]
   d6218:	f7ff ba4c 	b.w	d56b4 <network_listen>

000d621c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d621c:	2300      	movs	r3, #0
   d621e:	461a      	mov	r2, r3
   d6220:	2101      	movs	r1, #1
   d6222:	6840      	ldr	r0, [r0, #4]
   d6224:	f7ff ba3e 	b.w	d56a4 <network_off>

000d6228 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6228:	2300      	movs	r3, #0
   d622a:	461a      	mov	r2, r3
   d622c:	4619      	mov	r1, r3
   d622e:	6840      	ldr	r0, [r0, #4]
   d6230:	f7ff ba30 	b.w	d5694 <network_on>

000d6234 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6234:	2200      	movs	r2, #0
   d6236:	4611      	mov	r1, r2
   d6238:	6840      	ldr	r0, [r0, #4]
   d623a:	f7ff ba23 	b.w	d5684 <network_ready>

000d623e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d623e:	2200      	movs	r2, #0
   d6240:	4611      	mov	r1, r2
   d6242:	6840      	ldr	r0, [r0, #4]
   d6244:	f7ff ba0e 	b.w	d5664 <network_connecting>

000d6248 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6248:	2200      	movs	r2, #0
   d624a:	2102      	movs	r1, #2
   d624c:	6840      	ldr	r0, [r0, #4]
   d624e:	f7ff ba11 	b.w	d5674 <network_disconnect>

000d6252 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6252:	2300      	movs	r3, #0
   d6254:	461a      	mov	r2, r3
   d6256:	6840      	ldr	r0, [r0, #4]
   d6258:	f7ff b9fc 	b.w	d5654 <network_connect>

000d625c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d625c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d625e:	4605      	mov	r5, r0
   d6260:	b188      	cbz	r0, d6286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6262:	6804      	ldr	r4, [r0, #0]
   d6264:	b14c      	cbz	r4, d627a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6266:	68a3      	ldr	r3, [r4, #8]
   d6268:	b11b      	cbz	r3, d6272 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d626a:	2203      	movs	r2, #3
   d626c:	4621      	mov	r1, r4
   d626e:	4620      	mov	r0, r4
   d6270:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6272:	2110      	movs	r1, #16
   d6274:	4620      	mov	r0, r4
   d6276:	f000 fdd2 	bl	d6e1e <_ZdlPvj>
   d627a:	4628      	mov	r0, r5
   d627c:	2114      	movs	r1, #20
      }
   d627e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6282:	f000 bdcc 	b.w	d6e1e <_ZdlPvj>
   d6286:	bd38      	pop	{r3, r4, r5, pc}

000d6288 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6288:	b110      	cbz	r0, d6290 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d628a:	6803      	ldr	r3, [r0, #0]
   d628c:	685b      	ldr	r3, [r3, #4]
   d628e:	4718      	bx	r3
   d6290:	4770      	bx	lr

000d6292 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6292:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6294:	6803      	ldr	r3, [r0, #0]
   d6296:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6298:	b1bb      	cbz	r3, d62ca <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d629a:	6858      	ldr	r0, [r3, #4]
   d629c:	f7fe ff9c 	bl	d51d8 <os_thread_is_current>
   d62a0:	b978      	cbnz	r0, d62c2 <_ZN6ThreadD1Ev+0x30>
   d62a2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d62a4:	7c5a      	ldrb	r2, [r3, #17]
   d62a6:	b912      	cbnz	r2, d62ae <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d62a8:	6858      	ldr	r0, [r3, #4]
   d62aa:	f7fe ff9d 	bl	d51e8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62ae:	6823      	ldr	r3, [r4, #0]
   d62b0:	6858      	ldr	r0, [r3, #4]
   d62b2:	f7fe ffa1 	bl	d51f8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62b6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62b8:	2300      	movs	r3, #0
   d62ba:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62bc:	b128      	cbz	r0, d62ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62be:	f7ff ffcd 	bl	d625c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62c2:	6820      	ldr	r0, [r4, #0]
   d62c4:	b108      	cbz	r0, d62ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d62c6:	f7ff ffc9 	bl	d625c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d62ca:	4620      	mov	r0, r4
   d62cc:	bd10      	pop	{r4, pc}
	...

000d62d0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62d0:	b538      	push	{r3, r4, r5, lr}
   d62d2:	4b0c      	ldr	r3, [pc, #48]	; (d6304 <_ZN5spark9MeshClassD1Ev+0x34>)
   d62d4:	6003      	str	r3, [r0, #0]
   d62d6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62d8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d62dc:	b108      	cbz	r0, d62e2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d62de:	f7fd fede 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62e2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d62e6:	b135      	cbz	r5, d62f6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62e8:	4628      	mov	r0, r5
   d62ea:	f7ff ffd2 	bl	d6292 <_ZN6ThreadD1Ev>
   d62ee:	2104      	movs	r1, #4
   d62f0:	4628      	mov	r0, r5
   d62f2:	f000 fd94 	bl	d6e1e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62f6:	68a0      	ldr	r0, [r4, #8]
   d62f8:	b108      	cbz	r0, d62fe <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d62fa:	f7ff ffc5 	bl	d6288 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d62fe:	4620      	mov	r0, r4
   d6300:	bd38      	pop	{r3, r4, r5, pc}
   d6302:	bf00      	nop
   d6304:	000d8754 	.word	0x000d8754

000d6308 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6308:	b538      	push	{r3, r4, r5, lr}
   d630a:	4c0e      	ldr	r4, [pc, #56]	; (d6344 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d630c:	4b0e      	ldr	r3, [pc, #56]	; (d6348 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d630e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6310:	2500      	movs	r5, #0
   d6312:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6314:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6318:	6063      	str	r3, [r4, #4]
   d631a:	60a5      	str	r5, [r4, #8]
   d631c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6320:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6324:	f7fe ff78 	bl	d5218 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6328:	4b08      	ldr	r3, [pc, #32]	; (d634c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d632a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d632e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6332:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6334:	4620      	mov	r0, r4
   d6336:	4a06      	ldr	r2, [pc, #24]	; (d6350 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6338:	4906      	ldr	r1, [pc, #24]	; (d6354 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d633a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d633e:	f000 bd69 	b.w	d6e14 <__aeabi_atexit>
   d6342:	bf00      	nop
   d6344:	2003e380 	.word	0x2003e380
   d6348:	000d8788 	.word	0x000d8788
   d634c:	000d8754 	.word	0x000d8754
   d6350:	2003e1ac 	.word	0x2003e1ac
   d6354:	000d62d1 	.word	0x000d62d1

000d6358 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6358:	2300      	movs	r3, #0
   d635a:	461a      	mov	r2, r3
   d635c:	6840      	ldr	r0, [r0, #4]
   d635e:	f7ff b979 	b.w	d5654 <network_connect>

000d6362 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6362:	2200      	movs	r2, #0
   d6364:	2102      	movs	r1, #2
   d6366:	6840      	ldr	r0, [r0, #4]
   d6368:	f7ff b984 	b.w	d5674 <network_disconnect>

000d636c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d636c:	2200      	movs	r2, #0
   d636e:	4611      	mov	r1, r2
   d6370:	6840      	ldr	r0, [r0, #4]
   d6372:	f7ff b977 	b.w	d5664 <network_connecting>

000d6376 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6376:	2200      	movs	r2, #0
   d6378:	4611      	mov	r1, r2
   d637a:	6840      	ldr	r0, [r0, #4]
   d637c:	f7ff b982 	b.w	d5684 <network_ready>

000d6380 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6380:	2300      	movs	r3, #0
   d6382:	461a      	mov	r2, r3
   d6384:	4619      	mov	r1, r3
   d6386:	6840      	ldr	r0, [r0, #4]
   d6388:	f7ff b984 	b.w	d5694 <network_on>

000d638c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d638c:	2300      	movs	r3, #0
   d638e:	461a      	mov	r2, r3
   d6390:	4619      	mov	r1, r3
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	f7ff b986 	b.w	d56a4 <network_off>

000d6398 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6398:	2200      	movs	r2, #0
   d639a:	f081 0101 	eor.w	r1, r1, #1
   d639e:	6840      	ldr	r0, [r0, #4]
   d63a0:	f7ff b988 	b.w	d56b4 <network_listen>

000d63a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63a4:	2200      	movs	r2, #0
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7ff b994 	b.w	d56d4 <network_set_listen_timeout>

000d63ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63ac:	2200      	movs	r2, #0
   d63ae:	4611      	mov	r1, r2
   d63b0:	6840      	ldr	r0, [r0, #4]
   d63b2:	f7ff b997 	b.w	d56e4 <network_get_listen_timeout>

000d63b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63b6:	2200      	movs	r2, #0
   d63b8:	4611      	mov	r1, r2
   d63ba:	6840      	ldr	r0, [r0, #4]
   d63bc:	f7ff b982 	b.w	d56c4 <network_listening>

000d63c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63c4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63c6:	b095      	sub	sp, #84	; 0x54
   d63c8:	4616      	mov	r6, r2
   d63ca:	460d      	mov	r5, r1
   d63cc:	4607      	mov	r7, r0
    IPAddress addr;
   d63ce:	f7ff fed1 	bl	d6174 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d63d2:	4621      	mov	r1, r4
   d63d4:	2220      	movs	r2, #32
   d63d6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63d8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d63da:	f001 f976 	bl	d76ca <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d63de:	2340      	movs	r3, #64	; 0x40
   d63e0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d63e2:	4621      	mov	r1, r4
   d63e4:	466b      	mov	r3, sp
   d63e6:	aa0c      	add	r2, sp, #48	; 0x30
   d63e8:	4630      	mov	r0, r6
   d63ea:	f7fe ffed 	bl	d53c8 <netdb_getaddrinfo>
    if (!r) {
   d63ee:	4604      	mov	r4, r0
   d63f0:	2800      	cmp	r0, #0
   d63f2:	d144      	bne.n	d647e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63f4:	4602      	mov	r2, r0
   d63f6:	2101      	movs	r1, #1
   d63f8:	6868      	ldr	r0, [r5, #4]
   d63fa:	f7ff f943 	bl	d5684 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63fe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6400:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6402:	4622      	mov	r2, r4
   d6404:	6868      	ldr	r0, [r5, #4]
   d6406:	f7ff f93d 	bl	d5684 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d640a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d640c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d640e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6410:	2e00      	cmp	r6, #0
   d6412:	d034      	beq.n	d647e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6414:	2900      	cmp	r1, #0
   d6416:	d132      	bne.n	d647e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6418:	6873      	ldr	r3, [r6, #4]
   d641a:	2b02      	cmp	r3, #2
   d641c:	d002      	beq.n	d6424 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d641e:	2b0a      	cmp	r3, #10
   d6420:	d009      	beq.n	d6436 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6422:	e02a      	b.n	d647a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6424:	f1b8 0f00 	cmp.w	r8, #0
   d6428:	d027      	beq.n	d647a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d642a:	6971      	ldr	r1, [r6, #20]
   d642c:	4638      	mov	r0, r7
   d642e:	3104      	adds	r1, #4
   d6430:	f7ff fecd 	bl	d61ce <_ZN9IPAddressaSEPKh>
   d6434:	e020      	b.n	d6478 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6436:	f1b9 0f00 	cmp.w	r9, #0
   d643a:	d01e      	beq.n	d647a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d643c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d643e:	2211      	movs	r2, #17
   d6440:	a801      	add	r0, sp, #4
   d6442:	f001 f942 	bl	d76ca <memset>
                    a.v = 6;
   d6446:	2306      	movs	r3, #6
   d6448:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d644c:	ad01      	add	r5, sp, #4
   d644e:	f104 0308 	add.w	r3, r4, #8
   d6452:	3418      	adds	r4, #24
   d6454:	6818      	ldr	r0, [r3, #0]
   d6456:	6859      	ldr	r1, [r3, #4]
   d6458:	462a      	mov	r2, r5
   d645a:	c203      	stmia	r2!, {r0, r1}
   d645c:	3308      	adds	r3, #8
   d645e:	42a3      	cmp	r3, r4
   d6460:	4615      	mov	r5, r2
   d6462:	d1f7      	bne.n	d6454 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6464:	a901      	add	r1, sp, #4
   d6466:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6468:	ad07      	add	r5, sp, #28
   d646a:	f7ff fe91 	bl	d6190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d646e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6470:	1d3c      	adds	r4, r7, #4
   d6472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6474:	682b      	ldr	r3, [r5, #0]
   d6476:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6478:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d647a:	69f6      	ldr	r6, [r6, #28]
   d647c:	e7c8      	b.n	d6410 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d647e:	9800      	ldr	r0, [sp, #0]
   d6480:	f7fe ff9a 	bl	d53b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6484:	4638      	mov	r0, r7
   d6486:	b015      	add	sp, #84	; 0x54
   d6488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d648c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d648c:	4b02      	ldr	r3, [pc, #8]	; (d6498 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d648e:	4a03      	ldr	r2, [pc, #12]	; (d649c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6490:	601a      	str	r2, [r3, #0]
   d6492:	2200      	movs	r2, #0
   d6494:	605a      	str	r2, [r3, #4]
   d6496:	4770      	bx	lr
   d6498:	2003e554 	.word	0x2003e554
   d649c:	000d8788 	.word	0x000d8788

000d64a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d64a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64a2:	4606      	mov	r6, r0
   d64a4:	460d      	mov	r5, r1
   d64a6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d64a8:	2400      	movs	r4, #0
  while (size--) {
   d64aa:	42bd      	cmp	r5, r7
   d64ac:	d00c      	beq.n	d64c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d64ae:	6833      	ldr	r3, [r6, #0]
   d64b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64b4:	689b      	ldr	r3, [r3, #8]
   d64b6:	4630      	mov	r0, r6
   d64b8:	4798      	blx	r3
     if (chunk>=0)
   d64ba:	2800      	cmp	r0, #0
   d64bc:	db01      	blt.n	d64c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d64be:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d64c0:	e7f3      	b.n	d64aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d64c2:	2c00      	cmp	r4, #0
   d64c4:	bf08      	it	eq
   d64c6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d64c8:	4620      	mov	r0, r4
   d64ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64cc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d64cc:	b570      	push	{r4, r5, r6, lr}
   d64ce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d64d0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d64d2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d64d4:	b149      	cbz	r1, d64ea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d64d6:	f001 f990 	bl	d77fa <strlen>
   d64da:	682b      	ldr	r3, [r5, #0]
   d64dc:	4602      	mov	r2, r0
   d64de:	4621      	mov	r1, r4
   d64e0:	4628      	mov	r0, r5
   d64e2:	68db      	ldr	r3, [r3, #12]
    }
   d64e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d64e8:	4718      	bx	r3
    }
   d64ea:	bd70      	pop	{r4, r5, r6, pc}

000d64ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d64ec:	6803      	ldr	r3, [r0, #0]
   d64ee:	689b      	ldr	r3, [r3, #8]
   d64f0:	4718      	bx	r3

000d64f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64f8:	f7ff fff8 	bl	d64ec <_ZN5Print5printEc>
  n += print('\n');
   d64fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d64fe:	4604      	mov	r4, r0
  n += print('\n');
   d6500:	4628      	mov	r0, r5
   d6502:	f7ff fff3 	bl	d64ec <_ZN5Print5printEc>
  return n;
}
   d6506:	4420      	add	r0, r4
   d6508:	bd38      	pop	{r3, r4, r5, pc}

000d650a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d650a:	b538      	push	{r3, r4, r5, lr}
   d650c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d650e:	f7ff ffdd 	bl	d64cc <_ZN5Print5writeEPKc>
   d6512:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6514:	4628      	mov	r0, r5
   d6516:	f7ff ffec 	bl	d64f2 <_ZN5Print7printlnEv>
  return n;
}
   d651a:	4420      	add	r0, r4
   d651c:	bd38      	pop	{r3, r4, r5, pc}

000d651e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d651e:	b530      	push	{r4, r5, lr}
   d6520:	b08b      	sub	sp, #44	; 0x2c
   d6522:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6524:	2100      	movs	r1, #0
   d6526:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d652a:	2a01      	cmp	r2, #1
   d652c:	bf98      	it	ls
   d652e:	220a      	movls	r2, #10
   d6530:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6534:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6538:	fb05 3312 	mls	r3, r5, r2, r3
   d653c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6540:	2b09      	cmp	r3, #9
   d6542:	bf94      	ite	ls
   d6544:	3330      	addls	r3, #48	; 0x30
   d6546:	3337      	addhi	r3, #55	; 0x37
   d6548:	b2db      	uxtb	r3, r3
   d654a:	4621      	mov	r1, r4
   d654c:	f804 3901 	strb.w	r3, [r4], #-1
   d6550:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6552:	2d00      	cmp	r5, #0
   d6554:	d1ee      	bne.n	d6534 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6556:	f7ff ffb9 	bl	d64cc <_ZN5Print5writeEPKc>
}
   d655a:	b00b      	add	sp, #44	; 0x2c
   d655c:	bd30      	pop	{r4, r5, pc}

000d655e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d655e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6560:	b92a      	cbnz	r2, d656e <_ZN5Print5printEmi+0x10>
   d6562:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6564:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6568:	689b      	ldr	r3, [r3, #8]
   d656a:	b2c9      	uxtb	r1, r1
   d656c:	4718      	bx	r3
  else return printNumber(n, base);
   d656e:	b2d2      	uxtb	r2, r2
}
   d6570:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6574:	f7ff bfd3 	b.w	d651e <_ZN5Print11printNumberEmh>

000d6578 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6578:	f7ff bff1 	b.w	d655e <_ZN5Print5printEmi>

000d657c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6580:	4607      	mov	r7, r0
   d6582:	460e      	mov	r6, r1
  if (base == 0) {
   d6584:	4615      	mov	r5, r2
   d6586:	b92a      	cbnz	r2, d6594 <_ZN5Print5printEli+0x18>
    return write(n);
   d6588:	6803      	ldr	r3, [r0, #0]
   d658a:	b2c9      	uxtb	r1, r1
   d658c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d658e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6592:	4718      	bx	r3
  } else if (base == 10) {
   d6594:	2a0a      	cmp	r2, #10
   d6596:	d102      	bne.n	d659e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6598:	2900      	cmp	r1, #0
   d659a:	da01      	bge.n	d65a0 <_ZN5Print5printEli+0x24>
   d659c:	e004      	b.n	d65a8 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d659e:	b2d2      	uxtb	r2, r2
  }
}
   d65a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d65a4:	f7ff bfbb 	b.w	d651e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d65a8:	212d      	movs	r1, #45	; 0x2d
   d65aa:	f7ff ff9f 	bl	d64ec <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d65ae:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d65b0:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d65b2:	4271      	negs	r1, r6
   d65b4:	4638      	mov	r0, r7
   d65b6:	f7ff ffb2 	bl	d651e <_ZN5Print11printNumberEmh>
   d65ba:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d65bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65c0 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d65c0:	f7ff bfdc 	b.w	d657c <_ZN5Print5printEli>

000d65c4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d65c4:	b510      	push	{r4, lr}
  if (0 == max) {
   d65c6:	4604      	mov	r4, r0
   d65c8:	b130      	cbz	r0, d65d8 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d65ca:	f001 f8af 	bl	d772c <rand>
   d65ce:	fb90 f3f4 	sdiv	r3, r0, r4
   d65d2:	fb03 0014 	mls	r0, r3, r4, r0
   d65d6:	bd10      	pop	{r4, pc}
}
   d65d8:	bd10      	pop	{r4, pc}

000d65da <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d65da:	b510      	push	{r4, lr}
   d65dc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65de:	f7ff fa14 	bl	d5a0a <_ZNSt14_Function_baseD1Ev>
   d65e2:	4620      	mov	r0, r4
   d65e4:	bd10      	pop	{r4, pc}
	...

000d65e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65e8:	4803      	ldr	r0, [pc, #12]	; (d65f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d65ea:	4a04      	ldr	r2, [pc, #16]	; (d65fc <_GLOBAL__sub_I_RGB+0x14>)
   d65ec:	4904      	ldr	r1, [pc, #16]	; (d6600 <_GLOBAL__sub_I_RGB+0x18>)
   d65ee:	2300      	movs	r3, #0
   d65f0:	6083      	str	r3, [r0, #8]
   d65f2:	f000 bc0f 	b.w	d6e14 <__aeabi_atexit>
   d65f6:	bf00      	nop
   d65f8:	2003e55c 	.word	0x2003e55c
   d65fc:	2003e1ac 	.word	0x2003e1ac
   d6600:	000d65db 	.word	0x000d65db

000d6604 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6604:	4770      	bx	lr

000d6606 <_ZN8SPIClassD0Ev>:
   d6606:	b510      	push	{r4, lr}
   d6608:	2110      	movs	r1, #16
   d660a:	4604      	mov	r4, r0
   d660c:	f000 fc07 	bl	d6e1e <_ZdlPvj>
   d6610:	4620      	mov	r0, r4
   d6612:	bd10      	pop	{r4, pc}

000d6614 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6614:	b570      	push	{r4, r5, r6, lr}
   d6616:	4b08      	ldr	r3, [pc, #32]	; (d6638 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6618:	6003      	str	r3, [r0, #0]
   d661a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d661c:	2500      	movs	r5, #0
   d661e:	460e      	mov	r6, r1
   d6620:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6624:	f7fe fdf0 	bl	d5208 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6628:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d662a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d662c:	f7fe fed4 	bl	d53d8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6630:	60a5      	str	r5, [r4, #8]
}
   d6632:	4620      	mov	r0, r4
   d6634:	bd70      	pop	{r4, r5, r6, pc}
   d6636:	bf00      	nop
   d6638:	000d87bc 	.word	0x000d87bc

000d663c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d663c:	7900      	ldrb	r0, [r0, #4]
   d663e:	f7fe bed3 	b.w	d53e8 <HAL_SPI_Is_Enabled>

000d6642 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6642:	b510      	push	{r4, lr}
   d6644:	4604      	mov	r4, r0
{
	free(buffer);
   d6646:	6800      	ldr	r0, [r0, #0]
   d6648:	f7ff f85c 	bl	d5704 <free>
}
   d664c:	4620      	mov	r0, r4
   d664e:	bd10      	pop	{r4, pc}

000d6650 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6650:	b510      	push	{r4, lr}
   d6652:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6654:	6800      	ldr	r0, [r0, #0]
   d6656:	b108      	cbz	r0, d665c <_ZN6String10invalidateEv+0xc>
   d6658:	f7ff f854 	bl	d5704 <free>
	buffer = NULL;
   d665c:	2300      	movs	r3, #0
   d665e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6660:	60a3      	str	r3, [r4, #8]
   d6662:	6063      	str	r3, [r4, #4]
   d6664:	bd10      	pop	{r4, pc}

000d6666 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6666:	b538      	push	{r3, r4, r5, lr}
   d6668:	4604      	mov	r4, r0
   d666a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d666c:	6800      	ldr	r0, [r0, #0]
   d666e:	3101      	adds	r1, #1
   d6670:	f7ff f850 	bl	d5714 <realloc>
	if (newbuffer) {
   d6674:	b110      	cbz	r0, d667c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6676:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d667a:	2001      	movs	r0, #1
	}
	return 0;
}
   d667c:	bd38      	pop	{r3, r4, r5, pc}

000d667e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d667e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6680:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6682:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6684:	b113      	cbz	r3, d668c <_ZN6String7reserveEj+0xe>
   d6686:	6843      	ldr	r3, [r0, #4]
   d6688:	428b      	cmp	r3, r1
   d668a:	d207      	bcs.n	d669c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d668c:	4620      	mov	r0, r4
   d668e:	f7ff ffea 	bl	d6666 <_ZN6String12changeBufferEj>
   d6692:	b120      	cbz	r0, d669e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6694:	68a3      	ldr	r3, [r4, #8]
   d6696:	b90b      	cbnz	r3, d669c <_ZN6String7reserveEj+0x1e>
   d6698:	6822      	ldr	r2, [r4, #0]
   d669a:	7013      	strb	r3, [r2, #0]
   d669c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d669e:	bd10      	pop	{r4, pc}

000d66a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d66a0:	b570      	push	{r4, r5, r6, lr}
   d66a2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d66a4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d66a6:	4604      	mov	r4, r0
   d66a8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d66aa:	f7ff ffe8 	bl	d667e <_ZN6String7reserveEj>
   d66ae:	b918      	cbnz	r0, d66b8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d66b0:	4620      	mov	r0, r4
   d66b2:	f7ff ffcd 	bl	d6650 <_ZN6String10invalidateEv>
		return *this;
   d66b6:	e009      	b.n	d66cc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d66b8:	462a      	mov	r2, r5
   d66ba:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d66bc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d66be:	6820      	ldr	r0, [r4, #0]
   d66c0:	f000 fff8 	bl	d76b4 <memcpy>
	buffer[len] = 0;
   d66c4:	6822      	ldr	r2, [r4, #0]
   d66c6:	68a3      	ldr	r3, [r4, #8]
   d66c8:	2100      	movs	r1, #0
   d66ca:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d66cc:	4620      	mov	r0, r4
   d66ce:	bd70      	pop	{r4, r5, r6, pc}

000d66d0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d66d0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66d2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d66d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66d8:	6043      	str	r3, [r0, #4]
	len = 0;
   d66da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66dc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d66de:	460d      	mov	r5, r1
   d66e0:	b139      	cbz	r1, d66f2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d66e2:	4608      	mov	r0, r1
   d66e4:	f001 f889 	bl	d77fa <strlen>
   d66e8:	4629      	mov	r1, r5
   d66ea:	4602      	mov	r2, r0
   d66ec:	4620      	mov	r0, r4
   d66ee:	f7ff ffd7 	bl	d66a0 <_ZN6String4copyEPKcj>
}
   d66f2:	4620      	mov	r0, r4
   d66f4:	bd38      	pop	{r3, r4, r5, pc}

000d66f6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d66f6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d66f8:	b510      	push	{r4, lr}
   d66fa:	460b      	mov	r3, r1
   d66fc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d66fe:	d007      	beq.n	d6710 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6700:	6809      	ldr	r1, [r1, #0]
   d6702:	b119      	cbz	r1, d670c <_ZN6StringaSERKS_+0x16>
   d6704:	689a      	ldr	r2, [r3, #8]
   d6706:	f7ff ffcb 	bl	d66a0 <_ZN6String4copyEPKcj>
   d670a:	e001      	b.n	d6710 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d670c:	f7ff ffa0 	bl	d6650 <_ZN6String10invalidateEv>

	return *this;
}
   d6710:	4620      	mov	r0, r4
   d6712:	bd10      	pop	{r4, pc}

000d6714 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6714:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6716:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6718:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d671a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d671c:	6043      	str	r3, [r0, #4]
	len = 0;
   d671e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6720:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6722:	f7ff ffe8 	bl	d66f6 <_ZN6StringaSERKS_>
}
   d6726:	4620      	mov	r0, r4
   d6728:	bd10      	pop	{r4, pc}

000d672a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d672a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d672c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d672e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6730:	b912      	cbnz	r2, d6738 <_ZNK6String6equalsEPKc+0xe>
   d6732:	b919      	cbnz	r1, d673c <_ZNK6String6equalsEPKc+0x12>
   d6734:	2001      	movs	r0, #1
   d6736:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6738:	b911      	cbnz	r1, d6740 <_ZNK6String6equalsEPKc+0x16>
   d673a:	6803      	ldr	r3, [r0, #0]
   d673c:	7818      	ldrb	r0, [r3, #0]
   d673e:	e002      	b.n	d6746 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6740:	6800      	ldr	r0, [r0, #0]
   d6742:	f001 f82d 	bl	d77a0 <strcmp>
   d6746:	fab0 f080 	clz	r0, r0
   d674a:	0940      	lsrs	r0, r0, #5
}
   d674c:	bd08      	pop	{r3, pc}

000d674e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d674e:	b570      	push	{r4, r5, r6, lr}
   d6750:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6752:	b19a      	cbz	r2, d677c <_ZNK6String8getBytesEPhjj+0x2e>
   d6754:	b191      	cbz	r1, d677c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6756:	6885      	ldr	r5, [r0, #8]
   d6758:	429d      	cmp	r5, r3
   d675a:	d802      	bhi.n	d6762 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d675c:	2300      	movs	r3, #0
   d675e:	700b      	strb	r3, [r1, #0]
		return;
   d6760:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6762:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6764:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6766:	6801      	ldr	r1, [r0, #0]
   d6768:	42ac      	cmp	r4, r5
   d676a:	bf28      	it	cs
   d676c:	462c      	movcs	r4, r5
   d676e:	4419      	add	r1, r3
   d6770:	4622      	mov	r2, r4
   d6772:	4630      	mov	r0, r6
   d6774:	f001 f85e 	bl	d7834 <strncpy>
	buf[n] = 0;
   d6778:	2300      	movs	r3, #0
   d677a:	5533      	strb	r3, [r6, r4]
   d677c:	bd70      	pop	{r4, r5, r6, pc}

000d677e <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
   d677e:	4601      	mov	r1, r0
   d6780:	2200      	movs	r2, #0
   d6782:	208c      	movs	r0, #140	; 0x8c
   d6784:	f7fe bd58 	b.w	d5238 <HAL_Core_System_Reset_Ex>

000d6788 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
   d6788:	2000      	movs	r0, #0
   d678a:	f7ff bff8 	b.w	d677e <_ZN11SystemClass5resetEm>
	...

000d6790 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d6790:	b510      	push	{r4, lr}
   d6792:	4604      	mov	r4, r0
   d6794:	4608      	mov	r0, r1
   d6796:	4611      	mov	r1, r2
   d6798:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d679a:	2300      	movs	r3, #0
   d679c:	f7fe feb4 	bl	d5508 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d67a0:	4b06      	ldr	r3, [pc, #24]	; (d67bc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d67a2:	2200      	movs	r2, #0
   d67a4:	701a      	strb	r2, [r3, #0]
   d67a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d67aa:	8058      	strh	r0, [r3, #2]
   d67ac:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d67ae:	681a      	ldr	r2, [r3, #0]
   d67b0:	889b      	ldrh	r3, [r3, #4]
   d67b2:	6022      	str	r2, [r4, #0]
   d67b4:	80a3      	strh	r3, [r4, #4]
}
   d67b6:	4620      	mov	r0, r4
   d67b8:	bd10      	pop	{r4, pc}
   d67ba:	bf00      	nop
   d67bc:	2003e56c 	.word	0x2003e56c

000d67c0 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d67c0:	b510      	push	{r4, lr}
   d67c2:	2400      	movs	r4, #0
   d67c4:	7004      	strb	r4, [r0, #0]
   d67c6:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d67c8:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d67ca:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d67ce:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d67d0:	dd07      	ble.n	d67e2 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d67d2:	3901      	subs	r1, #1
   d67d4:	4299      	cmp	r1, r3
   d67d6:	d209      	bcs.n	d67ec <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d67d8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d67dc:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d67de:	2301      	movs	r3, #1
   d67e0:	e001      	b.n	d67e6 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d67e2:	d102      	bne.n	d67ea <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d67e4:	2302      	movs	r3, #2
   d67e6:	7003      	strb	r3, [r0, #0]
   d67e8:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d67ea:	8041      	strh	r1, [r0, #2]
    }
}
   d67ec:	bd10      	pop	{r4, pc}
	...

000d67f0 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d67f0:	b570      	push	{r4, r5, r6, lr}
   d67f2:	b086      	sub	sp, #24
   d67f4:	4616      	mov	r6, r2
   d67f6:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d67f8:	2300      	movs	r3, #0
   d67fa:	9302      	str	r3, [sp, #8]
   d67fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d67fe:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6800:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6804:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d6806:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d6808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d680a:	4631      	mov	r1, r6
   d680c:	4628      	mov	r0, r5
   d680e:	f7fe feb7 	bl	d5580 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d6812:	4633      	mov	r3, r6
   d6814:	462a      	mov	r2, r5
   d6816:	4601      	mov	r1, r0
   d6818:	a804      	add	r0, sp, #16
   d681a:	f7ff ffd1 	bl	d67c0 <_ZN11SleepResultC1EiPKtj>
   d681e:	4b06      	ldr	r3, [pc, #24]	; (d6838 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d6820:	9804      	ldr	r0, [sp, #16]
   d6822:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d6826:	6018      	str	r0, [r3, #0]
   d6828:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d682a:	681a      	ldr	r2, [r3, #0]
   d682c:	889b      	ldrh	r3, [r3, #4]
   d682e:	6022      	str	r2, [r4, #0]
}
   d6830:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d6832:	80a3      	strh	r3, [r4, #4]
}
   d6834:	b006      	add	sp, #24
   d6836:	bd70      	pop	{r4, r5, r6, pc}
   d6838:	2003e56c 	.word	0x2003e56c

000d683c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d683c:	4b04      	ldr	r3, [pc, #16]	; (d6850 <_GLOBAL__sub_I_System+0x14>)
   d683e:	2000      	movs	r0, #0
   d6840:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6844:	7018      	strb	r0, [r3, #0]
   d6846:	8058      	strh	r0, [r3, #2]
   d6848:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d684a:	f7fe be4d 	b.w	d54e8 <set_system_mode>
   d684e:	bf00      	nop
   d6850:	2003e56c 	.word	0x2003e56c

000d6854 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6854:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d6856:	4b14      	ldr	r3, [pc, #80]	; (d68a8 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6858:	4f14      	ldr	r7, [pc, #80]	; (d68ac <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d685a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d685c:	4b14      	ldr	r3, [pc, #80]	; (d68b0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d685e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d6860:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d6862:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6864:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d6866:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6868:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d686a:	d01b      	beq.n	d68a4 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d686c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d686e:	ad01      	add	r5, sp, #4
   d6870:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6874:	f000 fe26 	bl	d74c4 <localtime>
	calendar_time->tm_year += 1900;
   d6878:	6943      	ldr	r3, [r0, #20]
   d687a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d687e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6880:	4604      	mov	r4, r0
   d6882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d688a:	f8d4 e000 	ldr.w	lr, [r4]
   d688e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6892:	ad01      	add	r5, sp, #4
   d6894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6896:	4c07      	ldr	r4, [pc, #28]	; (d68b4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d6898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d689a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d689c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d689e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68a0:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d68a4:	b00b      	add	sp, #44	; 0x2c
   d68a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68a8:	2003e5a4 	.word	0x2003e5a4
   d68ac:	2003e5a0 	.word	0x2003e5a0
   d68b0:	2003e59c 	.word	0x2003e59c
   d68b4:	2003e574 	.word	0x2003e574

000d68b8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d68b8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d68ba:	2000      	movs	r0, #0
   d68bc:	f7fe feba 	bl	d5634 <spark_sync_time_pending>
   d68c0:	b128      	cbz	r0, d68ce <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d68c2:	f7fe fe8f 	bl	d55e4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d68c6:	f080 0001 	eor.w	r0, r0, #1
   d68ca:	b2c0      	uxtb	r0, r0
   d68cc:	bd08      	pop	{r3, pc}
   d68ce:	2001      	movs	r0, #1
    }
   d68d0:	bd08      	pop	{r3, pc}
	...

000d68d4 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d68d4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d68d6:	f7ff ffbd 	bl	d6854 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d68da:	4b01      	ldr	r3, [pc, #4]	; (d68e0 <_ZN9TimeClass6minuteEl+0xc>)
   d68dc:	6858      	ldr	r0, [r3, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	2003e574 	.word	0x2003e574

000d68e4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d68e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d68e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d68ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d68f0:	d40f      	bmi.n	d6912 <_ZN9TimeClass4zoneEf+0x2e>
   d68f2:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d68f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d68fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d68fe:	dc08      	bgt.n	d6912 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6900:	eddf 7a04 	vldr	s15, [pc, #16]	; d6914 <_ZN9TimeClass4zoneEf+0x30>
   d6904:	4b04      	ldr	r3, [pc, #16]	; (d6918 <_ZN9TimeClass4zoneEf+0x34>)
   d6906:	ee20 0a27 	vmul.f32	s0, s0, s15
   d690a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d690e:	ed83 0a00 	vstr	s0, [r3]
   d6912:	4770      	bx	lr
   d6914:	45610000 	.word	0x45610000
   d6918:	2003e5a4 	.word	0x2003e5a4

000d691c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d691c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d691e:	4b0e      	ldr	r3, [pc, #56]	; (d6958 <_ZN9TimeClass7timeStrEl+0x3c>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	4419      	add	r1, r3
   d6924:	4b0d      	ldr	r3, [pc, #52]	; (d695c <_ZN9TimeClass7timeStrEl+0x40>)
   d6926:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6928:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d692a:	a802      	add	r0, sp, #8
   d692c:	4419      	add	r1, r3
   d692e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d6932:	f000 fdc7 	bl	d74c4 <localtime>
        char* ascstr = asctime(calendar_time);
   d6936:	f000 fd77 	bl	d7428 <asctime>
   d693a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d693c:	f000 ff5d 	bl	d77fa <strlen>
        ascstr[len-1] = 0; // remove final newline
   d6940:	4428      	add	r0, r5
   d6942:	2300      	movs	r3, #0
   d6944:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6948:	4629      	mov	r1, r5
   d694a:	4620      	mov	r0, r4
   d694c:	f7ff fec0 	bl	d66d0 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6950:	4620      	mov	r0, r4
   d6952:	b003      	add	sp, #12
   d6954:	bd30      	pop	{r4, r5, pc}
   d6956:	bf00      	nop
   d6958:	2003e5a4 	.word	0x2003e5a4
   d695c:	2003e59c 	.word	0x2003e59c

000d6960 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6960:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6962:	2000      	movs	r0, #0
   d6964:	f7fe fcb8 	bl	d52d8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6968:	4604      	mov	r4, r0
   d696a:	b968      	cbnz	r0, d6988 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d696c:	f7fe fdb4 	bl	d54d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6970:	2801      	cmp	r0, #1
   d6972:	d10b      	bne.n	d698c <_ZN9TimeClass7isValidEv+0x2c>
   d6974:	4620      	mov	r0, r4
   d6976:	f7fe fde7 	bl	d5548 <system_thread_get_state>
   d697a:	b938      	cbnz	r0, d698c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d697c:	f7ff ff9c 	bl	d68b8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6980:	b930      	cbnz	r0, d6990 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6982:	f7fe fe17 	bl	d55b4 <spark_process>
   d6986:	e7f9      	b.n	d697c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6988:	2001      	movs	r0, #1
   d698a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d698c:	2000      	movs	r0, #0
   d698e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6990:	f7ff ff92 	bl	d68b8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6994:	2000      	movs	r0, #0
   d6996:	f7fe fc9f 	bl	d52d8 <HAL_RTC_Time_Is_Valid>
   d699a:	3000      	adds	r0, #0
   d699c:	bf18      	it	ne
   d699e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d69a0:	bd10      	pop	{r4, pc}

000d69a2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d69a2:	b508      	push	{r3, lr}
    (void)isValid();
   d69a4:	f7ff ffdc 	bl	d6960 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d69a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d69ac:	f7fe bc64 	b.w	d5278 <HAL_RTC_Get_UnixTime>

000d69b0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d69b0:	b508      	push	{r3, lr}
	return hour(now());
   d69b2:	f7ff fff6 	bl	d69a2 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d69b6:	f7ff ff4d 	bl	d6854 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d69ba:	4b01      	ldr	r3, [pc, #4]	; (d69c0 <_ZN9TimeClass4hourEv+0x10>)
   d69bc:	6898      	ldr	r0, [r3, #8]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	2003e574 	.word	0x2003e574

000d69c4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d69c4:	b508      	push	{r3, lr}
	return minute(now());
   d69c6:	f7ff ffec 	bl	d69a2 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d69ca:	f7ff ff43 	bl	d6854 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d69ce:	4b01      	ldr	r3, [pc, #4]	; (d69d4 <_ZN9TimeClass6minuteEv+0x10>)
   d69d0:	6858      	ldr	r0, [r3, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	2003e574 	.word	0x2003e574

000d69d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d69d8:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d69da:	681a      	ldr	r2, [r3, #0]
   d69dc:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d69de:	601a      	str	r2, [r3, #0]
   d69e0:	4770      	bx	lr
   d69e2:	bf00      	nop
   d69e4:	2003e0f4 	.word	0x2003e0f4
   d69e8:	2003e598 	.word	0x2003e598

000d69ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d69ec:	4770      	bx	lr

000d69ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69ee:	7441      	strb	r1, [r0, #17]
   d69f0:	4770      	bx	lr

000d69f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d69f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d69f4:	7c00      	ldrb	r0, [r0, #16]
   d69f6:	f7fe fd37 	bl	d5468 <HAL_USART_Available_Data_For_Write>
}
   d69fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69fe:	bd08      	pop	{r3, pc}

000d6a00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6a00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6a02:	7c00      	ldrb	r0, [r0, #16]
   d6a04:	f7fe fd08 	bl	d5418 <HAL_USART_Available_Data>
}
   d6a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a0c:	bd08      	pop	{r3, pc}

000d6a0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6a0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6a10:	7c00      	ldrb	r0, [r0, #16]
   d6a12:	f7fe fd11 	bl	d5438 <HAL_USART_Peek_Data>
}
   d6a16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a1a:	bf28      	it	cs
   d6a1c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a20:	bd08      	pop	{r3, pc}

000d6a22 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6a22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6a24:	7c00      	ldrb	r0, [r0, #16]
   d6a26:	f7fe fcff 	bl	d5428 <HAL_USART_Read_Data>
}
   d6a2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a2e:	bf28      	it	cs
   d6a30:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a34:	bd08      	pop	{r3, pc}

000d6a36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6a36:	7c00      	ldrb	r0, [r0, #16]
   d6a38:	f7fe bd06 	b.w	d5448 <HAL_USART_Flush_Data>

000d6a3c <_ZN11USARTSerialD0Ev>:
   d6a3c:	b510      	push	{r4, lr}
   d6a3e:	2114      	movs	r1, #20
   d6a40:	4604      	mov	r4, r0
   d6a42:	f000 f9ec 	bl	d6e1e <_ZdlPvj>
   d6a46:	4620      	mov	r0, r4
   d6a48:	bd10      	pop	{r4, pc}

000d6a4a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6a4a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a4c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6a4e:	4604      	mov	r4, r0
   d6a50:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a52:	b925      	cbnz	r5, d6a5e <_ZN11USARTSerial5writeEh+0x14>
   d6a54:	7c00      	ldrb	r0, [r0, #16]
   d6a56:	f7fe fd07 	bl	d5468 <HAL_USART_Available_Data_For_Write>
   d6a5a:	2800      	cmp	r0, #0
   d6a5c:	dd05      	ble.n	d6a6a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a5e:	4631      	mov	r1, r6
   d6a60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a66:	f7fe bccf 	b.w	d5408 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6a6a:	4628      	mov	r0, r5
   d6a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6a70:	b510      	push	{r4, lr}
   d6a72:	4604      	mov	r4, r0
   d6a74:	4608      	mov	r0, r1
   d6a76:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a78:	2200      	movs	r2, #0
   d6a7a:	6062      	str	r2, [r4, #4]
   d6a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a80:	60a2      	str	r2, [r4, #8]
   d6a82:	4a05      	ldr	r2, [pc, #20]	; (d6a98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6a84:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6a86:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6a88:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6a8a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6a8c:	461a      	mov	r2, r3
   d6a8e:	f7fe fcb3 	bl	d53f8 <HAL_USART_Init>
}
   d6a92:	4620      	mov	r0, r4
   d6a94:	bd10      	pop	{r4, pc}
   d6a96:	bf00      	nop
   d6a98:	000d87f4 	.word	0x000d87f4

000d6a9c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6a9c:	7c00      	ldrb	r0, [r0, #16]
   d6a9e:	f7fe bcdb 	b.w	d5458 <HAL_USART_Is_Enabled>
	...

000d6aa4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6aa4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6aa6:	4d0c      	ldr	r5, [pc, #48]	; (d6ad8 <_Z22__fetch_global_Serial1v+0x34>)
   d6aa8:	6829      	ldr	r1, [r5, #0]
   d6aaa:	f011 0401 	ands.w	r4, r1, #1
   d6aae:	d111      	bne.n	d6ad4 <_Z22__fetch_global_Serial1v+0x30>
   d6ab0:	4628      	mov	r0, r5
   d6ab2:	f7fd faf6 	bl	d40a2 <__cxa_guard_acquire>
   d6ab6:	b168      	cbz	r0, d6ad4 <_Z22__fetch_global_Serial1v+0x30>
   d6ab8:	4a08      	ldr	r2, [pc, #32]	; (d6adc <_Z22__fetch_global_Serial1v+0x38>)
   d6aba:	4b09      	ldr	r3, [pc, #36]	; (d6ae0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6abc:	4809      	ldr	r0, [pc, #36]	; (d6ae4 <_Z22__fetch_global_Serial1v+0x40>)
   d6abe:	4621      	mov	r1, r4
   d6ac0:	f7ff ffd6 	bl	d6a70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6ac4:	4628      	mov	r0, r5
   d6ac6:	f7fd faf1 	bl	d40ac <__cxa_guard_release>
   d6aca:	4a07      	ldr	r2, [pc, #28]	; (d6ae8 <_Z22__fetch_global_Serial1v+0x44>)
   d6acc:	4907      	ldr	r1, [pc, #28]	; (d6aec <_Z22__fetch_global_Serial1v+0x48>)
   d6ace:	4805      	ldr	r0, [pc, #20]	; (d6ae4 <_Z22__fetch_global_Serial1v+0x40>)
   d6ad0:	f000 f9a0 	bl	d6e14 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6ad4:	4803      	ldr	r0, [pc, #12]	; (d6ae4 <_Z22__fetch_global_Serial1v+0x40>)
   d6ad6:	bd38      	pop	{r3, r4, r5, pc}
   d6ad8:	2003e640 	.word	0x2003e640
   d6adc:	2003e644 	.word	0x2003e644
   d6ae0:	2003e5bc 	.word	0x2003e5bc
   d6ae4:	2003e5a8 	.word	0x2003e5a8
   d6ae8:	2003e1ac 	.word	0x2003e1ac
   d6aec:	000d69ed 	.word	0x000d69ed

000d6af0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6af0:	7441      	strb	r1, [r0, #17]
   d6af2:	4770      	bx	lr

000d6af4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6af4:	4770      	bx	lr

000d6af6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6af6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6af8:	2100      	movs	r1, #0
   d6afa:	7c00      	ldrb	r0, [r0, #16]
   d6afc:	f7fe fcd4 	bl	d54a8 <HAL_USB_USART_Receive_Data>
}
   d6b00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b04:	bf28      	it	cs
   d6b06:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b0a:	bd08      	pop	{r3, pc}

000d6b0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6b0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b0e:	2101      	movs	r1, #1
   d6b10:	7c00      	ldrb	r0, [r0, #16]
   d6b12:	f7fe fcc9 	bl	d54a8 <HAL_USB_USART_Receive_Data>
}
   d6b16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6b1a:	bf28      	it	cs
   d6b1c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6b20:	bd08      	pop	{r3, pc}

000d6b22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6b22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6b24:	7c00      	ldrb	r0, [r0, #16]
   d6b26:	f7fe fcb7 	bl	d5498 <HAL_USB_USART_Available_Data_For_Write>
}
   d6b2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b2e:	bd08      	pop	{r3, pc}

000d6b30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6b30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6b32:	7c00      	ldrb	r0, [r0, #16]
   d6b34:	f7fe fca8 	bl	d5488 <HAL_USB_USART_Available_Data>
}
   d6b38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b3c:	bd08      	pop	{r3, pc}

000d6b3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6b3e:	7c00      	ldrb	r0, [r0, #16]
   d6b40:	f7fe bcc2 	b.w	d54c8 <HAL_USB_USART_Flush_Data>

000d6b44 <_ZN9USBSerialD0Ev>:
   d6b44:	b510      	push	{r4, lr}
   d6b46:	2114      	movs	r1, #20
   d6b48:	4604      	mov	r4, r0
   d6b4a:	f000 f968 	bl	d6e1e <_ZdlPvj>
   d6b4e:	4620      	mov	r0, r4
   d6b50:	bd10      	pop	{r4, pc}

000d6b52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b52:	b538      	push	{r3, r4, r5, lr}
   d6b54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b5a:	f7fe fc9d 	bl	d5498 <HAL_USB_USART_Available_Data_For_Write>
   d6b5e:	2800      	cmp	r0, #0
   d6b60:	dc01      	bgt.n	d6b66 <_ZN9USBSerial5writeEh+0x14>
   d6b62:	7c60      	ldrb	r0, [r4, #17]
   d6b64:	b128      	cbz	r0, d6b72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b66:	4629      	mov	r1, r5
   d6b68:	7c20      	ldrb	r0, [r4, #16]
   d6b6a:	f7fe fca5 	bl	d54b8 <HAL_USB_USART_Send_Data>
   d6b6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6b72:	bd38      	pop	{r3, r4, r5, pc}

000d6b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b74:	b510      	push	{r4, lr}
   d6b76:	4604      	mov	r4, r0
   d6b78:	2300      	movs	r3, #0
   d6b7a:	6063      	str	r3, [r4, #4]
   d6b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b80:	60a3      	str	r3, [r4, #8]
   d6b82:	4b05      	ldr	r3, [pc, #20]	; (d6b98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6b84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6b86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b88:	4608      	mov	r0, r1
{
  _serial = serial;
   d6b8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6b8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6b8e:	4611      	mov	r1, r2
   d6b90:	f7fe fc72 	bl	d5478 <HAL_USB_USART_Init>
}
   d6b94:	4620      	mov	r0, r4
   d6b96:	bd10      	pop	{r4, pc}
   d6b98:	000d8824 	.word	0x000d8824

000d6b9c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b9e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6ba0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6ba2:	2100      	movs	r1, #0
   d6ba4:	f000 fd91 	bl	d76ca <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6ba8:	4620      	mov	r0, r4
   d6baa:	bd10      	pop	{r4, pc}

000d6bac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6bac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6bae:	4d0e      	ldr	r5, [pc, #56]	; (d6be8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6bb0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6bb2:	a801      	add	r0, sp, #4
   d6bb4:	f7ff fff2 	bl	d6b9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6bb8:	6829      	ldr	r1, [r5, #0]
   d6bba:	f011 0401 	ands.w	r4, r1, #1
   d6bbe:	d110      	bne.n	d6be2 <_Z16_fetch_usbserialv+0x36>
   d6bc0:	4628      	mov	r0, r5
   d6bc2:	f7fd fa6e 	bl	d40a2 <__cxa_guard_acquire>
   d6bc6:	b160      	cbz	r0, d6be2 <_Z16_fetch_usbserialv+0x36>
   d6bc8:	aa01      	add	r2, sp, #4
   d6bca:	4621      	mov	r1, r4
   d6bcc:	4807      	ldr	r0, [pc, #28]	; (d6bec <_Z16_fetch_usbserialv+0x40>)
   d6bce:	f7ff ffd1 	bl	d6b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6bd2:	4628      	mov	r0, r5
   d6bd4:	f7fd fa6a 	bl	d40ac <__cxa_guard_release>
   d6bd8:	4a05      	ldr	r2, [pc, #20]	; (d6bf0 <_Z16_fetch_usbserialv+0x44>)
   d6bda:	4906      	ldr	r1, [pc, #24]	; (d6bf4 <_Z16_fetch_usbserialv+0x48>)
   d6bdc:	4803      	ldr	r0, [pc, #12]	; (d6bec <_Z16_fetch_usbserialv+0x40>)
   d6bde:	f000 f919 	bl	d6e14 <__aeabi_atexit>
	return _usbserial;
}
   d6be2:	4802      	ldr	r0, [pc, #8]	; (d6bec <_Z16_fetch_usbserialv+0x40>)
   d6be4:	b007      	add	sp, #28
   d6be6:	bd30      	pop	{r4, r5, pc}
   d6be8:	2003e6c8 	.word	0x2003e6c8
   d6bec:	2003e6cc 	.word	0x2003e6cc
   d6bf0:	2003e1ac 	.word	0x2003e1ac
   d6bf4:	000d6af5 	.word	0x000d6af5

000d6bf8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6bf8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6bfa:	4b0c      	ldr	r3, [pc, #48]	; (d6c2c <serialEventRun+0x34>)
   d6bfc:	b133      	cbz	r3, d6c0c <serialEventRun+0x14>
   d6bfe:	f7ff ffd5 	bl	d6bac <_Z16_fetch_usbserialv>
   d6c02:	6803      	ldr	r3, [r0, #0]
   d6c04:	691b      	ldr	r3, [r3, #16]
   d6c06:	4798      	blx	r3
   d6c08:	2800      	cmp	r0, #0
   d6c0a:	dc09      	bgt.n	d6c20 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6c0c:	4b08      	ldr	r3, [pc, #32]	; (d6c30 <serialEventRun+0x38>)
   d6c0e:	b163      	cbz	r3, d6c2a <serialEventRun+0x32>
   d6c10:	f7ff ff48 	bl	d6aa4 <_Z22__fetch_global_Serial1v>
   d6c14:	6803      	ldr	r3, [r0, #0]
   d6c16:	691b      	ldr	r3, [r3, #16]
   d6c18:	4798      	blx	r3
   d6c1a:	2800      	cmp	r0, #0
   d6c1c:	dc03      	bgt.n	d6c26 <serialEventRun+0x2e>
   d6c1e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6c20:	f3af 8000 	nop.w
   d6c24:	e7f2      	b.n	d6c0c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6c26:	f3af 8000 	nop.w
   d6c2a:	bd08      	pop	{r3, pc}
	...

000d6c34 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6c34:	b508      	push	{r3, lr}
	serialEventRun();
   d6c36:	f7ff ffdf 	bl	d6bf8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6c3a:	f7fe fb15 	bl	d5268 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6c3e:	4b01      	ldr	r3, [pc, #4]	; (d6c44 <_post_loop+0x10>)
   d6c40:	6018      	str	r0, [r3, #0]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	2003e6e4 	.word	0x2003e6e4

000d6c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6c48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6c4a:	2300      	movs	r3, #0
   d6c4c:	9300      	str	r3, [sp, #0]
   d6c4e:	461a      	mov	r2, r3
   d6c50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6c54:	f7fe fc8a 	bl	d556c <system_ctrl_set_result>
}
   d6c58:	b003      	add	sp, #12
   d6c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6c60 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6c60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6c62:	8843      	ldrh	r3, [r0, #2]
   d6c64:	2b0a      	cmp	r3, #10
   d6c66:	d008      	beq.n	d6c7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6c68:	2b50      	cmp	r3, #80	; 0x50
   d6c6a:	d109      	bne.n	d6c80 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6c6c:	4b09      	ldr	r3, [pc, #36]	; (d6c94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6c6e:	681b      	ldr	r3, [r3, #0]
   d6c70:	b13b      	cbz	r3, d6c82 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6c72:	b003      	add	sp, #12
   d6c74:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6c78:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6c7a:	f7ff ffe5 	bl	d6c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6c7e:	e006      	b.n	d6c8e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6c80:	2300      	movs	r3, #0
   d6c82:	9300      	str	r3, [sp, #0]
   d6c84:	461a      	mov	r2, r3
   d6c86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6c8a:	f7fe fc6f 	bl	d556c <system_ctrl_set_result>
        break;
    }
}
   d6c8e:	b003      	add	sp, #12
   d6c90:	f85d fb04 	ldr.w	pc, [sp], #4
   d6c94:	2003e6e0 	.word	0x2003e6e0

000d6c98 <module_user_init_hook>:

void module_user_init_hook()
{
   d6c98:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6c9a:	f7fe fadd 	bl	d5258 <HAL_RNG_GetRandomNumber>
   d6c9e:	4604      	mov	r4, r0
    srand(seed);
   d6ca0:	f000 fd1c 	bl	d76dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6ca4:	4b07      	ldr	r3, [pc, #28]	; (d6cc4 <module_user_init_hook+0x2c>)
   d6ca6:	b113      	cbz	r3, d6cae <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6ca8:	4620      	mov	r0, r4
   d6caa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6cae:	2100      	movs	r1, #0
   d6cb0:	4804      	ldr	r0, [pc, #16]	; (d6cc4 <module_user_init_hook+0x2c>)
   d6cb2:	f7fe fcc7 	bl	d5644 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6cb6:	2100      	movs	r1, #0
   d6cb8:	4803      	ldr	r0, [pc, #12]	; (d6cc8 <module_user_init_hook+0x30>)
}
   d6cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6cbe:	f7fe bc4b 	b.w	d5558 <system_ctrl_set_app_request_handler>
   d6cc2:	bf00      	nop
   d6cc4:	00000000 	.word	0x00000000
   d6cc8:	000d6c61 	.word	0x000d6c61

000d6ccc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6ccc:	b510      	push	{r4, lr}
   d6cce:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6cd0:	480f      	ldr	r0, [pc, #60]	; (d6d10 <pinAvailable+0x44>)
   d6cd2:	f7ff fcb3 	bl	d663c <_ZN8SPIClass9isEnabledEv>
   d6cd6:	b128      	cbz	r0, d6ce4 <pinAvailable+0x18>
   d6cd8:	f1a4 030b 	sub.w	r3, r4, #11
   d6cdc:	2b02      	cmp	r3, #2
   d6cde:	d801      	bhi.n	d6ce4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6ce0:	2000      	movs	r0, #0
   d6ce2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6ce4:	f000 f854 	bl	d6d90 <_Z19__fetch_global_Wirev>
   d6ce8:	f7ff fa06 	bl	d60f8 <_ZN7TwoWire9isEnabledEv>
   d6cec:	b108      	cbz	r0, d6cf2 <pinAvailable+0x26>
   d6cee:	2c01      	cmp	r4, #1
   d6cf0:	d9f6      	bls.n	d6ce0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6cf2:	f7ff fed7 	bl	d6aa4 <_Z22__fetch_global_Serial1v>
   d6cf6:	f7ff fed1 	bl	d6a9c <_ZN11USARTSerial9isEnabledEv>
   d6cfa:	b118      	cbz	r0, d6d04 <pinAvailable+0x38>
   d6cfc:	f1a4 0309 	sub.w	r3, r4, #9
   d6d00:	2b01      	cmp	r3, #1
   d6d02:	d9ed      	bls.n	d6ce0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6d04:	2c23      	cmp	r4, #35	; 0x23
   d6d06:	bf8c      	ite	hi
   d6d08:	2000      	movhi	r0, #0
   d6d0a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6d0c:	bd10      	pop	{r4, pc}
   d6d0e:	bf00      	nop
   d6d10:	2003e708 	.word	0x2003e708

000d6d14 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d14:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6d16:	b538      	push	{r3, r4, r5, lr}
   d6d18:	4604      	mov	r4, r0
   d6d1a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6d1c:	d80a      	bhi.n	d6d34 <pinMode+0x20>
   d6d1e:	29ff      	cmp	r1, #255	; 0xff
   d6d20:	d008      	beq.n	d6d34 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6d22:	f7ff ffd3 	bl	d6ccc <pinAvailable>
   d6d26:	b128      	cbz	r0, d6d34 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6d28:	4629      	mov	r1, r5
   d6d2a:	4620      	mov	r0, r4
}
   d6d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6d30:	f7fe baea 	b.w	d5308 <HAL_Pin_Mode>
   d6d34:	bd38      	pop	{r3, r4, r5, pc}

000d6d36 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6d36:	b538      	push	{r3, r4, r5, lr}
   d6d38:	4604      	mov	r4, r0
   d6d3a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d3c:	f7fe faec 	bl	d5318 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d40:	28ff      	cmp	r0, #255	; 0xff
   d6d42:	d010      	beq.n	d6d66 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6d44:	2806      	cmp	r0, #6
   d6d46:	d804      	bhi.n	d6d52 <digitalWrite+0x1c>
   d6d48:	234d      	movs	r3, #77	; 0x4d
   d6d4a:	fa23 f000 	lsr.w	r0, r3, r0
   d6d4e:	07c3      	lsls	r3, r0, #31
   d6d50:	d409      	bmi.n	d6d66 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6d52:	4620      	mov	r0, r4
   d6d54:	f7ff ffba 	bl	d6ccc <pinAvailable>
   d6d58:	b128      	cbz	r0, d6d66 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d5a:	4629      	mov	r1, r5
   d6d5c:	4620      	mov	r0, r4
}
   d6d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d62:	f7fe bae1 	b.w	d5328 <HAL_GPIO_Write>
   d6d66:	bd38      	pop	{r3, r4, r5, pc}

000d6d68 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6d68:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6d6a:	4c07      	ldr	r4, [pc, #28]	; (d6d88 <_Z21__fetch_global_EEPROMv+0x20>)
   d6d6c:	6823      	ldr	r3, [r4, #0]
   d6d6e:	07db      	lsls	r3, r3, #31
   d6d70:	d408      	bmi.n	d6d84 <_Z21__fetch_global_EEPROMv+0x1c>
   d6d72:	4620      	mov	r0, r4
   d6d74:	f7fd f995 	bl	d40a2 <__cxa_guard_acquire>
   d6d78:	b120      	cbz	r0, d6d84 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6d7a:	f7fe fa85 	bl	d5288 <HAL_EEPROM_Init>
   d6d7e:	4620      	mov	r0, r4
   d6d80:	f7fd f994 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6d84:	4801      	ldr	r0, [pc, #4]	; (d6d8c <_Z21__fetch_global_EEPROMv+0x24>)
   d6d86:	bd10      	pop	{r4, pc}
   d6d88:	2003e6e8 	.word	0x2003e6e8
   d6d8c:	2003e6ec 	.word	0x2003e6ec

000d6d90 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6d90:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6d92:	4d0b      	ldr	r5, [pc, #44]	; (d6dc0 <_Z19__fetch_global_Wirev+0x30>)
   d6d94:	6829      	ldr	r1, [r5, #0]
   d6d96:	f011 0401 	ands.w	r4, r1, #1
   d6d9a:	d10f      	bne.n	d6dbc <_Z19__fetch_global_Wirev+0x2c>
   d6d9c:	4628      	mov	r0, r5
   d6d9e:	f7fd f980 	bl	d40a2 <__cxa_guard_acquire>
   d6da2:	b158      	cbz	r0, d6dbc <_Z19__fetch_global_Wirev+0x2c>
   d6da4:	4621      	mov	r1, r4
   d6da6:	4807      	ldr	r0, [pc, #28]	; (d6dc4 <_Z19__fetch_global_Wirev+0x34>)
   d6da8:	f7ff f994 	bl	d60d4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6dac:	4628      	mov	r0, r5
   d6dae:	f7fd f97d 	bl	d40ac <__cxa_guard_release>
   d6db2:	4a05      	ldr	r2, [pc, #20]	; (d6dc8 <_Z19__fetch_global_Wirev+0x38>)
   d6db4:	4905      	ldr	r1, [pc, #20]	; (d6dcc <_Z19__fetch_global_Wirev+0x3c>)
   d6db6:	4803      	ldr	r0, [pc, #12]	; (d6dc4 <_Z19__fetch_global_Wirev+0x34>)
   d6db8:	f000 f82c 	bl	d6e14 <__aeabi_atexit>
	return wire;
}
   d6dbc:	4801      	ldr	r0, [pc, #4]	; (d6dc4 <_Z19__fetch_global_Wirev+0x34>)
   d6dbe:	bd38      	pop	{r3, r4, r5, pc}
   d6dc0:	2003e6f0 	.word	0x2003e6f0
   d6dc4:	2003e6f4 	.word	0x2003e6f4
   d6dc8:	2003e1ac 	.word	0x2003e1ac
   d6dcc:	000d607d 	.word	0x000d607d

000d6dd0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6dd0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6dd2:	4c0c      	ldr	r4, [pc, #48]	; (d6e04 <_GLOBAL__sub_I_SPI+0x34>)
   d6dd4:	4e0c      	ldr	r6, [pc, #48]	; (d6e08 <_GLOBAL__sub_I_SPI+0x38>)
   d6dd6:	4d0d      	ldr	r5, [pc, #52]	; (d6e0c <_GLOBAL__sub_I_SPI+0x3c>)
   d6dd8:	2100      	movs	r1, #0
   d6dda:	4620      	mov	r0, r4
   d6ddc:	f7ff fc1a 	bl	d6614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6de0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6de2:	4c0b      	ldr	r4, [pc, #44]	; (d6e10 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6de4:	4632      	mov	r2, r6
   d6de6:	4629      	mov	r1, r5
   d6de8:	f000 f814 	bl	d6e14 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6dec:	2101      	movs	r1, #1
   d6dee:	4620      	mov	r0, r4
   d6df0:	f7ff fc10 	bl	d6614 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6df4:	4632      	mov	r2, r6
   d6df6:	4629      	mov	r1, r5
   d6df8:	4620      	mov	r0, r4
   d6dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6dfe:	f000 b809 	b.w	d6e14 <__aeabi_atexit>
   d6e02:	bf00      	nop
   d6e04:	2003e708 	.word	0x2003e708
   d6e08:	2003e1ac 	.word	0x2003e1ac
   d6e0c:	000d6605 	.word	0x000d6605
   d6e10:	2003e718 	.word	0x2003e718

000d6e14 <__aeabi_atexit>:
   d6e14:	460b      	mov	r3, r1
   d6e16:	4601      	mov	r1, r0
   d6e18:	4618      	mov	r0, r3
   d6e1a:	f000 bb45 	b.w	d74a8 <__cxa_atexit>

000d6e1e <_ZdlPvj>:
   d6e1e:	f7fd b93c 	b.w	d409a <_ZdlPv>

000d6e22 <_ZSt25__throw_bad_function_callv>:
   d6e22:	b508      	push	{r3, lr}
   d6e24:	f7fe fc96 	bl	d5754 <abort>

000d6e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e28:	4b24      	ldr	r3, [pc, #144]	; (d6ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e2a:	681a      	ldr	r2, [r3, #0]
   d6e2c:	07d0      	lsls	r0, r2, #31
   d6e2e:	bf5c      	itt	pl
   d6e30:	2201      	movpl	r2, #1
   d6e32:	601a      	strpl	r2, [r3, #0]
   d6e34:	4b22      	ldr	r3, [pc, #136]	; (d6ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6e36:	681a      	ldr	r2, [r3, #0]
   d6e38:	07d1      	lsls	r1, r2, #31
   d6e3a:	bf5c      	itt	pl
   d6e3c:	2201      	movpl	r2, #1
   d6e3e:	601a      	strpl	r2, [r3, #0]
   d6e40:	4b20      	ldr	r3, [pc, #128]	; (d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e42:	681a      	ldr	r2, [r3, #0]
   d6e44:	07d2      	lsls	r2, r2, #31
   d6e46:	bf5c      	itt	pl
   d6e48:	2201      	movpl	r2, #1
   d6e4a:	601a      	strpl	r2, [r3, #0]
   d6e4c:	4b1e      	ldr	r3, [pc, #120]	; (d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6e4e:	681a      	ldr	r2, [r3, #0]
   d6e50:	07d0      	lsls	r0, r2, #31
   d6e52:	bf5c      	itt	pl
   d6e54:	2201      	movpl	r2, #1
   d6e56:	601a      	strpl	r2, [r3, #0]
   d6e58:	4b1c      	ldr	r3, [pc, #112]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6e5a:	681a      	ldr	r2, [r3, #0]
   d6e5c:	07d1      	lsls	r1, r2, #31
   d6e5e:	bf5c      	itt	pl
   d6e60:	2201      	movpl	r2, #1
   d6e62:	601a      	strpl	r2, [r3, #0]
   d6e64:	4b1a      	ldr	r3, [pc, #104]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6e66:	681a      	ldr	r2, [r3, #0]
   d6e68:	07d2      	lsls	r2, r2, #31
   d6e6a:	bf5c      	itt	pl
   d6e6c:	2201      	movpl	r2, #1
   d6e6e:	601a      	strpl	r2, [r3, #0]
   d6e70:	4b18      	ldr	r3, [pc, #96]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6e72:	681a      	ldr	r2, [r3, #0]
   d6e74:	07d0      	lsls	r0, r2, #31
   d6e76:	bf5c      	itt	pl
   d6e78:	2201      	movpl	r2, #1
   d6e7a:	601a      	strpl	r2, [r3, #0]
   d6e7c:	4b16      	ldr	r3, [pc, #88]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6e7e:	681a      	ldr	r2, [r3, #0]
   d6e80:	07d1      	lsls	r1, r2, #31
   d6e82:	bf5c      	itt	pl
   d6e84:	2201      	movpl	r2, #1
   d6e86:	601a      	strpl	r2, [r3, #0]
   d6e88:	4b14      	ldr	r3, [pc, #80]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6e8a:	681a      	ldr	r2, [r3, #0]
   d6e8c:	07d2      	lsls	r2, r2, #31
   d6e8e:	bf5c      	itt	pl
   d6e90:	2201      	movpl	r2, #1
   d6e92:	601a      	strpl	r2, [r3, #0]
   d6e94:	4b12      	ldr	r3, [pc, #72]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6e96:	681a      	ldr	r2, [r3, #0]
   d6e98:	07d0      	lsls	r0, r2, #31
   d6e9a:	bf5c      	itt	pl
   d6e9c:	2201      	movpl	r2, #1
   d6e9e:	601a      	strpl	r2, [r3, #0]
   d6ea0:	4b10      	ldr	r3, [pc, #64]	; (d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6ea2:	681a      	ldr	r2, [r3, #0]
   d6ea4:	07d1      	lsls	r1, r2, #31
   d6ea6:	bf5c      	itt	pl
   d6ea8:	2201      	movpl	r2, #1
   d6eaa:	601a      	strpl	r2, [r3, #0]
   d6eac:	4b0e      	ldr	r3, [pc, #56]	; (d6ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6eae:	681a      	ldr	r2, [r3, #0]
   d6eb0:	07d2      	lsls	r2, r2, #31
   d6eb2:	bf5c      	itt	pl
   d6eb4:	2201      	movpl	r2, #1
   d6eb6:	601a      	strpl	r2, [r3, #0]
   d6eb8:	4770      	bx	lr
   d6eba:	bf00      	nop
   d6ebc:	2003e754 	.word	0x2003e754
   d6ec0:	2003e750 	.word	0x2003e750
   d6ec4:	2003e74c 	.word	0x2003e74c
   d6ec8:	2003e748 	.word	0x2003e748
   d6ecc:	2003e744 	.word	0x2003e744
   d6ed0:	2003e740 	.word	0x2003e740
   d6ed4:	2003e73c 	.word	0x2003e73c
   d6ed8:	2003e738 	.word	0x2003e738
   d6edc:	2003e734 	.word	0x2003e734
   d6ee0:	2003e730 	.word	0x2003e730
   d6ee4:	2003e72c 	.word	0x2003e72c
   d6ee8:	2003e728 	.word	0x2003e728

000d6eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6eec:	4b18      	ldr	r3, [pc, #96]	; (d6f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d1      	lsls	r1, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b16      	ldr	r3, [pc, #88]	; (d6f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d2      	lsls	r2, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b14      	ldr	r3, [pc, #80]	; (d6f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d0      	lsls	r0, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b12      	ldr	r3, [pc, #72]	; (d6f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d1      	lsls	r1, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b10      	ldr	r3, [pc, #64]	; (d6f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d2      	lsls	r2, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4b0e      	ldr	r3, [pc, #56]	; (d6f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f2a:	681a      	ldr	r2, [r3, #0]
   d6f2c:	07d0      	lsls	r0, r2, #31
   d6f2e:	bf5c      	itt	pl
   d6f30:	2201      	movpl	r2, #1
   d6f32:	601a      	strpl	r2, [r3, #0]
   d6f34:	4b0c      	ldr	r3, [pc, #48]	; (d6f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6f36:	681a      	ldr	r2, [r3, #0]
   d6f38:	07d1      	lsls	r1, r2, #31
   d6f3a:	bf5c      	itt	pl
   d6f3c:	2201      	movpl	r2, #1
   d6f3e:	601a      	strpl	r2, [r3, #0]
   d6f40:	4b0a      	ldr	r3, [pc, #40]	; (d6f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f42:	681a      	ldr	r2, [r3, #0]
   d6f44:	07d2      	lsls	r2, r2, #31
   d6f46:	bf5c      	itt	pl
   d6f48:	2201      	movpl	r2, #1
   d6f4a:	601a      	strpl	r2, [r3, #0]
   d6f4c:	4770      	bx	lr
   d6f4e:	bf00      	nop
   d6f50:	2003e774 	.word	0x2003e774
   d6f54:	2003e770 	.word	0x2003e770
   d6f58:	2003e76c 	.word	0x2003e76c
   d6f5c:	2003e768 	.word	0x2003e768
   d6f60:	2003e764 	.word	0x2003e764
   d6f64:	2003e760 	.word	0x2003e760
   d6f68:	2003e75c 	.word	0x2003e75c
   d6f6c:	2003e758 	.word	0x2003e758

000d6f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6f70:	4b18      	ldr	r3, [pc, #96]	; (d6fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6f72:	681a      	ldr	r2, [r3, #0]
   d6f74:	07d1      	lsls	r1, r2, #31
   d6f76:	bf5c      	itt	pl
   d6f78:	2201      	movpl	r2, #1
   d6f7a:	601a      	strpl	r2, [r3, #0]
   d6f7c:	4b16      	ldr	r3, [pc, #88]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6f7e:	681a      	ldr	r2, [r3, #0]
   d6f80:	07d2      	lsls	r2, r2, #31
   d6f82:	bf5c      	itt	pl
   d6f84:	2201      	movpl	r2, #1
   d6f86:	601a      	strpl	r2, [r3, #0]
   d6f88:	4b14      	ldr	r3, [pc, #80]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f8a:	681a      	ldr	r2, [r3, #0]
   d6f8c:	07d0      	lsls	r0, r2, #31
   d6f8e:	bf5c      	itt	pl
   d6f90:	2201      	movpl	r2, #1
   d6f92:	601a      	strpl	r2, [r3, #0]
   d6f94:	4b12      	ldr	r3, [pc, #72]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f96:	681a      	ldr	r2, [r3, #0]
   d6f98:	07d1      	lsls	r1, r2, #31
   d6f9a:	bf5c      	itt	pl
   d6f9c:	2201      	movpl	r2, #1
   d6f9e:	601a      	strpl	r2, [r3, #0]
   d6fa0:	4b10      	ldr	r3, [pc, #64]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6fa2:	681a      	ldr	r2, [r3, #0]
   d6fa4:	07d2      	lsls	r2, r2, #31
   d6fa6:	bf5c      	itt	pl
   d6fa8:	2201      	movpl	r2, #1
   d6faa:	601a      	strpl	r2, [r3, #0]
   d6fac:	4b0e      	ldr	r3, [pc, #56]	; (d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6fae:	681a      	ldr	r2, [r3, #0]
   d6fb0:	07d0      	lsls	r0, r2, #31
   d6fb2:	bf5c      	itt	pl
   d6fb4:	2201      	movpl	r2, #1
   d6fb6:	601a      	strpl	r2, [r3, #0]
   d6fb8:	4b0c      	ldr	r3, [pc, #48]	; (d6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6fba:	681a      	ldr	r2, [r3, #0]
   d6fbc:	07d1      	lsls	r1, r2, #31
   d6fbe:	bf5c      	itt	pl
   d6fc0:	2201      	movpl	r2, #1
   d6fc2:	601a      	strpl	r2, [r3, #0]
   d6fc4:	4b0a      	ldr	r3, [pc, #40]	; (d6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6fc6:	681a      	ldr	r2, [r3, #0]
   d6fc8:	07d2      	lsls	r2, r2, #31
   d6fca:	bf5c      	itt	pl
   d6fcc:	2201      	movpl	r2, #1
   d6fce:	601a      	strpl	r2, [r3, #0]
   d6fd0:	4770      	bx	lr
   d6fd2:	bf00      	nop
   d6fd4:	2003e794 	.word	0x2003e794
   d6fd8:	2003e790 	.word	0x2003e790
   d6fdc:	2003e78c 	.word	0x2003e78c
   d6fe0:	2003e788 	.word	0x2003e788
   d6fe4:	2003e784 	.word	0x2003e784
   d6fe8:	2003e780 	.word	0x2003e780
   d6fec:	2003e77c 	.word	0x2003e77c
   d6ff0:	2003e778 	.word	0x2003e778

000d6ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6ff4:	4b24      	ldr	r3, [pc, #144]	; (d7088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6ff6:	681a      	ldr	r2, [r3, #0]
   d6ff8:	07d0      	lsls	r0, r2, #31
   d6ffa:	bf5c      	itt	pl
   d6ffc:	2201      	movpl	r2, #1
   d6ffe:	601a      	strpl	r2, [r3, #0]
   d7000:	4b22      	ldr	r3, [pc, #136]	; (d708c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7002:	681a      	ldr	r2, [r3, #0]
   d7004:	07d1      	lsls	r1, r2, #31
   d7006:	bf5c      	itt	pl
   d7008:	2201      	movpl	r2, #1
   d700a:	601a      	strpl	r2, [r3, #0]
   d700c:	4b20      	ldr	r3, [pc, #128]	; (d7090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d700e:	681a      	ldr	r2, [r3, #0]
   d7010:	07d2      	lsls	r2, r2, #31
   d7012:	bf5c      	itt	pl
   d7014:	2201      	movpl	r2, #1
   d7016:	601a      	strpl	r2, [r3, #0]
   d7018:	4b1e      	ldr	r3, [pc, #120]	; (d7094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d701a:	681a      	ldr	r2, [r3, #0]
   d701c:	07d0      	lsls	r0, r2, #31
   d701e:	bf5c      	itt	pl
   d7020:	2201      	movpl	r2, #1
   d7022:	601a      	strpl	r2, [r3, #0]
   d7024:	4b1c      	ldr	r3, [pc, #112]	; (d7098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7026:	681a      	ldr	r2, [r3, #0]
   d7028:	07d1      	lsls	r1, r2, #31
   d702a:	bf5c      	itt	pl
   d702c:	2201      	movpl	r2, #1
   d702e:	601a      	strpl	r2, [r3, #0]
   d7030:	4b1a      	ldr	r3, [pc, #104]	; (d709c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7032:	681a      	ldr	r2, [r3, #0]
   d7034:	07d2      	lsls	r2, r2, #31
   d7036:	bf5c      	itt	pl
   d7038:	2201      	movpl	r2, #1
   d703a:	601a      	strpl	r2, [r3, #0]
   d703c:	4b18      	ldr	r3, [pc, #96]	; (d70a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d703e:	681a      	ldr	r2, [r3, #0]
   d7040:	07d0      	lsls	r0, r2, #31
   d7042:	bf5c      	itt	pl
   d7044:	2201      	movpl	r2, #1
   d7046:	601a      	strpl	r2, [r3, #0]
   d7048:	4b16      	ldr	r3, [pc, #88]	; (d70a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d704a:	681a      	ldr	r2, [r3, #0]
   d704c:	07d1      	lsls	r1, r2, #31
   d704e:	bf5c      	itt	pl
   d7050:	2201      	movpl	r2, #1
   d7052:	601a      	strpl	r2, [r3, #0]
   d7054:	4b14      	ldr	r3, [pc, #80]	; (d70a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7056:	681a      	ldr	r2, [r3, #0]
   d7058:	07d2      	lsls	r2, r2, #31
   d705a:	bf5c      	itt	pl
   d705c:	2201      	movpl	r2, #1
   d705e:	601a      	strpl	r2, [r3, #0]
   d7060:	4b12      	ldr	r3, [pc, #72]	; (d70ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7062:	681a      	ldr	r2, [r3, #0]
   d7064:	07d0      	lsls	r0, r2, #31
   d7066:	bf5c      	itt	pl
   d7068:	2201      	movpl	r2, #1
   d706a:	601a      	strpl	r2, [r3, #0]
   d706c:	4b10      	ldr	r3, [pc, #64]	; (d70b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d706e:	681a      	ldr	r2, [r3, #0]
   d7070:	07d1      	lsls	r1, r2, #31
   d7072:	bf5c      	itt	pl
   d7074:	2201      	movpl	r2, #1
   d7076:	601a      	strpl	r2, [r3, #0]
   d7078:	4b0e      	ldr	r3, [pc, #56]	; (d70b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d707a:	681a      	ldr	r2, [r3, #0]
   d707c:	07d2      	lsls	r2, r2, #31
   d707e:	bf5c      	itt	pl
   d7080:	2201      	movpl	r2, #1
   d7082:	601a      	strpl	r2, [r3, #0]
   d7084:	4770      	bx	lr
   d7086:	bf00      	nop
   d7088:	2003e7c4 	.word	0x2003e7c4
   d708c:	2003e7c0 	.word	0x2003e7c0
   d7090:	2003e7bc 	.word	0x2003e7bc
   d7094:	2003e7b8 	.word	0x2003e7b8
   d7098:	2003e7b4 	.word	0x2003e7b4
   d709c:	2003e7b0 	.word	0x2003e7b0
   d70a0:	2003e7ac 	.word	0x2003e7ac
   d70a4:	2003e7a8 	.word	0x2003e7a8
   d70a8:	2003e7a4 	.word	0x2003e7a4
   d70ac:	2003e7a0 	.word	0x2003e7a0
   d70b0:	2003e79c 	.word	0x2003e79c
   d70b4:	2003e798 	.word	0x2003e798

000d70b8 <__aeabi_drsub>:
   d70b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d70bc:	e002      	b.n	d70c4 <__adddf3>
   d70be:	bf00      	nop

000d70c0 <__aeabi_dsub>:
   d70c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d70c4 <__adddf3>:
   d70c4:	b530      	push	{r4, r5, lr}
   d70c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d70ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d70ce:	ea94 0f05 	teq	r4, r5
   d70d2:	bf08      	it	eq
   d70d4:	ea90 0f02 	teqeq	r0, r2
   d70d8:	bf1f      	itttt	ne
   d70da:	ea54 0c00 	orrsne.w	ip, r4, r0
   d70de:	ea55 0c02 	orrsne.w	ip, r5, r2
   d70e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d70e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d70ea:	f000 80e2 	beq.w	d72b2 <__adddf3+0x1ee>
   d70ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d70f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d70f6:	bfb8      	it	lt
   d70f8:	426d      	neglt	r5, r5
   d70fa:	dd0c      	ble.n	d7116 <__adddf3+0x52>
   d70fc:	442c      	add	r4, r5
   d70fe:	ea80 0202 	eor.w	r2, r0, r2
   d7102:	ea81 0303 	eor.w	r3, r1, r3
   d7106:	ea82 0000 	eor.w	r0, r2, r0
   d710a:	ea83 0101 	eor.w	r1, r3, r1
   d710e:	ea80 0202 	eor.w	r2, r0, r2
   d7112:	ea81 0303 	eor.w	r3, r1, r3
   d7116:	2d36      	cmp	r5, #54	; 0x36
   d7118:	bf88      	it	hi
   d711a:	bd30      	pophi	{r4, r5, pc}
   d711c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7120:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7124:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7128:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d712c:	d002      	beq.n	d7134 <__adddf3+0x70>
   d712e:	4240      	negs	r0, r0
   d7130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7134:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7138:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d713c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7140:	d002      	beq.n	d7148 <__adddf3+0x84>
   d7142:	4252      	negs	r2, r2
   d7144:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7148:	ea94 0f05 	teq	r4, r5
   d714c:	f000 80a7 	beq.w	d729e <__adddf3+0x1da>
   d7150:	f1a4 0401 	sub.w	r4, r4, #1
   d7154:	f1d5 0e20 	rsbs	lr, r5, #32
   d7158:	db0d      	blt.n	d7176 <__adddf3+0xb2>
   d715a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d715e:	fa22 f205 	lsr.w	r2, r2, r5
   d7162:	1880      	adds	r0, r0, r2
   d7164:	f141 0100 	adc.w	r1, r1, #0
   d7168:	fa03 f20e 	lsl.w	r2, r3, lr
   d716c:	1880      	adds	r0, r0, r2
   d716e:	fa43 f305 	asr.w	r3, r3, r5
   d7172:	4159      	adcs	r1, r3
   d7174:	e00e      	b.n	d7194 <__adddf3+0xd0>
   d7176:	f1a5 0520 	sub.w	r5, r5, #32
   d717a:	f10e 0e20 	add.w	lr, lr, #32
   d717e:	2a01      	cmp	r2, #1
   d7180:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7184:	bf28      	it	cs
   d7186:	f04c 0c02 	orrcs.w	ip, ip, #2
   d718a:	fa43 f305 	asr.w	r3, r3, r5
   d718e:	18c0      	adds	r0, r0, r3
   d7190:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7194:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7198:	d507      	bpl.n	d71aa <__adddf3+0xe6>
   d719a:	f04f 0e00 	mov.w	lr, #0
   d719e:	f1dc 0c00 	rsbs	ip, ip, #0
   d71a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d71a6:	eb6e 0101 	sbc.w	r1, lr, r1
   d71aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d71ae:	d31b      	bcc.n	d71e8 <__adddf3+0x124>
   d71b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d71b4:	d30c      	bcc.n	d71d0 <__adddf3+0x10c>
   d71b6:	0849      	lsrs	r1, r1, #1
   d71b8:	ea5f 0030 	movs.w	r0, r0, rrx
   d71bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d71c0:	f104 0401 	add.w	r4, r4, #1
   d71c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d71c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d71cc:	f080 809a 	bcs.w	d7304 <__adddf3+0x240>
   d71d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d71d4:	bf08      	it	eq
   d71d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d71da:	f150 0000 	adcs.w	r0, r0, #0
   d71de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d71e2:	ea41 0105 	orr.w	r1, r1, r5
   d71e6:	bd30      	pop	{r4, r5, pc}
   d71e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d71ec:	4140      	adcs	r0, r0
   d71ee:	eb41 0101 	adc.w	r1, r1, r1
   d71f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d71f6:	f1a4 0401 	sub.w	r4, r4, #1
   d71fa:	d1e9      	bne.n	d71d0 <__adddf3+0x10c>
   d71fc:	f091 0f00 	teq	r1, #0
   d7200:	bf04      	itt	eq
   d7202:	4601      	moveq	r1, r0
   d7204:	2000      	moveq	r0, #0
   d7206:	fab1 f381 	clz	r3, r1
   d720a:	bf08      	it	eq
   d720c:	3320      	addeq	r3, #32
   d720e:	f1a3 030b 	sub.w	r3, r3, #11
   d7212:	f1b3 0220 	subs.w	r2, r3, #32
   d7216:	da0c      	bge.n	d7232 <__adddf3+0x16e>
   d7218:	320c      	adds	r2, #12
   d721a:	dd08      	ble.n	d722e <__adddf3+0x16a>
   d721c:	f102 0c14 	add.w	ip, r2, #20
   d7220:	f1c2 020c 	rsb	r2, r2, #12
   d7224:	fa01 f00c 	lsl.w	r0, r1, ip
   d7228:	fa21 f102 	lsr.w	r1, r1, r2
   d722c:	e00c      	b.n	d7248 <__adddf3+0x184>
   d722e:	f102 0214 	add.w	r2, r2, #20
   d7232:	bfd8      	it	le
   d7234:	f1c2 0c20 	rsble	ip, r2, #32
   d7238:	fa01 f102 	lsl.w	r1, r1, r2
   d723c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7240:	bfdc      	itt	le
   d7242:	ea41 010c 	orrle.w	r1, r1, ip
   d7246:	4090      	lslle	r0, r2
   d7248:	1ae4      	subs	r4, r4, r3
   d724a:	bfa2      	ittt	ge
   d724c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7250:	4329      	orrge	r1, r5
   d7252:	bd30      	popge	{r4, r5, pc}
   d7254:	ea6f 0404 	mvn.w	r4, r4
   d7258:	3c1f      	subs	r4, #31
   d725a:	da1c      	bge.n	d7296 <__adddf3+0x1d2>
   d725c:	340c      	adds	r4, #12
   d725e:	dc0e      	bgt.n	d727e <__adddf3+0x1ba>
   d7260:	f104 0414 	add.w	r4, r4, #20
   d7264:	f1c4 0220 	rsb	r2, r4, #32
   d7268:	fa20 f004 	lsr.w	r0, r0, r4
   d726c:	fa01 f302 	lsl.w	r3, r1, r2
   d7270:	ea40 0003 	orr.w	r0, r0, r3
   d7274:	fa21 f304 	lsr.w	r3, r1, r4
   d7278:	ea45 0103 	orr.w	r1, r5, r3
   d727c:	bd30      	pop	{r4, r5, pc}
   d727e:	f1c4 040c 	rsb	r4, r4, #12
   d7282:	f1c4 0220 	rsb	r2, r4, #32
   d7286:	fa20 f002 	lsr.w	r0, r0, r2
   d728a:	fa01 f304 	lsl.w	r3, r1, r4
   d728e:	ea40 0003 	orr.w	r0, r0, r3
   d7292:	4629      	mov	r1, r5
   d7294:	bd30      	pop	{r4, r5, pc}
   d7296:	fa21 f004 	lsr.w	r0, r1, r4
   d729a:	4629      	mov	r1, r5
   d729c:	bd30      	pop	{r4, r5, pc}
   d729e:	f094 0f00 	teq	r4, #0
   d72a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d72a6:	bf06      	itte	eq
   d72a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d72ac:	3401      	addeq	r4, #1
   d72ae:	3d01      	subne	r5, #1
   d72b0:	e74e      	b.n	d7150 <__adddf3+0x8c>
   d72b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72b6:	bf18      	it	ne
   d72b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72bc:	d029      	beq.n	d7312 <__adddf3+0x24e>
   d72be:	ea94 0f05 	teq	r4, r5
   d72c2:	bf08      	it	eq
   d72c4:	ea90 0f02 	teqeq	r0, r2
   d72c8:	d005      	beq.n	d72d6 <__adddf3+0x212>
   d72ca:	ea54 0c00 	orrs.w	ip, r4, r0
   d72ce:	bf04      	itt	eq
   d72d0:	4619      	moveq	r1, r3
   d72d2:	4610      	moveq	r0, r2
   d72d4:	bd30      	pop	{r4, r5, pc}
   d72d6:	ea91 0f03 	teq	r1, r3
   d72da:	bf1e      	ittt	ne
   d72dc:	2100      	movne	r1, #0
   d72de:	2000      	movne	r0, #0
   d72e0:	bd30      	popne	{r4, r5, pc}
   d72e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d72e6:	d105      	bne.n	d72f4 <__adddf3+0x230>
   d72e8:	0040      	lsls	r0, r0, #1
   d72ea:	4149      	adcs	r1, r1
   d72ec:	bf28      	it	cs
   d72ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d72f2:	bd30      	pop	{r4, r5, pc}
   d72f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d72f8:	bf3c      	itt	cc
   d72fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d72fe:	bd30      	popcc	{r4, r5, pc}
   d7300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7304:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d730c:	f04f 0000 	mov.w	r0, #0
   d7310:	bd30      	pop	{r4, r5, pc}
   d7312:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7316:	bf1a      	itte	ne
   d7318:	4619      	movne	r1, r3
   d731a:	4610      	movne	r0, r2
   d731c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7320:	bf1c      	itt	ne
   d7322:	460b      	movne	r3, r1
   d7324:	4602      	movne	r2, r0
   d7326:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d732a:	bf06      	itte	eq
   d732c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7330:	ea91 0f03 	teqeq	r1, r3
   d7334:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7338:	bd30      	pop	{r4, r5, pc}
   d733a:	bf00      	nop

000d733c <__aeabi_ui2d>:
   d733c:	f090 0f00 	teq	r0, #0
   d7340:	bf04      	itt	eq
   d7342:	2100      	moveq	r1, #0
   d7344:	4770      	bxeq	lr
   d7346:	b530      	push	{r4, r5, lr}
   d7348:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d734c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7350:	f04f 0500 	mov.w	r5, #0
   d7354:	f04f 0100 	mov.w	r1, #0
   d7358:	e750      	b.n	d71fc <__adddf3+0x138>
   d735a:	bf00      	nop

000d735c <__aeabi_i2d>:
   d735c:	f090 0f00 	teq	r0, #0
   d7360:	bf04      	itt	eq
   d7362:	2100      	moveq	r1, #0
   d7364:	4770      	bxeq	lr
   d7366:	b530      	push	{r4, r5, lr}
   d7368:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d736c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7370:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7374:	bf48      	it	mi
   d7376:	4240      	negmi	r0, r0
   d7378:	f04f 0100 	mov.w	r1, #0
   d737c:	e73e      	b.n	d71fc <__adddf3+0x138>
   d737e:	bf00      	nop

000d7380 <__aeabi_f2d>:
   d7380:	0042      	lsls	r2, r0, #1
   d7382:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7386:	ea4f 0131 	mov.w	r1, r1, rrx
   d738a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d738e:	bf1f      	itttt	ne
   d7390:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7394:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7398:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d739c:	4770      	bxne	lr
   d739e:	f092 0f00 	teq	r2, #0
   d73a2:	bf14      	ite	ne
   d73a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d73a8:	4770      	bxeq	lr
   d73aa:	b530      	push	{r4, r5, lr}
   d73ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   d73b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73b8:	e720      	b.n	d71fc <__adddf3+0x138>
   d73ba:	bf00      	nop

000d73bc <__aeabi_ul2d>:
   d73bc:	ea50 0201 	orrs.w	r2, r0, r1
   d73c0:	bf08      	it	eq
   d73c2:	4770      	bxeq	lr
   d73c4:	b530      	push	{r4, r5, lr}
   d73c6:	f04f 0500 	mov.w	r5, #0
   d73ca:	e00a      	b.n	d73e2 <__aeabi_l2d+0x16>

000d73cc <__aeabi_l2d>:
   d73cc:	ea50 0201 	orrs.w	r2, r0, r1
   d73d0:	bf08      	it	eq
   d73d2:	4770      	bxeq	lr
   d73d4:	b530      	push	{r4, r5, lr}
   d73d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d73da:	d502      	bpl.n	d73e2 <__aeabi_l2d+0x16>
   d73dc:	4240      	negs	r0, r0
   d73de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d73e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d73ee:	f43f aedc 	beq.w	d71aa <__adddf3+0xe6>
   d73f2:	f04f 0203 	mov.w	r2, #3
   d73f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d73fa:	bf18      	it	ne
   d73fc:	3203      	addne	r2, #3
   d73fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7402:	bf18      	it	ne
   d7404:	3203      	addne	r2, #3
   d7406:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d740a:	f1c2 0320 	rsb	r3, r2, #32
   d740e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7412:	fa20 f002 	lsr.w	r0, r0, r2
   d7416:	fa01 fe03 	lsl.w	lr, r1, r3
   d741a:	ea40 000e 	orr.w	r0, r0, lr
   d741e:	fa21 f102 	lsr.w	r1, r1, r2
   d7422:	4414      	add	r4, r2
   d7424:	e6c1      	b.n	d71aa <__adddf3+0xe6>
   d7426:	bf00      	nop

000d7428 <asctime>:
   d7428:	4b09      	ldr	r3, [pc, #36]	; (d7450 <asctime+0x28>)
   d742a:	b570      	push	{r4, r5, r6, lr}
   d742c:	681c      	ldr	r4, [r3, #0]
   d742e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d7430:	4606      	mov	r6, r0
   d7432:	b93d      	cbnz	r5, d7444 <asctime+0x1c>
   d7434:	201a      	movs	r0, #26
   d7436:	f7fe f95d 	bl	d56f4 <malloc>
   d743a:	221a      	movs	r2, #26
   d743c:	6420      	str	r0, [r4, #64]	; 0x40
   d743e:	4629      	mov	r1, r5
   d7440:	f000 f943 	bl	d76ca <memset>
   d7444:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d7446:	4630      	mov	r0, r6
   d7448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d744c:	f000 b802 	b.w	d7454 <asctime_r>
   d7450:	2003e15c 	.word	0x2003e15c

000d7454 <asctime_r>:
   d7454:	b510      	push	{r4, lr}
   d7456:	460c      	mov	r4, r1
   d7458:	6941      	ldr	r1, [r0, #20]
   d745a:	6903      	ldr	r3, [r0, #16]
   d745c:	6982      	ldr	r2, [r0, #24]
   d745e:	b086      	sub	sp, #24
   d7460:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7464:	9104      	str	r1, [sp, #16]
   d7466:	6801      	ldr	r1, [r0, #0]
   d7468:	9103      	str	r1, [sp, #12]
   d746a:	6841      	ldr	r1, [r0, #4]
   d746c:	9102      	str	r1, [sp, #8]
   d746e:	6881      	ldr	r1, [r0, #8]
   d7470:	9101      	str	r1, [sp, #4]
   d7472:	68c1      	ldr	r1, [r0, #12]
   d7474:	9100      	str	r1, [sp, #0]
   d7476:	4907      	ldr	r1, [pc, #28]	; (d7494 <asctime_r+0x40>)
   d7478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d747c:	440b      	add	r3, r1
   d747e:	4906      	ldr	r1, [pc, #24]	; (d7498 <asctime_r+0x44>)
   d7480:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7484:	440a      	add	r2, r1
   d7486:	4620      	mov	r0, r4
   d7488:	4904      	ldr	r1, [pc, #16]	; (d749c <asctime_r+0x48>)
   d748a:	f7fe f94b 	bl	d5724 <siprintf>
   d748e:	4620      	mov	r0, r4
   d7490:	b006      	add	sp, #24
   d7492:	bd10      	pop	{r4, pc}
   d7494:	000d8861 	.word	0x000d8861
   d7498:	000d884c 	.word	0x000d884c
   d749c:	000d8885 	.word	0x000d8885

000d74a0 <atoi>:
   d74a0:	220a      	movs	r2, #10
   d74a2:	2100      	movs	r1, #0
   d74a4:	f000 ba60 	b.w	d7968 <strtol>

000d74a8 <__cxa_atexit>:
   d74a8:	b510      	push	{r4, lr}
   d74aa:	4c05      	ldr	r4, [pc, #20]	; (d74c0 <__cxa_atexit+0x18>)
   d74ac:	4613      	mov	r3, r2
   d74ae:	b12c      	cbz	r4, d74bc <__cxa_atexit+0x14>
   d74b0:	460a      	mov	r2, r1
   d74b2:	4601      	mov	r1, r0
   d74b4:	2002      	movs	r0, #2
   d74b6:	f3af 8000 	nop.w
   d74ba:	bd10      	pop	{r4, pc}
   d74bc:	4620      	mov	r0, r4
   d74be:	bd10      	pop	{r4, pc}
   d74c0:	00000000 	.word	0x00000000

000d74c4 <localtime>:
   d74c4:	b538      	push	{r3, r4, r5, lr}
   d74c6:	4b07      	ldr	r3, [pc, #28]	; (d74e4 <localtime+0x20>)
   d74c8:	681c      	ldr	r4, [r3, #0]
   d74ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d74cc:	4605      	mov	r5, r0
   d74ce:	b91b      	cbnz	r3, d74d8 <localtime+0x14>
   d74d0:	2024      	movs	r0, #36	; 0x24
   d74d2:	f7fe f90f 	bl	d56f4 <malloc>
   d74d6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d74d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d74da:	4628      	mov	r0, r5
   d74dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d74e0:	f000 b802 	b.w	d74e8 <localtime_r>
   d74e4:	2003e15c 	.word	0x2003e15c

000d74e8 <localtime_r>:
   d74e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74ec:	460c      	mov	r4, r1
   d74ee:	4680      	mov	r8, r0
   d74f0:	f000 fd40 	bl	d7f74 <__gettzinfo>
   d74f4:	4621      	mov	r1, r4
   d74f6:	4607      	mov	r7, r0
   d74f8:	4640      	mov	r0, r8
   d74fa:	f000 fd3f 	bl	d7f7c <gmtime_r>
   d74fe:	6946      	ldr	r6, [r0, #20]
   d7500:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7504:	07b3      	lsls	r3, r6, #30
   d7506:	4604      	mov	r4, r0
   d7508:	d105      	bne.n	d7516 <localtime_r+0x2e>
   d750a:	2264      	movs	r2, #100	; 0x64
   d750c:	fb96 f3f2 	sdiv	r3, r6, r2
   d7510:	fb02 6313 	mls	r3, r2, r3, r6
   d7514:	b94b      	cbnz	r3, d752a <localtime_r+0x42>
   d7516:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d751a:	fb96 f3f5 	sdiv	r3, r6, r5
   d751e:	fb05 6513 	mls	r5, r5, r3, r6
   d7522:	fab5 f385 	clz	r3, r5
   d7526:	095b      	lsrs	r3, r3, #5
   d7528:	e000      	b.n	d752c <localtime_r+0x44>
   d752a:	2301      	movs	r3, #1
   d752c:	4a5f      	ldr	r2, [pc, #380]	; (d76ac <localtime_r+0x1c4>)
   d752e:	2530      	movs	r5, #48	; 0x30
   d7530:	fb05 2503 	mla	r5, r5, r3, r2
   d7534:	f000 fb52 	bl	d7bdc <__tz_lock>
   d7538:	f000 fb52 	bl	d7be0 <_tzset_unlocked>
   d753c:	4b5c      	ldr	r3, [pc, #368]	; (d76b0 <localtime_r+0x1c8>)
   d753e:	681b      	ldr	r3, [r3, #0]
   d7540:	b1f3      	cbz	r3, d7580 <localtime_r+0x98>
   d7542:	687b      	ldr	r3, [r7, #4]
   d7544:	429e      	cmp	r6, r3
   d7546:	d105      	bne.n	d7554 <localtime_r+0x6c>
   d7548:	6839      	ldr	r1, [r7, #0]
   d754a:	f8d8 3000 	ldr.w	r3, [r8]
   d754e:	69fa      	ldr	r2, [r7, #28]
   d7550:	b941      	cbnz	r1, d7564 <localtime_r+0x7c>
   d7552:	e00a      	b.n	d756a <localtime_r+0x82>
   d7554:	4630      	mov	r0, r6
   d7556:	f000 fa99 	bl	d7a8c <__tzcalc_limits>
   d755a:	2800      	cmp	r0, #0
   d755c:	d1f4      	bne.n	d7548 <localtime_r+0x60>
   d755e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7562:	e00d      	b.n	d7580 <localtime_r+0x98>
   d7564:	4293      	cmp	r3, r2
   d7566:	db08      	blt.n	d757a <localtime_r+0x92>
   d7568:	e001      	b.n	d756e <localtime_r+0x86>
   d756a:	4293      	cmp	r3, r2
   d756c:	da07      	bge.n	d757e <localtime_r+0x96>
   d756e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7570:	4293      	cmp	r3, r2
   d7572:	bfac      	ite	ge
   d7574:	2300      	movge	r3, #0
   d7576:	2301      	movlt	r3, #1
   d7578:	e002      	b.n	d7580 <localtime_r+0x98>
   d757a:	2300      	movs	r3, #0
   d757c:	e000      	b.n	d7580 <localtime_r+0x98>
   d757e:	2301      	movs	r3, #1
   d7580:	6223      	str	r3, [r4, #32]
   d7582:	6a23      	ldr	r3, [r4, #32]
   d7584:	2b01      	cmp	r3, #1
   d7586:	bf0c      	ite	eq
   d7588:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d758a:	6a39      	ldrne	r1, [r7, #32]
   d758c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7590:	203c      	movs	r0, #60	; 0x3c
   d7592:	fb91 f6f3 	sdiv	r6, r1, r3
   d7596:	fb03 1316 	mls	r3, r3, r6, r1
   d759a:	6861      	ldr	r1, [r4, #4]
   d759c:	fb93 f2f0 	sdiv	r2, r3, r0
   d75a0:	fb00 3012 	mls	r0, r0, r2, r3
   d75a4:	6823      	ldr	r3, [r4, #0]
   d75a6:	1a89      	subs	r1, r1, r2
   d75a8:	68a2      	ldr	r2, [r4, #8]
   d75aa:	6061      	str	r1, [r4, #4]
   d75ac:	1a1b      	subs	r3, r3, r0
   d75ae:	1b92      	subs	r2, r2, r6
   d75b0:	2b3b      	cmp	r3, #59	; 0x3b
   d75b2:	6023      	str	r3, [r4, #0]
   d75b4:	60a2      	str	r2, [r4, #8]
   d75b6:	dd03      	ble.n	d75c0 <localtime_r+0xd8>
   d75b8:	3101      	adds	r1, #1
   d75ba:	6061      	str	r1, [r4, #4]
   d75bc:	3b3c      	subs	r3, #60	; 0x3c
   d75be:	e004      	b.n	d75ca <localtime_r+0xe2>
   d75c0:	2b00      	cmp	r3, #0
   d75c2:	da03      	bge.n	d75cc <localtime_r+0xe4>
   d75c4:	3901      	subs	r1, #1
   d75c6:	6061      	str	r1, [r4, #4]
   d75c8:	333c      	adds	r3, #60	; 0x3c
   d75ca:	6023      	str	r3, [r4, #0]
   d75cc:	6863      	ldr	r3, [r4, #4]
   d75ce:	2b3b      	cmp	r3, #59	; 0x3b
   d75d0:	dd03      	ble.n	d75da <localtime_r+0xf2>
   d75d2:	3201      	adds	r2, #1
   d75d4:	60a2      	str	r2, [r4, #8]
   d75d6:	3b3c      	subs	r3, #60	; 0x3c
   d75d8:	e004      	b.n	d75e4 <localtime_r+0xfc>
   d75da:	2b00      	cmp	r3, #0
   d75dc:	da03      	bge.n	d75e6 <localtime_r+0xfe>
   d75de:	3a01      	subs	r2, #1
   d75e0:	60a2      	str	r2, [r4, #8]
   d75e2:	333c      	adds	r3, #60	; 0x3c
   d75e4:	6063      	str	r3, [r4, #4]
   d75e6:	68a3      	ldr	r3, [r4, #8]
   d75e8:	2b17      	cmp	r3, #23
   d75ea:	dd22      	ble.n	d7632 <localtime_r+0x14a>
   d75ec:	69e2      	ldr	r2, [r4, #28]
   d75ee:	3201      	adds	r2, #1
   d75f0:	61e2      	str	r2, [r4, #28]
   d75f2:	69a2      	ldr	r2, [r4, #24]
   d75f4:	3201      	adds	r2, #1
   d75f6:	2a06      	cmp	r2, #6
   d75f8:	bfc8      	it	gt
   d75fa:	2200      	movgt	r2, #0
   d75fc:	61a2      	str	r2, [r4, #24]
   d75fe:	68e2      	ldr	r2, [r4, #12]
   d7600:	3b18      	subs	r3, #24
   d7602:	3201      	adds	r2, #1
   d7604:	60a3      	str	r3, [r4, #8]
   d7606:	6923      	ldr	r3, [r4, #16]
   d7608:	60e2      	str	r2, [r4, #12]
   d760a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d760e:	428a      	cmp	r2, r1
   d7610:	dd46      	ble.n	d76a0 <localtime_r+0x1b8>
   d7612:	3301      	adds	r3, #1
   d7614:	2b0c      	cmp	r3, #12
   d7616:	bf0c      	ite	eq
   d7618:	6963      	ldreq	r3, [r4, #20]
   d761a:	6123      	strne	r3, [r4, #16]
   d761c:	eba2 0201 	sub.w	r2, r2, r1
   d7620:	60e2      	str	r2, [r4, #12]
   d7622:	bf01      	itttt	eq
   d7624:	3301      	addeq	r3, #1
   d7626:	2200      	moveq	r2, #0
   d7628:	6122      	streq	r2, [r4, #16]
   d762a:	6163      	streq	r3, [r4, #20]
   d762c:	bf08      	it	eq
   d762e:	61e2      	streq	r2, [r4, #28]
   d7630:	e036      	b.n	d76a0 <localtime_r+0x1b8>
   d7632:	2b00      	cmp	r3, #0
   d7634:	da34      	bge.n	d76a0 <localtime_r+0x1b8>
   d7636:	69e2      	ldr	r2, [r4, #28]
   d7638:	3a01      	subs	r2, #1
   d763a:	61e2      	str	r2, [r4, #28]
   d763c:	69a2      	ldr	r2, [r4, #24]
   d763e:	3a01      	subs	r2, #1
   d7640:	bf48      	it	mi
   d7642:	2206      	movmi	r2, #6
   d7644:	61a2      	str	r2, [r4, #24]
   d7646:	68e2      	ldr	r2, [r4, #12]
   d7648:	3318      	adds	r3, #24
   d764a:	3a01      	subs	r2, #1
   d764c:	60e2      	str	r2, [r4, #12]
   d764e:	60a3      	str	r3, [r4, #8]
   d7650:	bb32      	cbnz	r2, d76a0 <localtime_r+0x1b8>
   d7652:	6923      	ldr	r3, [r4, #16]
   d7654:	3b01      	subs	r3, #1
   d7656:	d401      	bmi.n	d765c <localtime_r+0x174>
   d7658:	6123      	str	r3, [r4, #16]
   d765a:	e01d      	b.n	d7698 <localtime_r+0x1b0>
   d765c:	230b      	movs	r3, #11
   d765e:	6123      	str	r3, [r4, #16]
   d7660:	6963      	ldr	r3, [r4, #20]
   d7662:	1e5a      	subs	r2, r3, #1
   d7664:	f012 0f03 	tst.w	r2, #3
   d7668:	6162      	str	r2, [r4, #20]
   d766a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d766e:	d105      	bne.n	d767c <localtime_r+0x194>
   d7670:	2164      	movs	r1, #100	; 0x64
   d7672:	fb93 f2f1 	sdiv	r2, r3, r1
   d7676:	fb01 3212 	mls	r2, r1, r2, r3
   d767a:	b94a      	cbnz	r2, d7690 <localtime_r+0x1a8>
   d767c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7680:	fb93 f2f1 	sdiv	r2, r3, r1
   d7684:	fb01 3312 	mls	r3, r1, r2, r3
   d7688:	fab3 f383 	clz	r3, r3
   d768c:	095b      	lsrs	r3, r3, #5
   d768e:	e000      	b.n	d7692 <localtime_r+0x1aa>
   d7690:	2301      	movs	r3, #1
   d7692:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d7696:	61e3      	str	r3, [r4, #28]
   d7698:	6923      	ldr	r3, [r4, #16]
   d769a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d769e:	60e3      	str	r3, [r4, #12]
   d76a0:	f000 fa9d 	bl	d7bde <__tz_unlock>
   d76a4:	4620      	mov	r0, r4
   d76a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d76aa:	bf00      	nop
   d76ac:	000d8a08 	.word	0x000d8a08
   d76b0:	2003e7e4 	.word	0x2003e7e4

000d76b4 <memcpy>:
   d76b4:	b510      	push	{r4, lr}
   d76b6:	1e43      	subs	r3, r0, #1
   d76b8:	440a      	add	r2, r1
   d76ba:	4291      	cmp	r1, r2
   d76bc:	d004      	beq.n	d76c8 <memcpy+0x14>
   d76be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d76c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d76c6:	e7f8      	b.n	d76ba <memcpy+0x6>
   d76c8:	bd10      	pop	{r4, pc}

000d76ca <memset>:
   d76ca:	4402      	add	r2, r0
   d76cc:	4603      	mov	r3, r0
   d76ce:	4293      	cmp	r3, r2
   d76d0:	d002      	beq.n	d76d8 <memset+0xe>
   d76d2:	f803 1b01 	strb.w	r1, [r3], #1
   d76d6:	e7fa      	b.n	d76ce <memset+0x4>
   d76d8:	4770      	bx	lr
	...

000d76dc <srand>:
   d76dc:	b538      	push	{r3, r4, r5, lr}
   d76de:	4b12      	ldr	r3, [pc, #72]	; (d7728 <srand+0x4c>)
   d76e0:	681c      	ldr	r4, [r3, #0]
   d76e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d76e4:	4605      	mov	r5, r0
   d76e6:	b9d3      	cbnz	r3, d771e <srand+0x42>
   d76e8:	2018      	movs	r0, #24
   d76ea:	f7fe f803 	bl	d56f4 <malloc>
   d76ee:	f243 330e 	movw	r3, #13070	; 0x330e
   d76f2:	63a0      	str	r0, [r4, #56]	; 0x38
   d76f4:	8003      	strh	r3, [r0, #0]
   d76f6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d76fa:	8043      	strh	r3, [r0, #2]
   d76fc:	f241 2334 	movw	r3, #4660	; 0x1234
   d7700:	8083      	strh	r3, [r0, #4]
   d7702:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7706:	80c3      	strh	r3, [r0, #6]
   d7708:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d770c:	8103      	strh	r3, [r0, #8]
   d770e:	2305      	movs	r3, #5
   d7710:	8143      	strh	r3, [r0, #10]
   d7712:	230b      	movs	r3, #11
   d7714:	8183      	strh	r3, [r0, #12]
   d7716:	2201      	movs	r2, #1
   d7718:	2300      	movs	r3, #0
   d771a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d771e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7720:	2200      	movs	r2, #0
   d7722:	611d      	str	r5, [r3, #16]
   d7724:	615a      	str	r2, [r3, #20]
   d7726:	bd38      	pop	{r3, r4, r5, pc}
   d7728:	2003e15c 	.word	0x2003e15c

000d772c <rand>:
   d772c:	4b19      	ldr	r3, [pc, #100]	; (d7794 <rand+0x68>)
   d772e:	b510      	push	{r4, lr}
   d7730:	681c      	ldr	r4, [r3, #0]
   d7732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7734:	b9d3      	cbnz	r3, d776c <rand+0x40>
   d7736:	2018      	movs	r0, #24
   d7738:	f7fd ffdc 	bl	d56f4 <malloc>
   d773c:	f243 330e 	movw	r3, #13070	; 0x330e
   d7740:	63a0      	str	r0, [r4, #56]	; 0x38
   d7742:	8003      	strh	r3, [r0, #0]
   d7744:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7748:	8043      	strh	r3, [r0, #2]
   d774a:	f241 2334 	movw	r3, #4660	; 0x1234
   d774e:	8083      	strh	r3, [r0, #4]
   d7750:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7754:	80c3      	strh	r3, [r0, #6]
   d7756:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d775a:	8103      	strh	r3, [r0, #8]
   d775c:	2305      	movs	r3, #5
   d775e:	8143      	strh	r3, [r0, #10]
   d7760:	230b      	movs	r3, #11
   d7762:	8183      	strh	r3, [r0, #12]
   d7764:	2201      	movs	r2, #1
   d7766:	2300      	movs	r3, #0
   d7768:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d776c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d776e:	4c0a      	ldr	r4, [pc, #40]	; (d7798 <rand+0x6c>)
   d7770:	690b      	ldr	r3, [r1, #16]
   d7772:	6948      	ldr	r0, [r1, #20]
   d7774:	4a09      	ldr	r2, [pc, #36]	; (d779c <rand+0x70>)
   d7776:	435c      	muls	r4, r3
   d7778:	fb02 4000 	mla	r0, r2, r0, r4
   d777c:	fba3 2302 	umull	r2, r3, r3, r2
   d7780:	3201      	adds	r2, #1
   d7782:	4403      	add	r3, r0
   d7784:	f143 0300 	adc.w	r3, r3, #0
   d7788:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d778c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7790:	bd10      	pop	{r4, pc}
   d7792:	bf00      	nop
   d7794:	2003e15c 	.word	0x2003e15c
   d7798:	5851f42d 	.word	0x5851f42d
   d779c:	4c957f2d 	.word	0x4c957f2d

000d77a0 <strcmp>:
   d77a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d77a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d77a8:	2a01      	cmp	r2, #1
   d77aa:	bf28      	it	cs
   d77ac:	429a      	cmpcs	r2, r3
   d77ae:	d0f7      	beq.n	d77a0 <strcmp>
   d77b0:	1ad0      	subs	r0, r2, r3
   d77b2:	4770      	bx	lr

000d77b4 <strcpy>:
   d77b4:	4603      	mov	r3, r0
   d77b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d77ba:	f803 2b01 	strb.w	r2, [r3], #1
   d77be:	2a00      	cmp	r2, #0
   d77c0:	d1f9      	bne.n	d77b6 <strcpy+0x2>
   d77c2:	4770      	bx	lr

000d77c4 <strdup>:
   d77c4:	4b02      	ldr	r3, [pc, #8]	; (d77d0 <strdup+0xc>)
   d77c6:	4601      	mov	r1, r0
   d77c8:	6818      	ldr	r0, [r3, #0]
   d77ca:	f000 b803 	b.w	d77d4 <_strdup_r>
   d77ce:	bf00      	nop
   d77d0:	2003e15c 	.word	0x2003e15c

000d77d4 <_strdup_r>:
   d77d4:	b570      	push	{r4, r5, r6, lr}
   d77d6:	4606      	mov	r6, r0
   d77d8:	4608      	mov	r0, r1
   d77da:	460c      	mov	r4, r1
   d77dc:	f000 f80d 	bl	d77fa <strlen>
   d77e0:	1c45      	adds	r5, r0, #1
   d77e2:	4629      	mov	r1, r5
   d77e4:	4630      	mov	r0, r6
   d77e6:	f7fd ffbd 	bl	d5764 <_malloc_r>
   d77ea:	4606      	mov	r6, r0
   d77ec:	b118      	cbz	r0, d77f6 <_strdup_r+0x22>
   d77ee:	462a      	mov	r2, r5
   d77f0:	4621      	mov	r1, r4
   d77f2:	f7ff ff5f 	bl	d76b4 <memcpy>
   d77f6:	4630      	mov	r0, r6
   d77f8:	bd70      	pop	{r4, r5, r6, pc}

000d77fa <strlen>:
   d77fa:	4603      	mov	r3, r0
   d77fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7800:	2a00      	cmp	r2, #0
   d7802:	d1fb      	bne.n	d77fc <strlen+0x2>
   d7804:	1a18      	subs	r0, r3, r0
   d7806:	3801      	subs	r0, #1
   d7808:	4770      	bx	lr

000d780a <strncmp>:
   d780a:	b530      	push	{r4, r5, lr}
   d780c:	b182      	cbz	r2, d7830 <strncmp+0x26>
   d780e:	1e45      	subs	r5, r0, #1
   d7810:	3901      	subs	r1, #1
   d7812:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7816:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d781a:	42a3      	cmp	r3, r4
   d781c:	d106      	bne.n	d782c <strncmp+0x22>
   d781e:	43ec      	mvns	r4, r5
   d7820:	4414      	add	r4, r2
   d7822:	42e0      	cmn	r0, r4
   d7824:	d001      	beq.n	d782a <strncmp+0x20>
   d7826:	2b00      	cmp	r3, #0
   d7828:	d1f3      	bne.n	d7812 <strncmp+0x8>
   d782a:	461c      	mov	r4, r3
   d782c:	1b18      	subs	r0, r3, r4
   d782e:	bd30      	pop	{r4, r5, pc}
   d7830:	4610      	mov	r0, r2
   d7832:	bd30      	pop	{r4, r5, pc}

000d7834 <strncpy>:
   d7834:	b510      	push	{r4, lr}
   d7836:	4603      	mov	r3, r0
   d7838:	b142      	cbz	r2, d784c <strncpy+0x18>
   d783a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d783e:	f803 4b01 	strb.w	r4, [r3], #1
   d7842:	3a01      	subs	r2, #1
   d7844:	2c00      	cmp	r4, #0
   d7846:	d1f7      	bne.n	d7838 <strncpy+0x4>
   d7848:	441a      	add	r2, r3
   d784a:	e000      	b.n	d784e <strncpy+0x1a>
   d784c:	bd10      	pop	{r4, pc}
   d784e:	4293      	cmp	r3, r2
   d7850:	d002      	beq.n	d7858 <strncpy+0x24>
   d7852:	f803 4b01 	strb.w	r4, [r3], #1
   d7856:	e7fa      	b.n	d784e <strncpy+0x1a>
   d7858:	bd10      	pop	{r4, pc}
	...

000d785c <_strtol_r>:
   d785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7860:	4680      	mov	r8, r0
   d7862:	4840      	ldr	r0, [pc, #256]	; (d7964 <_strtol_r+0x108>)
   d7864:	f8d0 9000 	ldr.w	r9, [r0]
   d7868:	460f      	mov	r7, r1
   d786a:	463d      	mov	r5, r7
   d786c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7870:	eb09 0004 	add.w	r0, r9, r4
   d7874:	7840      	ldrb	r0, [r0, #1]
   d7876:	f000 0008 	and.w	r0, r0, #8
   d787a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d787e:	b108      	cbz	r0, d7884 <_strtol_r+0x28>
   d7880:	462f      	mov	r7, r5
   d7882:	e7f2      	b.n	d786a <_strtol_r+0xe>
   d7884:	2c2d      	cmp	r4, #45	; 0x2d
   d7886:	d103      	bne.n	d7890 <_strtol_r+0x34>
   d7888:	1cbd      	adds	r5, r7, #2
   d788a:	787c      	ldrb	r4, [r7, #1]
   d788c:	2601      	movs	r6, #1
   d788e:	e003      	b.n	d7898 <_strtol_r+0x3c>
   d7890:	2c2b      	cmp	r4, #43	; 0x2b
   d7892:	bf04      	itt	eq
   d7894:	787c      	ldrbeq	r4, [r7, #1]
   d7896:	1cbd      	addeq	r5, r7, #2
   d7898:	b113      	cbz	r3, d78a0 <_strtol_r+0x44>
   d789a:	2b10      	cmp	r3, #16
   d789c:	d10a      	bne.n	d78b4 <_strtol_r+0x58>
   d789e:	e05b      	b.n	d7958 <_strtol_r+0xfc>
   d78a0:	2c30      	cmp	r4, #48	; 0x30
   d78a2:	d157      	bne.n	d7954 <_strtol_r+0xf8>
   d78a4:	7828      	ldrb	r0, [r5, #0]
   d78a6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d78aa:	2858      	cmp	r0, #88	; 0x58
   d78ac:	d14d      	bne.n	d794a <_strtol_r+0xee>
   d78ae:	786c      	ldrb	r4, [r5, #1]
   d78b0:	2310      	movs	r3, #16
   d78b2:	3502      	adds	r5, #2
   d78b4:	2e00      	cmp	r6, #0
   d78b6:	bf14      	ite	ne
   d78b8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d78bc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d78c0:	2700      	movs	r7, #0
   d78c2:	fbbc faf3 	udiv	sl, ip, r3
   d78c6:	4638      	mov	r0, r7
   d78c8:	fb03 cc1a 	mls	ip, r3, sl, ip
   d78cc:	eb09 0e04 	add.w	lr, r9, r4
   d78d0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d78d4:	f01e 0f04 	tst.w	lr, #4
   d78d8:	d001      	beq.n	d78de <_strtol_r+0x82>
   d78da:	3c30      	subs	r4, #48	; 0x30
   d78dc:	e00b      	b.n	d78f6 <_strtol_r+0x9a>
   d78de:	f01e 0e03 	ands.w	lr, lr, #3
   d78e2:	d01b      	beq.n	d791c <_strtol_r+0xc0>
   d78e4:	f1be 0f01 	cmp.w	lr, #1
   d78e8:	bf0c      	ite	eq
   d78ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d78ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d78f2:	ebce 0404 	rsb	r4, lr, r4
   d78f6:	42a3      	cmp	r3, r4
   d78f8:	dd10      	ble.n	d791c <_strtol_r+0xc0>
   d78fa:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d78fe:	d00a      	beq.n	d7916 <_strtol_r+0xba>
   d7900:	4550      	cmp	r0, sl
   d7902:	d806      	bhi.n	d7912 <_strtol_r+0xb6>
   d7904:	d101      	bne.n	d790a <_strtol_r+0xae>
   d7906:	4564      	cmp	r4, ip
   d7908:	dc03      	bgt.n	d7912 <_strtol_r+0xb6>
   d790a:	fb03 4000 	mla	r0, r3, r0, r4
   d790e:	2701      	movs	r7, #1
   d7910:	e001      	b.n	d7916 <_strtol_r+0xba>
   d7912:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7916:	f815 4b01 	ldrb.w	r4, [r5], #1
   d791a:	e7d7      	b.n	d78cc <_strtol_r+0x70>
   d791c:	1c7b      	adds	r3, r7, #1
   d791e:	d10c      	bne.n	d793a <_strtol_r+0xde>
   d7920:	2e00      	cmp	r6, #0
   d7922:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7926:	bf14      	ite	ne
   d7928:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d792c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7930:	f8c8 3000 	str.w	r3, [r8]
   d7934:	b92a      	cbnz	r2, d7942 <_strtol_r+0xe6>
   d7936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d793a:	b106      	cbz	r6, d793e <_strtol_r+0xe2>
   d793c:	4240      	negs	r0, r0
   d793e:	b172      	cbz	r2, d795e <_strtol_r+0x102>
   d7940:	b107      	cbz	r7, d7944 <_strtol_r+0xe8>
   d7942:	1e69      	subs	r1, r5, #1
   d7944:	6011      	str	r1, [r2, #0]
   d7946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d794a:	2430      	movs	r4, #48	; 0x30
   d794c:	2b00      	cmp	r3, #0
   d794e:	d1b1      	bne.n	d78b4 <_strtol_r+0x58>
   d7950:	2308      	movs	r3, #8
   d7952:	e7af      	b.n	d78b4 <_strtol_r+0x58>
   d7954:	230a      	movs	r3, #10
   d7956:	e7ad      	b.n	d78b4 <_strtol_r+0x58>
   d7958:	2c30      	cmp	r4, #48	; 0x30
   d795a:	d0a3      	beq.n	d78a4 <_strtol_r+0x48>
   d795c:	e7aa      	b.n	d78b4 <_strtol_r+0x58>
   d795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7962:	bf00      	nop
   d7964:	2003e0f8 	.word	0x2003e0f8

000d7968 <strtol>:
   d7968:	4613      	mov	r3, r2
   d796a:	460a      	mov	r2, r1
   d796c:	4601      	mov	r1, r0
   d796e:	4802      	ldr	r0, [pc, #8]	; (d7978 <strtol+0x10>)
   d7970:	6800      	ldr	r0, [r0, #0]
   d7972:	f7ff bf73 	b.w	d785c <_strtol_r>
   d7976:	bf00      	nop
   d7978:	2003e15c 	.word	0x2003e15c

000d797c <_strtoul_r>:
   d797c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7980:	4680      	mov	r8, r0
   d7982:	483c      	ldr	r0, [pc, #240]	; (d7a74 <_strtoul_r+0xf8>)
   d7984:	f8d0 9000 	ldr.w	r9, [r0]
   d7988:	460e      	mov	r6, r1
   d798a:	4635      	mov	r5, r6
   d798c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7990:	eb09 0004 	add.w	r0, r9, r4
   d7994:	7840      	ldrb	r0, [r0, #1]
   d7996:	f000 0008 	and.w	r0, r0, #8
   d799a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d799e:	b108      	cbz	r0, d79a4 <_strtoul_r+0x28>
   d79a0:	462e      	mov	r6, r5
   d79a2:	e7f2      	b.n	d798a <_strtoul_r+0xe>
   d79a4:	2c2d      	cmp	r4, #45	; 0x2d
   d79a6:	d103      	bne.n	d79b0 <_strtoul_r+0x34>
   d79a8:	1cb5      	adds	r5, r6, #2
   d79aa:	7874      	ldrb	r4, [r6, #1]
   d79ac:	2701      	movs	r7, #1
   d79ae:	e003      	b.n	d79b8 <_strtoul_r+0x3c>
   d79b0:	2c2b      	cmp	r4, #43	; 0x2b
   d79b2:	bf04      	itt	eq
   d79b4:	7874      	ldrbeq	r4, [r6, #1]
   d79b6:	1cb5      	addeq	r5, r6, #2
   d79b8:	b113      	cbz	r3, d79c0 <_strtoul_r+0x44>
   d79ba:	2b10      	cmp	r3, #16
   d79bc:	d10a      	bne.n	d79d4 <_strtoul_r+0x58>
   d79be:	e053      	b.n	d7a68 <_strtoul_r+0xec>
   d79c0:	2c30      	cmp	r4, #48	; 0x30
   d79c2:	d14f      	bne.n	d7a64 <_strtoul_r+0xe8>
   d79c4:	7828      	ldrb	r0, [r5, #0]
   d79c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d79ca:	2858      	cmp	r0, #88	; 0x58
   d79cc:	d145      	bne.n	d7a5a <_strtoul_r+0xde>
   d79ce:	786c      	ldrb	r4, [r5, #1]
   d79d0:	2310      	movs	r3, #16
   d79d2:	3502      	adds	r5, #2
   d79d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d79d8:	2600      	movs	r6, #0
   d79da:	fbbc fcf3 	udiv	ip, ip, r3
   d79de:	fb03 fa0c 	mul.w	sl, r3, ip
   d79e2:	ea6f 0a0a 	mvn.w	sl, sl
   d79e6:	4630      	mov	r0, r6
   d79e8:	eb09 0e04 	add.w	lr, r9, r4
   d79ec:	f89e e001 	ldrb.w	lr, [lr, #1]
   d79f0:	f01e 0f04 	tst.w	lr, #4
   d79f4:	d001      	beq.n	d79fa <_strtoul_r+0x7e>
   d79f6:	3c30      	subs	r4, #48	; 0x30
   d79f8:	e00b      	b.n	d7a12 <_strtoul_r+0x96>
   d79fa:	f01e 0e03 	ands.w	lr, lr, #3
   d79fe:	d01a      	beq.n	d7a36 <_strtoul_r+0xba>
   d7a00:	f1be 0f01 	cmp.w	lr, #1
   d7a04:	bf0c      	ite	eq
   d7a06:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7a0a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7a0e:	ebce 0404 	rsb	r4, lr, r4
   d7a12:	42a3      	cmp	r3, r4
   d7a14:	dd0f      	ble.n	d7a36 <_strtoul_r+0xba>
   d7a16:	2e00      	cmp	r6, #0
   d7a18:	db08      	blt.n	d7a2c <_strtoul_r+0xb0>
   d7a1a:	4560      	cmp	r0, ip
   d7a1c:	d806      	bhi.n	d7a2c <_strtoul_r+0xb0>
   d7a1e:	d101      	bne.n	d7a24 <_strtoul_r+0xa8>
   d7a20:	4554      	cmp	r4, sl
   d7a22:	dc03      	bgt.n	d7a2c <_strtoul_r+0xb0>
   d7a24:	fb03 4000 	mla	r0, r3, r0, r4
   d7a28:	2601      	movs	r6, #1
   d7a2a:	e001      	b.n	d7a30 <_strtoul_r+0xb4>
   d7a2c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7a30:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7a34:	e7d8      	b.n	d79e8 <_strtoul_r+0x6c>
   d7a36:	2e00      	cmp	r6, #0
   d7a38:	da07      	bge.n	d7a4a <_strtoul_r+0xce>
   d7a3a:	2322      	movs	r3, #34	; 0x22
   d7a3c:	f8c8 3000 	str.w	r3, [r8]
   d7a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7a44:	b92a      	cbnz	r2, d7a52 <_strtoul_r+0xd6>
   d7a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a4a:	b107      	cbz	r7, d7a4e <_strtoul_r+0xd2>
   d7a4c:	4240      	negs	r0, r0
   d7a4e:	b172      	cbz	r2, d7a6e <_strtoul_r+0xf2>
   d7a50:	b106      	cbz	r6, d7a54 <_strtoul_r+0xd8>
   d7a52:	1e69      	subs	r1, r5, #1
   d7a54:	6011      	str	r1, [r2, #0]
   d7a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a5a:	2430      	movs	r4, #48	; 0x30
   d7a5c:	2b00      	cmp	r3, #0
   d7a5e:	d1b9      	bne.n	d79d4 <_strtoul_r+0x58>
   d7a60:	2308      	movs	r3, #8
   d7a62:	e7b7      	b.n	d79d4 <_strtoul_r+0x58>
   d7a64:	230a      	movs	r3, #10
   d7a66:	e7b5      	b.n	d79d4 <_strtoul_r+0x58>
   d7a68:	2c30      	cmp	r4, #48	; 0x30
   d7a6a:	d0ab      	beq.n	d79c4 <_strtoul_r+0x48>
   d7a6c:	e7b2      	b.n	d79d4 <_strtoul_r+0x58>
   d7a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a72:	bf00      	nop
   d7a74:	2003e0f8 	.word	0x2003e0f8

000d7a78 <strtoul>:
   d7a78:	4613      	mov	r3, r2
   d7a7a:	460a      	mov	r2, r1
   d7a7c:	4601      	mov	r1, r0
   d7a7e:	4802      	ldr	r0, [pc, #8]	; (d7a88 <strtoul+0x10>)
   d7a80:	6800      	ldr	r0, [r0, #0]
   d7a82:	f7ff bf7b 	b.w	d797c <_strtoul_r>
   d7a86:	bf00      	nop
   d7a88:	2003e15c 	.word	0x2003e15c

000d7a8c <__tzcalc_limits>:
   d7a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a90:	4604      	mov	r4, r0
   d7a92:	f000 fa6f 	bl	d7f74 <__gettzinfo>
   d7a96:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7a9a:	429c      	cmp	r4, r3
   d7a9c:	f340 8096 	ble.w	d7bcc <__tzcalc_limits+0x140>
   d7aa0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7aa4:	18e3      	adds	r3, r4, r3
   d7aa6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7aaa:	109b      	asrs	r3, r3, #2
   d7aac:	f240 156d 	movw	r5, #365	; 0x16d
   d7ab0:	fb05 3502 	mla	r5, r5, r2, r3
   d7ab4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7ab8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7abc:	fb92 f3f3 	sdiv	r3, r2, r3
   d7ac0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7ac4:	442b      	add	r3, r5
   d7ac6:	18a5      	adds	r5, r4, r2
   d7ac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7acc:	fb95 f5f2 	sdiv	r5, r5, r2
   d7ad0:	441d      	add	r5, r3
   d7ad2:	2364      	movs	r3, #100	; 0x64
   d7ad4:	fb94 f7f2 	sdiv	r7, r4, r2
   d7ad8:	fb94 f6f3 	sdiv	r6, r4, r3
   d7adc:	fb02 4717 	mls	r7, r2, r7, r4
   d7ae0:	fb03 4616 	mls	r6, r3, r6, r4
   d7ae4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7ae8:	fab7 fe87 	clz	lr, r7
   d7aec:	9301      	str	r3, [sp, #4]
   d7aee:	f004 0303 	and.w	r3, r4, #3
   d7af2:	6044      	str	r4, [r0, #4]
   d7af4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7af8:	4601      	mov	r1, r0
   d7afa:	9300      	str	r3, [sp, #0]
   d7afc:	f04f 0c07 	mov.w	ip, #7
   d7b00:	7a0b      	ldrb	r3, [r1, #8]
   d7b02:	2b4a      	cmp	r3, #74	; 0x4a
   d7b04:	d10e      	bne.n	d7b24 <__tzcalc_limits+0x98>
   d7b06:	694b      	ldr	r3, [r1, #20]
   d7b08:	9a00      	ldr	r2, [sp, #0]
   d7b0a:	18ec      	adds	r4, r5, r3
   d7b0c:	b902      	cbnz	r2, d7b10 <__tzcalc_limits+0x84>
   d7b0e:	b906      	cbnz	r6, d7b12 <__tzcalc_limits+0x86>
   d7b10:	b927      	cbnz	r7, d7b1c <__tzcalc_limits+0x90>
   d7b12:	2b3b      	cmp	r3, #59	; 0x3b
   d7b14:	bfd4      	ite	le
   d7b16:	2300      	movle	r3, #0
   d7b18:	2301      	movgt	r3, #1
   d7b1a:	e000      	b.n	d7b1e <__tzcalc_limits+0x92>
   d7b1c:	2300      	movs	r3, #0
   d7b1e:	4423      	add	r3, r4
   d7b20:	3b01      	subs	r3, #1
   d7b22:	e03f      	b.n	d7ba4 <__tzcalc_limits+0x118>
   d7b24:	2b44      	cmp	r3, #68	; 0x44
   d7b26:	d102      	bne.n	d7b2e <__tzcalc_limits+0xa2>
   d7b28:	694b      	ldr	r3, [r1, #20]
   d7b2a:	442b      	add	r3, r5
   d7b2c:	e03a      	b.n	d7ba4 <__tzcalc_limits+0x118>
   d7b2e:	9b00      	ldr	r3, [sp, #0]
   d7b30:	b92b      	cbnz	r3, d7b3e <__tzcalc_limits+0xb2>
   d7b32:	2e00      	cmp	r6, #0
   d7b34:	bf0c      	ite	eq
   d7b36:	46f0      	moveq	r8, lr
   d7b38:	f04f 0801 	movne.w	r8, #1
   d7b3c:	e000      	b.n	d7b40 <__tzcalc_limits+0xb4>
   d7b3e:	46f0      	mov	r8, lr
   d7b40:	4b24      	ldr	r3, [pc, #144]	; (d7bd4 <__tzcalc_limits+0x148>)
   d7b42:	68cc      	ldr	r4, [r1, #12]
   d7b44:	2230      	movs	r2, #48	; 0x30
   d7b46:	fb02 3808 	mla	r8, r2, r8, r3
   d7b4a:	f1a8 0a04 	sub.w	sl, r8, #4
   d7b4e:	46a9      	mov	r9, r5
   d7b50:	2301      	movs	r3, #1
   d7b52:	42a3      	cmp	r3, r4
   d7b54:	da04      	bge.n	d7b60 <__tzcalc_limits+0xd4>
   d7b56:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7b5a:	3301      	adds	r3, #1
   d7b5c:	44d9      	add	r9, fp
   d7b5e:	e7f8      	b.n	d7b52 <__tzcalc_limits+0xc6>
   d7b60:	f109 0304 	add.w	r3, r9, #4
   d7b64:	fb93 fbfc 	sdiv	fp, r3, ip
   d7b68:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7b6c:	2c01      	cmp	r4, #1
   d7b6e:	ebca 0a03 	rsb	sl, sl, r3
   d7b72:	694b      	ldr	r3, [r1, #20]
   d7b74:	bfb8      	it	lt
   d7b76:	2401      	movlt	r4, #1
   d7b78:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7b7c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7b80:	690b      	ldr	r3, [r1, #16]
   d7b82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7b86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7b8a:	bf48      	it	mi
   d7b8c:	f10a 0a07 	addmi.w	sl, sl, #7
   d7b90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7b94:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7b98:	4453      	add	r3, sl
   d7b9a:	42a3      	cmp	r3, r4
   d7b9c:	db01      	blt.n	d7ba2 <__tzcalc_limits+0x116>
   d7b9e:	3b07      	subs	r3, #7
   d7ba0:	e7fb      	b.n	d7b9a <__tzcalc_limits+0x10e>
   d7ba2:	444b      	add	r3, r9
   d7ba4:	698c      	ldr	r4, [r1, #24]
   d7ba6:	4a0c      	ldr	r2, [pc, #48]	; (d7bd8 <__tzcalc_limits+0x14c>)
   d7ba8:	fb02 4303 	mla	r3, r2, r3, r4
   d7bac:	6a0c      	ldr	r4, [r1, #32]
   d7bae:	4423      	add	r3, r4
   d7bb0:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7bb4:	9b01      	ldr	r3, [sp, #4]
   d7bb6:	4299      	cmp	r1, r3
   d7bb8:	d1a2      	bne.n	d7b00 <__tzcalc_limits+0x74>
   d7bba:	69c3      	ldr	r3, [r0, #28]
   d7bbc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7bbe:	4293      	cmp	r3, r2
   d7bc0:	bfac      	ite	ge
   d7bc2:	2300      	movge	r3, #0
   d7bc4:	2301      	movlt	r3, #1
   d7bc6:	6003      	str	r3, [r0, #0]
   d7bc8:	2001      	movs	r0, #1
   d7bca:	e000      	b.n	d7bce <__tzcalc_limits+0x142>
   d7bcc:	2000      	movs	r0, #0
   d7bce:	b003      	add	sp, #12
   d7bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7bd4:	000d8a08 	.word	0x000d8a08
   d7bd8:	00015180 	.word	0x00015180

000d7bdc <__tz_lock>:
   d7bdc:	4770      	bx	lr

000d7bde <__tz_unlock>:
   d7bde:	4770      	bx	lr

000d7be0 <_tzset_unlocked>:
   d7be0:	4b01      	ldr	r3, [pc, #4]	; (d7be8 <_tzset_unlocked+0x8>)
   d7be2:	6818      	ldr	r0, [r3, #0]
   d7be4:	f000 b802 	b.w	d7bec <_tzset_unlocked_r>
   d7be8:	2003e15c 	.word	0x2003e15c

000d7bec <_tzset_unlocked_r>:
   d7bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7bf0:	b08d      	sub	sp, #52	; 0x34
   d7bf2:	4607      	mov	r7, r0
   d7bf4:	f000 f9be 	bl	d7f74 <__gettzinfo>
   d7bf8:	49b0      	ldr	r1, [pc, #704]	; (d7ebc <_tzset_unlocked_r+0x2d0>)
   d7bfa:	4eb1      	ldr	r6, [pc, #708]	; (d7ec0 <_tzset_unlocked_r+0x2d4>)
   d7bfc:	4604      	mov	r4, r0
   d7bfe:	4638      	mov	r0, r7
   d7c00:	f000 f9b0 	bl	d7f64 <_getenv_r>
   d7c04:	4605      	mov	r5, r0
   d7c06:	b960      	cbnz	r0, d7c22 <_tzset_unlocked_r+0x36>
   d7c08:	4bae      	ldr	r3, [pc, #696]	; (d7ec4 <_tzset_unlocked_r+0x2d8>)
   d7c0a:	4aaf      	ldr	r2, [pc, #700]	; (d7ec8 <_tzset_unlocked_r+0x2dc>)
   d7c0c:	6018      	str	r0, [r3, #0]
   d7c0e:	4baf      	ldr	r3, [pc, #700]	; (d7ecc <_tzset_unlocked_r+0x2e0>)
   d7c10:	6018      	str	r0, [r3, #0]
   d7c12:	4baf      	ldr	r3, [pc, #700]	; (d7ed0 <_tzset_unlocked_r+0x2e4>)
   d7c14:	6830      	ldr	r0, [r6, #0]
   d7c16:	601a      	str	r2, [r3, #0]
   d7c18:	605a      	str	r2, [r3, #4]
   d7c1a:	f7fd fd73 	bl	d5704 <free>
   d7c1e:	6035      	str	r5, [r6, #0]
   d7c20:	e148      	b.n	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7c22:	6831      	ldr	r1, [r6, #0]
   d7c24:	b979      	cbnz	r1, d7c46 <_tzset_unlocked_r+0x5a>
   d7c26:	6830      	ldr	r0, [r6, #0]
   d7c28:	f7fd fd6c 	bl	d5704 <free>
   d7c2c:	4628      	mov	r0, r5
   d7c2e:	f7ff fde4 	bl	d77fa <strlen>
   d7c32:	1c41      	adds	r1, r0, #1
   d7c34:	4638      	mov	r0, r7
   d7c36:	f7fd fd95 	bl	d5764 <_malloc_r>
   d7c3a:	6030      	str	r0, [r6, #0]
   d7c3c:	b148      	cbz	r0, d7c52 <_tzset_unlocked_r+0x66>
   d7c3e:	4629      	mov	r1, r5
   d7c40:	f7ff fdb8 	bl	d77b4 <strcpy>
   d7c44:	e005      	b.n	d7c52 <_tzset_unlocked_r+0x66>
   d7c46:	f7ff fdab 	bl	d77a0 <strcmp>
   d7c4a:	2800      	cmp	r0, #0
   d7c4c:	f000 8132 	beq.w	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7c50:	e7e9      	b.n	d7c26 <_tzset_unlocked_r+0x3a>
   d7c52:	782b      	ldrb	r3, [r5, #0]
   d7c54:	4a9f      	ldr	r2, [pc, #636]	; (d7ed4 <_tzset_unlocked_r+0x2e8>)
   d7c56:	49a0      	ldr	r1, [pc, #640]	; (d7ed8 <_tzset_unlocked_r+0x2ec>)
   d7c58:	2b3a      	cmp	r3, #58	; 0x3a
   d7c5a:	bf08      	it	eq
   d7c5c:	3501      	addeq	r5, #1
   d7c5e:	ae0a      	add	r6, sp, #40	; 0x28
   d7c60:	4633      	mov	r3, r6
   d7c62:	4628      	mov	r0, r5
   d7c64:	f7fd fd66 	bl	d5734 <siscanf>
   d7c68:	2800      	cmp	r0, #0
   d7c6a:	f340 8123 	ble.w	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7c70:	18ef      	adds	r7, r5, r3
   d7c72:	5ceb      	ldrb	r3, [r5, r3]
   d7c74:	2b2d      	cmp	r3, #45	; 0x2d
   d7c76:	d103      	bne.n	d7c80 <_tzset_unlocked_r+0x94>
   d7c78:	3701      	adds	r7, #1
   d7c7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7c7e:	e003      	b.n	d7c88 <_tzset_unlocked_r+0x9c>
   d7c80:	2b2b      	cmp	r3, #43	; 0x2b
   d7c82:	bf08      	it	eq
   d7c84:	3701      	addeq	r7, #1
   d7c86:	2501      	movs	r5, #1
   d7c88:	f10d 0a20 	add.w	sl, sp, #32
   d7c8c:	f10d 0b1e 	add.w	fp, sp, #30
   d7c90:	f04f 0800 	mov.w	r8, #0
   d7c94:	9603      	str	r6, [sp, #12]
   d7c96:	f8cd a008 	str.w	sl, [sp, #8]
   d7c9a:	9601      	str	r6, [sp, #4]
   d7c9c:	f8cd b000 	str.w	fp, [sp]
   d7ca0:	4633      	mov	r3, r6
   d7ca2:	aa07      	add	r2, sp, #28
   d7ca4:	498d      	ldr	r1, [pc, #564]	; (d7edc <_tzset_unlocked_r+0x2f0>)
   d7ca6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7caa:	4638      	mov	r0, r7
   d7cac:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7cb0:	f7fd fd40 	bl	d5734 <siscanf>
   d7cb4:	4540      	cmp	r0, r8
   d7cb6:	f340 80fd 	ble.w	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7cba:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7cbe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7cc2:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7ee8 <_tzset_unlocked_r+0x2fc>
   d7cc6:	213c      	movs	r1, #60	; 0x3c
   d7cc8:	fb01 3302 	mla	r3, r1, r2, r3
   d7ccc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7cd0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7cd4:	fb01 3302 	mla	r3, r1, r2, r3
   d7cd8:	435d      	muls	r5, r3
   d7cda:	6225      	str	r5, [r4, #32]
   d7cdc:	4d7c      	ldr	r5, [pc, #496]	; (d7ed0 <_tzset_unlocked_r+0x2e4>)
   d7cde:	4b7d      	ldr	r3, [pc, #500]	; (d7ed4 <_tzset_unlocked_r+0x2e8>)
   d7ce0:	602b      	str	r3, [r5, #0]
   d7ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ce4:	497c      	ldr	r1, [pc, #496]	; (d7ed8 <_tzset_unlocked_r+0x2ec>)
   d7ce6:	441f      	add	r7, r3
   d7ce8:	464a      	mov	r2, r9
   d7cea:	4633      	mov	r3, r6
   d7cec:	4638      	mov	r0, r7
   d7cee:	f7fd fd21 	bl	d5734 <siscanf>
   d7cf2:	4540      	cmp	r0, r8
   d7cf4:	dc08      	bgt.n	d7d08 <_tzset_unlocked_r+0x11c>
   d7cf6:	682b      	ldr	r3, [r5, #0]
   d7cf8:	606b      	str	r3, [r5, #4]
   d7cfa:	4b72      	ldr	r3, [pc, #456]	; (d7ec4 <_tzset_unlocked_r+0x2d8>)
   d7cfc:	6a22      	ldr	r2, [r4, #32]
   d7cfe:	601a      	str	r2, [r3, #0]
   d7d00:	4b72      	ldr	r3, [pc, #456]	; (d7ecc <_tzset_unlocked_r+0x2e0>)
   d7d02:	f8c3 8000 	str.w	r8, [r3]
   d7d06:	e0d5      	b.n	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d0a:	f8c5 9004 	str.w	r9, [r5, #4]
   d7d0e:	18fd      	adds	r5, r7, r3
   d7d10:	5cfb      	ldrb	r3, [r7, r3]
   d7d12:	2b2d      	cmp	r3, #45	; 0x2d
   d7d14:	d103      	bne.n	d7d1e <_tzset_unlocked_r+0x132>
   d7d16:	3501      	adds	r5, #1
   d7d18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7d1c:	e003      	b.n	d7d26 <_tzset_unlocked_r+0x13a>
   d7d1e:	2b2b      	cmp	r3, #43	; 0x2b
   d7d20:	bf08      	it	eq
   d7d22:	3501      	addeq	r5, #1
   d7d24:	2701      	movs	r7, #1
   d7d26:	2300      	movs	r3, #0
   d7d28:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7d2c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7d30:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7d34:	930a      	str	r3, [sp, #40]	; 0x28
   d7d36:	9603      	str	r6, [sp, #12]
   d7d38:	f8cd a008 	str.w	sl, [sp, #8]
   d7d3c:	9601      	str	r6, [sp, #4]
   d7d3e:	f8cd b000 	str.w	fp, [sp]
   d7d42:	4633      	mov	r3, r6
   d7d44:	aa07      	add	r2, sp, #28
   d7d46:	4965      	ldr	r1, [pc, #404]	; (d7edc <_tzset_unlocked_r+0x2f0>)
   d7d48:	4628      	mov	r0, r5
   d7d4a:	f7fd fcf3 	bl	d5734 <siscanf>
   d7d4e:	2800      	cmp	r0, #0
   d7d50:	dc04      	bgt.n	d7d5c <_tzset_unlocked_r+0x170>
   d7d52:	6a23      	ldr	r3, [r4, #32]
   d7d54:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7d58:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7d5a:	e00e      	b.n	d7d7a <_tzset_unlocked_r+0x18e>
   d7d5c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7d60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7d64:	213c      	movs	r1, #60	; 0x3c
   d7d66:	fb01 3302 	mla	r3, r1, r2, r3
   d7d6a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7d6e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7d72:	fb01 3302 	mla	r3, r1, r2, r3
   d7d76:	435f      	muls	r7, r3
   d7d78:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d7c:	4627      	mov	r7, r4
   d7d7e:	441d      	add	r5, r3
   d7d80:	f04f 0900 	mov.w	r9, #0
   d7d84:	782b      	ldrb	r3, [r5, #0]
   d7d86:	2b2c      	cmp	r3, #44	; 0x2c
   d7d88:	bf08      	it	eq
   d7d8a:	3501      	addeq	r5, #1
   d7d8c:	f895 8000 	ldrb.w	r8, [r5]
   d7d90:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7d94:	d126      	bne.n	d7de4 <_tzset_unlocked_r+0x1f8>
   d7d96:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7d9a:	9302      	str	r3, [sp, #8]
   d7d9c:	ab09      	add	r3, sp, #36	; 0x24
   d7d9e:	9300      	str	r3, [sp, #0]
   d7da0:	9603      	str	r6, [sp, #12]
   d7da2:	9601      	str	r6, [sp, #4]
   d7da4:	4633      	mov	r3, r6
   d7da6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7daa:	494d      	ldr	r1, [pc, #308]	; (d7ee0 <_tzset_unlocked_r+0x2f4>)
   d7dac:	4628      	mov	r0, r5
   d7dae:	f7fd fcc1 	bl	d5734 <siscanf>
   d7db2:	2803      	cmp	r0, #3
   d7db4:	d17e      	bne.n	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7db6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7dba:	1e4b      	subs	r3, r1, #1
   d7dbc:	2b0b      	cmp	r3, #11
   d7dbe:	d879      	bhi.n	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7dc0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7dc4:	1e53      	subs	r3, r2, #1
   d7dc6:	2b04      	cmp	r3, #4
   d7dc8:	d874      	bhi.n	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7dca:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7dce:	2b06      	cmp	r3, #6
   d7dd0:	d870      	bhi.n	d7eb4 <_tzset_unlocked_r+0x2c8>
   d7dd2:	f887 8008 	strb.w	r8, [r7, #8]
   d7dd6:	60f9      	str	r1, [r7, #12]
   d7dd8:	613a      	str	r2, [r7, #16]
   d7dda:	617b      	str	r3, [r7, #20]
   d7ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7dde:	eb05 0803 	add.w	r8, r5, r3
   d7de2:	e02a      	b.n	d7e3a <_tzset_unlocked_r+0x24e>
   d7de4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7de8:	bf06      	itte	eq
   d7dea:	3501      	addeq	r5, #1
   d7dec:	4643      	moveq	r3, r8
   d7dee:	2344      	movne	r3, #68	; 0x44
   d7df0:	220a      	movs	r2, #10
   d7df2:	a90b      	add	r1, sp, #44	; 0x2c
   d7df4:	4628      	mov	r0, r5
   d7df6:	9305      	str	r3, [sp, #20]
   d7df8:	f7ff fe3e 	bl	d7a78 <strtoul>
   d7dfc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7e00:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7e04:	4545      	cmp	r5, r8
   d7e06:	9b05      	ldr	r3, [sp, #20]
   d7e08:	d114      	bne.n	d7e34 <_tzset_unlocked_r+0x248>
   d7e0a:	234d      	movs	r3, #77	; 0x4d
   d7e0c:	f1b9 0f00 	cmp.w	r9, #0
   d7e10:	d107      	bne.n	d7e22 <_tzset_unlocked_r+0x236>
   d7e12:	7223      	strb	r3, [r4, #8]
   d7e14:	2303      	movs	r3, #3
   d7e16:	60e3      	str	r3, [r4, #12]
   d7e18:	2302      	movs	r3, #2
   d7e1a:	6123      	str	r3, [r4, #16]
   d7e1c:	f8c4 9014 	str.w	r9, [r4, #20]
   d7e20:	e00b      	b.n	d7e3a <_tzset_unlocked_r+0x24e>
   d7e22:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7e26:	230b      	movs	r3, #11
   d7e28:	62a3      	str	r3, [r4, #40]	; 0x28
   d7e2a:	2301      	movs	r3, #1
   d7e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7e2e:	2300      	movs	r3, #0
   d7e30:	6323      	str	r3, [r4, #48]	; 0x30
   d7e32:	e002      	b.n	d7e3a <_tzset_unlocked_r+0x24e>
   d7e34:	b280      	uxth	r0, r0
   d7e36:	723b      	strb	r3, [r7, #8]
   d7e38:	6178      	str	r0, [r7, #20]
   d7e3a:	2302      	movs	r3, #2
   d7e3c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7e40:	2300      	movs	r3, #0
   d7e42:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7e46:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7e4a:	930a      	str	r3, [sp, #40]	; 0x28
   d7e4c:	f898 3000 	ldrb.w	r3, [r8]
   d7e50:	2b2f      	cmp	r3, #47	; 0x2f
   d7e52:	d10b      	bne.n	d7e6c <_tzset_unlocked_r+0x280>
   d7e54:	9603      	str	r6, [sp, #12]
   d7e56:	f8cd a008 	str.w	sl, [sp, #8]
   d7e5a:	9601      	str	r6, [sp, #4]
   d7e5c:	f8cd b000 	str.w	fp, [sp]
   d7e60:	4633      	mov	r3, r6
   d7e62:	aa07      	add	r2, sp, #28
   d7e64:	491f      	ldr	r1, [pc, #124]	; (d7ee4 <_tzset_unlocked_r+0x2f8>)
   d7e66:	4640      	mov	r0, r8
   d7e68:	f7fd fc64 	bl	d5734 <siscanf>
   d7e6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7e70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7e74:	213c      	movs	r1, #60	; 0x3c
   d7e76:	fb01 3302 	mla	r3, r1, r2, r3
   d7e7a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7e7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7e82:	fb01 3302 	mla	r3, r1, r2, r3
   d7e86:	61bb      	str	r3, [r7, #24]
   d7e88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7e8a:	f109 0901 	add.w	r9, r9, #1
   d7e8e:	f1b9 0f02 	cmp.w	r9, #2
   d7e92:	4445      	add	r5, r8
   d7e94:	f107 071c 	add.w	r7, r7, #28
   d7e98:	f47f af74 	bne.w	d7d84 <_tzset_unlocked_r+0x198>
   d7e9c:	6860      	ldr	r0, [r4, #4]
   d7e9e:	f7ff fdf5 	bl	d7a8c <__tzcalc_limits>
   d7ea2:	4b08      	ldr	r3, [pc, #32]	; (d7ec4 <_tzset_unlocked_r+0x2d8>)
   d7ea4:	6a22      	ldr	r2, [r4, #32]
   d7ea6:	601a      	str	r2, [r3, #0]
   d7ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7eaa:	1a9b      	subs	r3, r3, r2
   d7eac:	4a07      	ldr	r2, [pc, #28]	; (d7ecc <_tzset_unlocked_r+0x2e0>)
   d7eae:	bf18      	it	ne
   d7eb0:	2301      	movne	r3, #1
   d7eb2:	6013      	str	r3, [r2, #0]
   d7eb4:	b00d      	add	sp, #52	; 0x34
   d7eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7eba:	bf00      	nop
   d7ebc:	000d8a68 	.word	0x000d8a68
   d7ec0:	2003e7e0 	.word	0x2003e7e0
   d7ec4:	2003e7e8 	.word	0x2003e7e8
   d7ec8:	000d8a6b 	.word	0x000d8a6b
   d7ecc:	2003e7e4 	.word	0x2003e7e4
   d7ed0:	2003e160 	.word	0x2003e160
   d7ed4:	2003e7d3 	.word	0x2003e7d3
   d7ed8:	000d8a6f 	.word	0x000d8a6f
   d7edc:	000d8a92 	.word	0x000d8a92
   d7ee0:	000d8a7e 	.word	0x000d8a7e
   d7ee4:	000d8a91 	.word	0x000d8a91
   d7ee8:	2003e7c8 	.word	0x2003e7c8

000d7eec <_findenv_r>:
   d7eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ef0:	4607      	mov	r7, r0
   d7ef2:	468b      	mov	fp, r1
   d7ef4:	4690      	mov	r8, r2
   d7ef6:	f000 f8d9 	bl	d80ac <__env_lock>
   d7efa:	4b19      	ldr	r3, [pc, #100]	; (d7f60 <_findenv_r+0x74>)
   d7efc:	681d      	ldr	r5, [r3, #0]
   d7efe:	469a      	mov	sl, r3
   d7f00:	b13d      	cbz	r5, d7f12 <_findenv_r+0x26>
   d7f02:	465c      	mov	r4, fp
   d7f04:	4623      	mov	r3, r4
   d7f06:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f0a:	b142      	cbz	r2, d7f1e <_findenv_r+0x32>
   d7f0c:	2a3d      	cmp	r2, #61	; 0x3d
   d7f0e:	461c      	mov	r4, r3
   d7f10:	d1f8      	bne.n	d7f04 <_findenv_r+0x18>
   d7f12:	4638      	mov	r0, r7
   d7f14:	f000 f8cb 	bl	d80ae <__env_unlock>
   d7f18:	2000      	movs	r0, #0
   d7f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f1e:	ebcb 0404 	rsb	r4, fp, r4
   d7f22:	46a9      	mov	r9, r5
   d7f24:	f859 0b04 	ldr.w	r0, [r9], #4
   d7f28:	2800      	cmp	r0, #0
   d7f2a:	d0f2      	beq.n	d7f12 <_findenv_r+0x26>
   d7f2c:	4622      	mov	r2, r4
   d7f2e:	4659      	mov	r1, fp
   d7f30:	f7ff fc6b 	bl	d780a <strncmp>
   d7f34:	b988      	cbnz	r0, d7f5a <_findenv_r+0x6e>
   d7f36:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7f3a:	191e      	adds	r6, r3, r4
   d7f3c:	5d1b      	ldrb	r3, [r3, r4]
   d7f3e:	2b3d      	cmp	r3, #61	; 0x3d
   d7f40:	d10b      	bne.n	d7f5a <_findenv_r+0x6e>
   d7f42:	f8da 3000 	ldr.w	r3, [sl]
   d7f46:	1aed      	subs	r5, r5, r3
   d7f48:	10ad      	asrs	r5, r5, #2
   d7f4a:	4638      	mov	r0, r7
   d7f4c:	f8c8 5000 	str.w	r5, [r8]
   d7f50:	f000 f8ad 	bl	d80ae <__env_unlock>
   d7f54:	1c70      	adds	r0, r6, #1
   d7f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f5a:	464d      	mov	r5, r9
   d7f5c:	e7e1      	b.n	d7f22 <_findenv_r+0x36>
   d7f5e:	bf00      	nop
   d7f60:	2003e1a8 	.word	0x2003e1a8

000d7f64 <_getenv_r>:
   d7f64:	b507      	push	{r0, r1, r2, lr}
   d7f66:	aa01      	add	r2, sp, #4
   d7f68:	f7ff ffc0 	bl	d7eec <_findenv_r>
   d7f6c:	b003      	add	sp, #12
   d7f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7f74 <__gettzinfo>:
   d7f74:	4800      	ldr	r0, [pc, #0]	; (d7f78 <__gettzinfo+0x4>)
   d7f76:	4770      	bx	lr
   d7f78:	2003e168 	.word	0x2003e168

000d7f7c <gmtime_r>:
   d7f7c:	6802      	ldr	r2, [r0, #0]
   d7f7e:	4b47      	ldr	r3, [pc, #284]	; (d809c <gmtime_r+0x120>)
   d7f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f82:	fb92 f4f3 	sdiv	r4, r2, r3
   d7f86:	fb03 2214 	mls	r2, r3, r4, r2
   d7f8a:	2a00      	cmp	r2, #0
   d7f8c:	bfbc      	itt	lt
   d7f8e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7f92:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7f96:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7f9a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7f9e:	fb92 f3f0 	sdiv	r3, r2, r0
   d7fa2:	fb00 2213 	mls	r2, r0, r3, r2
   d7fa6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7faa:	bfac      	ite	ge
   d7fac:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7fb0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7fb4:	608b      	str	r3, [r1, #8]
   d7fb6:	fb92 f3f0 	sdiv	r3, r2, r0
   d7fba:	fb00 2213 	mls	r2, r0, r3, r2
   d7fbe:	604b      	str	r3, [r1, #4]
   d7fc0:	600a      	str	r2, [r1, #0]
   d7fc2:	2307      	movs	r3, #7
   d7fc4:	1ce2      	adds	r2, r4, #3
   d7fc6:	fb92 f3f3 	sdiv	r3, r2, r3
   d7fca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7fce:	1ad3      	subs	r3, r2, r3
   d7fd0:	618b      	str	r3, [r1, #24]
   d7fd2:	4b33      	ldr	r3, [pc, #204]	; (d80a0 <gmtime_r+0x124>)
   d7fd4:	4d33      	ldr	r5, [pc, #204]	; (d80a4 <gmtime_r+0x128>)
   d7fd6:	fb94 f5f5 	sdiv	r5, r4, r5
   d7fda:	fb03 4405 	mla	r4, r3, r5, r4
   d7fde:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7fe2:	fbb4 f2f2 	udiv	r2, r4, r2
   d7fe6:	4422      	add	r2, r4
   d7fe8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7fec:	fbb4 f3f7 	udiv	r3, r4, r7
   d7ff0:	1ad2      	subs	r2, r2, r3
   d7ff2:	482d      	ldr	r0, [pc, #180]	; (d80a8 <gmtime_r+0x12c>)
   d7ff4:	fbb4 f0f0 	udiv	r0, r4, r0
   d7ff8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7ffc:	1a13      	subs	r3, r2, r0
   d7ffe:	fbb3 f6f6 	udiv	r6, r3, r6
   d8002:	4434      	add	r4, r6
   d8004:	f240 126d 	movw	r2, #365	; 0x16d
   d8008:	fbb3 f0f2 	udiv	r0, r3, r2
   d800c:	fbb3 f3f7 	udiv	r3, r3, r7
   d8010:	1ae3      	subs	r3, r4, r3
   d8012:	fb02 3310 	mls	r3, r2, r0, r3
   d8016:	2499      	movs	r4, #153	; 0x99
   d8018:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d801c:	3202      	adds	r2, #2
   d801e:	fbb2 f2f4 	udiv	r2, r2, r4
   d8022:	2a0a      	cmp	r2, #10
   d8024:	fb04 f402 	mul.w	r4, r4, r2
   d8028:	f104 0602 	add.w	r6, r4, #2
   d802c:	f04f 0405 	mov.w	r4, #5
   d8030:	fbb6 f4f4 	udiv	r4, r6, r4
   d8034:	bf34      	ite	cc
   d8036:	2602      	movcc	r6, #2
   d8038:	f06f 0609 	mvncs.w	r6, #9
   d803c:	4416      	add	r6, r2
   d803e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8042:	fb02 0505 	mla	r5, r2, r5, r0
   d8046:	1c5f      	adds	r7, r3, #1
   d8048:	2e01      	cmp	r6, #1
   d804a:	bf98      	it	ls
   d804c:	3501      	addls	r5, #1
   d804e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8052:	eba7 0704 	sub.w	r7, r7, r4
   d8056:	d302      	bcc.n	d805e <gmtime_r+0xe2>
   d8058:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d805c:	e014      	b.n	d8088 <gmtime_r+0x10c>
   d805e:	0782      	lsls	r2, r0, #30
   d8060:	d105      	bne.n	d806e <gmtime_r+0xf2>
   d8062:	2464      	movs	r4, #100	; 0x64
   d8064:	fbb0 f2f4 	udiv	r2, r0, r4
   d8068:	fb04 0212 	mls	r2, r4, r2, r0
   d806c:	b94a      	cbnz	r2, d8082 <gmtime_r+0x106>
   d806e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8072:	fbb0 f4f2 	udiv	r4, r0, r2
   d8076:	fb02 0014 	mls	r0, r2, r4, r0
   d807a:	fab0 f280 	clz	r2, r0
   d807e:	0952      	lsrs	r2, r2, #5
   d8080:	e000      	b.n	d8084 <gmtime_r+0x108>
   d8082:	2201      	movs	r2, #1
   d8084:	333b      	adds	r3, #59	; 0x3b
   d8086:	441a      	add	r2, r3
   d8088:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d808c:	2300      	movs	r3, #0
   d808e:	61ca      	str	r2, [r1, #28]
   d8090:	614d      	str	r5, [r1, #20]
   d8092:	610e      	str	r6, [r1, #16]
   d8094:	60cf      	str	r7, [r1, #12]
   d8096:	620b      	str	r3, [r1, #32]
   d8098:	4608      	mov	r0, r1
   d809a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d809c:	00015180 	.word	0x00015180
   d80a0:	fffdc54f 	.word	0xfffdc54f
   d80a4:	00023ab1 	.word	0x00023ab1
   d80a8:	00023ab0 	.word	0x00023ab0

000d80ac <__env_lock>:
   d80ac:	4770      	bx	lr

000d80ae <__env_unlock>:
   d80ae:	4770      	bx	lr

000d80b0 <dynalib_user>:
   d80b0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d80c0:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
   d80d0:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
   d8104:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   d8114:	3225 302e 2566 2025 2500 2e34 6631 2520     %2.0f%% .%4.1f %
   d8124:	0025 6925 7420 7069 0073 3425 312e 2066     %.%i tips.%4.1f 
   d8134:	0043 5441 432b 5546 3d4e 3631 0a0d 7b00     C.AT+CFUN=16...{
   d8144:	5322 696f 6d6c 696f 7473 7275 3165 3a22     "Soilmoisture1":
   d8154:	3425 312e 2c66 2220 6f53 6c69 6f6d 7369     %4.1f, "Soilmois
   d8164:	7574 6572 2232 253a 2e34 6631 202c 5322     ture2":%4.1f, "S
   d8174:	696f 6d6c 696f 7473 7275 3365 3a22 3425     oilmoisture3":%4
   d8184:	312e 2c66 2220 6f53 6c69 6f6d 7369 7574     .1f, "Soilmoistu
   d8194:	6572 2234 253a 2e34 6631 202c 5322 696f     re4":%4.1f, "Soi
   d81a4:	6d6c 696f 7473 7275 3565 3a22 3425 312e     lmoisture5":%4.1
   d81b4:	2c66 2220 6f53 6c69 6f6d 7369 7574 6572     f, "Soilmoisture
   d81c4:	2236 253a 2e34 6631 202c 5022 6572 6963     6":%4.1f, "Preci
   d81d4:	6970 6174 6974 6e6f 3a22 2520 2c69 2220     pitation": %i, "
   d81e4:	6f53 6c69 6574 706d 3a22 3425 312e 2c66     Soiltemp":%4.1f,
   d81f4:	2220 7548 696d 6964 7974 3a22 3425 312e      "Humidity":%4.1
   d8204:	2c66 2220 6554 706d 7265 7461 7275 2265     f, "Temperature"
   d8214:	253a 2e34 6631 202c 5022 6e61 6c65 7568     :%4.1f, "Panelhu
   d8224:	696d 6964 7974 3a22 3425 312e 2c66 2220     midity":%4.1f, "
   d8234:	6150 656e 746c 6d65 6570 6172 7574 6572     Paneltemperature
   d8244:	3a22 3425 312e 2c66 2220 6142 7474 7265     ":%4.1f, "Batter
   d8254:	2279 253a 2e34 6631 202c 5222 6461 6f69     y":%4.1f, "Radio
   d8264:	6574 6863 3a22 2520 2c69 2220 6953 6e67     tech": %i, "Sign
   d8274:	6c61 3a22 2520 2e34 6631 202c 5122 6175     al": %4.1f, "Qua
   d8284:	696c 7974 3a22 2520 2e34 6631 202c 5222     lity": %4.1f, "R
   d8294:	7365 7465 2273 253a 2c69 2220 6c41 7265     esets":%i, "Aler
   d82a4:	7374 3a22 6925 007d 6543 6c6c 6c75 7261     ts":%i}.Cellular
   d82b4:	4c5f 5069 5f6f 6f48 6b6f 4e00 206f 6144     _LiPo_Hook.No Da
   d82c4:	6174 5500 6962 6f64 7374 4820 6f6f 006b     ta.Ubidots Hook.
   d82d4:	6552 7073 6e6f 6573 5220 6365 6965 6576     Response Receive
   d82e4:	0064 7453 7461 0065 6553 2074 6556 6272     d.State.Set Verb
   d82f4:	736f 2065 6f4d 6564 3000 4300 656c 7261     ose Mode.0.Clear
   d8304:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
   d8314:	6954 656d 7a20 6e6f 2065 666f 7366 7465     Time zone offset
   d8324:	2520 0069 6954 656d 4c00 776f 5020 776f      %i.Time.Low Pow
   d8334:	7265 4e00 726f 616d 206c 704f 7265 7461     er.Normal Operat
   d8344:	6f69 736e 4600 6f72 206d 7325 7420 206f     ions.From %s to 
   d8354:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
   d8364:	6f69 006e 7245 6f72 2072 6174 696b 676e     ion.Error taking
   d8374:	4d20 6165 7573 6572 656d 746e 0073 654d      Measurements.Me
   d8384:	7361 7275 6d65 6e65 2074 6174 656b 206e     asurement taken 
   d8394:	6e61 2064 7473 726f 6465 4300 6379 656c     and stored.Cycle
   d83a4:	4320 6d6f 6c70 7465 2065 202d 6144 6174      Complete - Data
   d83b4:	5220 6365 6965 6576 0064 6552 6f70 7472      Received.Report
   d83c4:	6e69 0067 7073 7261 2f6b 6564 6976 6563     ing.spark/device
   d83d4:	732f 7365 6973 6e6f 652f 646e 4700 696f     /session/end.Goi
   d83e4:	676e 7420 206f 6c53 6565 0070 6f4c 2077     ng to Sleep.Low 
   d83f4:	6142 7474 7265 2079 202d 6c53 6565 6970     Battery - Sleepi
   d8404:	676e 4500 7272 726f 5320 6174 6574 2d20     ng.Error State -
   d8414:	5220 7365 7465 4500 7272 726f 5320 6174      Reset.Error Sta
   d8424:	6574 2d20 4c20 736f 2074 6553 7373 6f69     te - Lost Sessio
   d8434:	006e 7245 6f72 2072 7453 7461 2065 202d     n.Error State - 
   d8444:	7546 6c6c 4d20 646f 6d65 5220 7365 7465     Full Modem Reset
   d8454:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
   d8464:	746e 5200 6c65 6165 6573 7300 6174 6574     nt.Release.state
   d8474:	664f 6843 0067 6f6c 5077 776f 7265 6f4d     OfChg.lowPowerMo
   d8484:	6564 7400 6d65 6570 6172 7574 6572 6800     de.temperature.h
   d8494:	6d75 6469 7469 0079 6f53 6c69 6554 706d     umidity.SoilTemp
   d84a4:	5300 696f 4d6c 696f 7473 7275 3165 5300     .SoilMoisture1.S
   d84b4:	696f 4d6c 696f 7473 7275 3265 5300 696f     oilMoisture2.Soi
   d84c4:	4d6c 696f 7473 7275 3365 5300 696f 4d6c     lMoisture3.SoilM
   d84d4:	696f 7473 7275 3465 5300 696f 4d6c 696f     oisture4.SoilMoi
   d84e4:	7473 7275 3565 5300 696f 4d6c 696f 7473     sture5.SoilMoist
   d84f4:	7275 3665 4d00 6165 7573 6572 4e2d 776f     ure6.Measure-Now
   d8504:	4c00 776f 6f50 6577 4d72 646f 0065 6556     .LowPowerMode.Ve
   d8514:	6272 736f 2d65 6f4d 6564 5300 7465 6954     rbose-Mode.SetTi
   d8524:	656d 6f5a 656e 4600 6961 656c 2064 6f74     meZone.Failed to
   d8534:	6320 6e6f 656e 7463 5300 6174 7472 7075      connect.Startup
   d8544:	5500 6b6e 6f6e 6e77 4e00 6e6f 0065 6957     .Unknown.None.Wi
   d8554:	6946 4700 4d53 5500 544d 0053 4443 414d     Fi.GSM.UMTS.CDMA
   d8564:	4c00 4554 4900 4545 3845 3230 3531 0034     .LTE.IEEE802154.
   d8574:	2e31 3830 0000 0000                         1.08....

000d857c <_ZTVN5spark13CellularClassE>:
	...
   d8584:	581f 000d 5815 000d 580b 000d 57c1 000d     .X...X...X...W..
   d8594:	57ff 000d 57f3 000d 57e7 000d 57df 000d     .W...W...W...W..
   d85a4:	57d5 000d 57cb 000d 63c1 000d               .W...W...c..

000d85b0 <_ZTV14CellularSignal>:
	...
   d85b8:	58cd 000d 595f 000d 58cf 000d 59a1 000d     .X.._Y...X...Y..
   d85c8:	58d5 000d 596d 000d 5901 000d 592d 000d     .X..mY...Y..-Y..
   d85d8:	fffc ffff 0000 0000 5957 000d               ........WY..

000d85e4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d85ec:	59ed 000d 59f3 000d 5a49 000d 5a01 000d     .Y...Y..IZ...Z..
   d85fc:	59ef 000d                                   .Y..

000d8600 <_ZTVN5spark13EthernetClassE>:
	...
   d8608:	605f 000d 6055 000d 604b 000d 6041 000d     _`..U`..K`..A`..
   d8618:	6035 000d 6029 000d 601d 000d 6015 000d     5`..)`...`...`..
   d8628:	600b 000d 6001 000d 63c1 000d               .`...`...c..

000d8634 <_ZTV7TwoWire>:
	...
   d863c:	607d 000d 60c7 000d 609f 000d 607f 000d     }`...`...`...`..
   d864c:	60a7 000d 60af 000d 60b7 000d 60bf 000d     .`...`...`...`..

000d865c <_ZTV9IPAddress>:
	...
   d8664:	6111 000d 6101 000d 6103 000d 0066 6e6c     .a...a...a..f.ln
   d8674:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d8684:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
   d8694:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d86a4:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
   d86b4:	6553 6972 6c61 5300 7265 6169 316c 7400     Serial.Serial1.t
   d86c4:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
   d86d4:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
   d86e4:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
   d86f4:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
   d8704:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
   d8714:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   d8724:	0070 6f6e 656e 7400 6172 6563 6900 666e     p.none.trace.inf
   d8734:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d8744:	6369 6100 6c6c 0000                         ic.all..

000d874c <_ZTVN5spark9MeshClassE>:
	...
   d8754:	6253 000d 6249 000d 623f 000d 6235 000d     Sb..Ib..?b..5b..
   d8764:	6229 000d 621d 000d 6211 000d 6209 000d     )b...b...b...b..
   d8774:	61ff 000d 61f5 000d 63c1 000d               .a...a...c..

000d8780 <_ZTVN5spark12NetworkClassE>:
	...
   d8788:	6359 000d 6363 000d 636d 000d 6377 000d     Yc..cc..mc..wc..
   d8798:	6381 000d 638d 000d 6399 000d 63a5 000d     .c...c...c...c..
   d87a8:	63ad 000d 63b7 000d 63c1 000d               .c...c...c..

000d87b4 <_ZTV8SPIClass>:
	...
   d87bc:	6605 000d 6607 000d 2b25 3330 3a64 3025     .f...f..%+03d:%0
   d87cc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d87dc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d87ec <_ZTV11USARTSerial>:
	...
   d87f4:	69ed 000d 6a3d 000d 6a4b 000d 64a1 000d     .i..=j..Kj...d..
   d8804:	6a01 000d 6a23 000d 6a0f 000d 6a37 000d     .j..#j...j..7j..
   d8814:	69ef 000d 69f3 000d                         .i...i..

000d881c <_ZTV9USBSerial>:
	...
   d8824:	6af5 000d 6b45 000d 6b53 000d 64a1 000d     .j..Ek..Sk...d..
   d8834:	6b31 000d 6af7 000d 6b0d 000d 6b3f 000d     1k...j...k..?k..
   d8844:	6b23 000d 6af1 000d                         #k...j..

000d884c <day_name.4725>:
   d884c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d885c:	6972 6153 4a74                                   riSat

000d8861 <mon_name.4726>:
   d8861:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d8871:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d8881:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d8891:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d88a1:	6425 000a                                   %d..

000d88a5 <_ctype_>:
   d88a5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d88b5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d88c5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d88d5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d88e5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d88f5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8905:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8915:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8925:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d89a8 <__sf_fake_stdin>:
	...

000d89c8 <__sf_fake_stdout>:
	...

000d89e8 <__sf_fake_stderr>:
	...

000d8a08 <__month_lengths>:
   d8a08:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8a18:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8a28:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8a38:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8a48:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8a58:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8a68:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8a78:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8a88:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d8a98:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d8aa4 <link_const_variable_data_end>:
   d8aa4:	000d5175 	.word	0x000d5175
   d8aa8:	000d57b1 	.word	0x000d57b1
   d8aac:	000d589d 	.word	0x000d589d
   d8ab0:	000d6069 	.word	0x000d6069
   d8ab4:	000d61e5 	.word	0x000d61e5
   d8ab8:	000d6309 	.word	0x000d6309
   d8abc:	000d648d 	.word	0x000d648d
   d8ac0:	000d65e9 	.word	0x000d65e9
   d8ac4:	000d683d 	.word	0x000d683d
   d8ac8:	000d69d9 	.word	0x000d69d9
   d8acc:	000d6dd1 	.word	0x000d6dd1
   d8ad0:	000d6e29 	.word	0x000d6e29
   d8ad4:	000d6eed 	.word	0x000d6eed
   d8ad8:	000d6f71 	.word	0x000d6f71
   d8adc:	000d6ff5 	.word	0x000d6ff5
